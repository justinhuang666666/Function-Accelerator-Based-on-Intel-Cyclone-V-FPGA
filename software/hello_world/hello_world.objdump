
hello_world.elf:     file format elf32-littlenios2
hello_world.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010244

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00009298 memsz 0x00009298 flags r-x
    LOAD off    0x0000a2b8 vaddr 0x000192b8 paddr 0x0001959c align 2**12
         filesz 0x000002e4 memsz 0x000002e4 flags rw-
    LOAD off    0x0000a880 vaddr 0x00019880 paddr 0x00019880 align 2**12
         filesz 0x00000000 memsz 0x00000128 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00008de4  00010244  00010244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000290  00019028  00019028  0000a028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e4  000192b8  0001959c  0000a2b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000128  00019880  00019880  0000a880  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  000199a8  000199a8  0000a59c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000a59c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000af8  00000000  00000000  0000a5c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00012119  00000000  00000000  0000b0b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005a48  00000000  00000000  0001d1d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006e99  00000000  00000000  00022c19  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000016ec  00000000  00000000  00029ab4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002cb5  00000000  00000000  0002b1a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000d3ab  00000000  00000000  0002de55  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0003b200  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000010f8  00000000  00000000  0003b230  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003e7ea  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0003e7ed  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003e7f0  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003e7f1  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0003e7f2  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0003e7f6  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0003e7fa  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0003e7fe  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0003e807  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0003e810  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  0003e819  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000071  00000000  00000000  0003e82b  2**0
                  CONTENTS, READONLY
 29 .jdi          000058e3  00000000  00000000  0003e89c  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0003cd07  00000000  00000000  0004417f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010244 l    d  .text	00000000 .text
00019028 l    d  .rodata	00000000 .rodata
000192b8 l    d  .rwdata	00000000 .rwdata
00019880 l    d  .bss	00000000 .bss
000199a8 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../hello_world_bsp//obj/HAL/src/crt0.o
0001028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 efgcvt.c
00000000 l    df *ABS*	00000000 impure.c
000192b8 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00011368 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 ecvtbuf.c
0001191c l     F .text	000001e4 print_e
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 mprec.c
00019154 l     O .rodata	0000000c p05.2796
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 dtoa.c
000136d0 l     F .text	00000220 quorem
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 alt_load.c
000176a4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00019574 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
000178e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_write.c
0001799c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00017ad8 l     F .text	00000034 alt_dev_reg
00019398 l     O .rwdata	0000002c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00017dd4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
00017ec8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00018024 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00018050 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00018404 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00018564 l     F .text	0000003c alt_get_errno
000185a0 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000198a4 g     O .bss	00000004 alt_instruction_exception_handler
00014d3c g     F .text	0000001c _malloc_usable_size_r
00013270 g     F .text	00000068 _mprec_log10
00013330 g     F .text	00000070 __any_on
00019160 g     O .rodata	00000028 __mprec_tinytens
00017790 g     F .text	0000006c alt_main
0001364c g     F .text	0000002c strcpy
000112b8 g     F .text	00000080 _puts_r
000198a8 g     O .bss	00000100 alt_irq
0001959c g       *ABS*	00000000 __flash_rwdata_start
00016188 g     F .text	00000088 .hidden __eqdf2
000199a8 g       *ABS*	00000000 __alt_heap_start
0001126c g     F .text	0000004c printf
00011b00 g     F .text	0000016c fcvtbuf
00012390 g     F .text	000000e4 _Balloc
000177fc g     F .text	0000003c alt_putstr
00016210 g     F .text	000000dc .hidden __gtdf2
00018a10 g     F .text	00000024 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000001c __reset
00017924 g     F .text	00000078 times
00010020 g       *ABS*	00000000 __flash_exceptions_start
00019888 g     O .bss	00000004 errno
00019890 g     O .bss	00000004 alt_argv
0002156c g       *ABS*	00000000 _gp
000193ec g     O .rwdata	00000180 alt_fd_list
00018a34 g     F .text	00000090 alt_find_dev
00014c10 g     F .text	00000028 memcpy
000175c8 g     F .text	000000dc .hidden __floatsidf
000184e8 g     F .text	0000007c alt_io_redirect
000162ec g     F .text	000000f4 .hidden __ltdf2
00011338 g     F .text	00000014 puts
00018d20 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000131cc g     F .text	000000a4 __ratio
00017c54 g     F .text	000000ec altera_avalon_jtag_uart_read
00014be8 g     F .text	00000014 malloc
00011230 g     F .text	0000003c _printf_r
00014e50 g     F .text	00000064 .hidden __udivsi3
000191b0 g     O .rodata	000000c8 __mprec_tens
000111f0 g     F .text	00000040 gcvtf
00018c90 g     F .text	00000090 alt_icache_flush
00012834 g     F .text	0000003c __i2b
000135fc g     F .text	00000050 _sbrk_r
00019588 g     O .rwdata	00000004 alt_max_fd
00010ec4 g     F .text	00000110 .hidden __extendsfdf2
00014f0c g     F .text	000008ac .hidden __adddf3
00012f88 g     F .text	00000104 __b2d
0001956c g     O .rwdata	00000004 _global_impure_ptr
00013558 g     F .text	000000a4 _realloc_r
000199a8 g       *ABS*	00000000 __bss_end
00018314 g     F .text	000000f0 alt_iic_isr_register
00018908 g     F .text	00000108 alt_tick
00019188 g     O .rodata	00000028 __mprec_bigtens
00012618 g     F .text	00000104 __s2b
00010e1c g     F .text	000000a8 .hidden __floatunsidf
00012d64 g     F .text	0000005c __mcmp
000182c8 g     F .text	0000004c alt_ic_irq_enabled
0001886c g     F .text	0000009c alt_alarm_stop
00019898 g     O .bss	00000004 alt_irq_active
00010000 g       *ABS*	00000000 __alt_mem_onchip_mem
000100fc g     F .exceptions	000000d4 alt_irq_handler
000193c4 g     O .rwdata	00000028 alt_dev_null
00017fdc g     F .text	00000048 alt_dcache_flush_all
0001271c g     F .text	00000068 __hi0bits
00017548 g     F .text	00000080 .hidden __fixdfsi
0001959c g       *ABS*	00000000 __ram_rwdata_end
00019580 g     O .rwdata	00000008 alt_dev_list
000179d8 g     F .text	00000100 write
000192b8 g       *ABS*	00000000 __ram_rodata_end
000162ec g     F .text	000000f4 .hidden __ledf2
00012ae8 g     F .text	00000134 __pow5mult
00014eb4 g     F .text	00000058 .hidden __umodsi3
000199a8 g       *ABS*	00000000 end
000101d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0001fa00 g       *ABS*	00000000 __alt_stack_pointer
0001206c g     F .text	0000026c _dcvt
00017e4c g     F .text	0000007c alt_avalon_timer_sc_init
00010fd4 g     F .text	00000064 .hidden __clzsi2
00017d40 g     F .text	00000094 altera_avalon_jtag_uart_write
000113d4 g     F .text	0000052c ___vfprintf_internal_r
00014c58 g     F .text	000000e4 _free_r
00018e64 g     F .text	00000190 __call_exitprocs
00010244 g     F .text	0000004c _start
0001989c g     O .bss	00000004 _alt_tick_rate
00011d74 g     F .text	000002f8 _gcvt
00012c1c g     F .text	00000148 __lshift
000198a0 g     O .bss	00000004 _alt_nticks
00017b44 g     F .text	00000050 alt_sys_init
00012870 g     F .text	00000278 __multiply
00011038 g     F .text	00000028 .hidden __mulsi3
000192b8 g       *ABS*	00000000 __ram_rwdata_start
00019028 g       *ABS*	00000000 __ram_rodata_start
0001308c g     F .text	00000140 __d2b
00017b94 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00018bcc g     F .text	000000c4 alt_get_fd
00010290 g     F .text	000000b8 generateVector
00018e34 g     F .text	00000030 memcmp
000199a8 g       *ABS*	00000000 __alt_stack_base
000157b8 g     F .text	000009d0 .hidden __divdf3
000132d8 g     F .text	00000058 __copybits
000163e0 g     F .text	0000086c .hidden __muldf3
00018ac4 g     F .text	00000108 alt_find_file
0001808c g     F .text	000000a4 alt_dev_llist_insert
00017838 g     F .text	000000b0 sbrk
000133a0 g     F .text	00000060 _calloc_r
000122d8 g     F .text	000000b8 __sfvwrite_small_dev
00019880 g       *ABS*	00000000 __bss_start
00014c38 g     F .text	00000020 memset
0001043c g     F .text	000000e8 main
00011060 g     F .text	00000024 fcvt
00019894 g     O .bss	00000004 alt_envp
00017bf4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00011c6c g     F .text	00000108 ecvtbuf
0001fa00 g       *ABS*	00000000 __alt_heap_limit
000138f0 g     F .text	000012f8 _dtoa_r
00013400 g     F .text	00000158 _malloc_r
0001958c g     O .rwdata	00000004 alt_errno
000110fc g     F .text	00000054 ecvtf
00014d58 g     F .text	00000084 .hidden __divsi3
000109ec g     F .text	00000430 .hidden __mulsf3
00019028 g       *ABS*	00000000 __flash_rodata_start
00016188 g     F .text	00000088 .hidden __nedf2
00017b0c g     F .text	00000038 alt_irq_init
000187e8 g     F .text	00000084 alt_release_fd
00019050 g     O .rodata	00000100 .hidden __clz_tab
00010348 g     F .text	000000f4 sumVector
00013678 g     F .text	00000058 _write_r
00019570 g     O .rwdata	00000004 _impure_ptr
0001988c g     O .bss	00000004 alt_argc
00010020 g       .exceptions	00000000 alt_irq_entry
00012f34 g     F .text	00000054 __ulp
000110d8 g     F .text	00000024 ecvt
00019578 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00018164 g     F .text	00000050 alt_ic_isr_register
0001959c g       *ABS*	00000000 _edata
000199a8 g       *ABS*	00000000 _end
00010244 g       *ABS*	00000000 __ram_exceptions_end
0001823c g     F .text	0000008c alt_ic_irq_disable
00011084 g     F .text	00000054 fcvtf
00018dbc g     F .text	00000020 exit
00012dc0 g     F .text	00000174 __mdiff
00014ddc g     F .text	00000074 .hidden __modsi3
0001fa00 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00011150 g     F .text	000000a0 gcvt
00018ff4 g     F .text	00000034 _exit
0001134c g     F .text	0000001c strlen
0001868c g     F .text	0000015c open
00016210 g     F .text	000000dc .hidden __gedf2
00019880 g     O .bss	00000004 __malloc_sbrk_start
00018130 g     F .text	00000034 alt_icache_flush_all
00018ddc g     F .text	00000058 fputs
00019590 g     O .rwdata	00000004 alt_priority_mask
00019884 g     O .bss	00000004 __malloc_free_list
000181b4 g     F .text	00000088 alt_ic_irq_enable
00011900 g     F .text	0000001c __vfprintf_internal
00016c4c g     F .text	000008fc .hidden __subdf3
00012784 g     F .text	000000b0 __lo0bits
00019594 g     O .rwdata	00000008 alt_alarm_list
00017f04 g     F .text	000000d8 close
00010524 g     F .text	000004c8 .hidden __addsf3
0001770c g     F .text	00000084 alt_load
00014bfc g     F .text	00000014 free
000124ec g     F .text	0000012c __multadd
00012474 g     F .text	00000078 _Bfree



Disassembly of section .entry:

00010000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   10000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
   10004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   10008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1000c:	00bffd16 	blt	zero,r2,10004 <_gp+0xfffeea98>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10010:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10014:	08409114 	ori	at,at,580
    jmp r1
   10018:	0800683a 	jmp	at
   1001c:	00000000 	call	0 <__reset-0x10000>

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101d00 	call	101d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0fffb17 	ldw	r3,-20(fp)
   10130:	e0bffc17 	ldw	r2,-16(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001426 	beq	r2,zero,1018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1013c:	008000b4 	movhi	r2,2
   10140:	10a62a04 	addi	r2,r2,-26456
   10144:	e0fffd17 	ldw	r3,-12(fp)
   10148:	180690fa 	slli	r3,r3,3
   1014c:	10c5883a 	add	r2,r2,r3
   10150:	10c00017 	ldw	r3,0(r2)
   10154:	008000b4 	movhi	r2,2
   10158:	10a62a04 	addi	r2,r2,-26456
   1015c:	e13ffd17 	ldw	r4,-12(fp)
   10160:	200890fa 	slli	r4,r4,3
   10164:	1105883a 	add	r2,r2,r4
   10168:	10800104 	addi	r2,r2,4
   1016c:	10800017 	ldw	r2,0(r2)
   10170:	1009883a 	mov	r4,r2
   10174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   10178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   1017c:	0005313a 	rdctl	r2,ipending
   10180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10184:	e0bfff17 	ldw	r2,-4(fp)
   10188:	00000706 	br	101a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   1018c:	e0bffc17 	ldw	r2,-16(fp)
   10190:	1085883a 	add	r2,r2,r2
   10194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   10198:	e0bffd17 	ldw	r2,-12(fp)
   1019c:	10800044 	addi	r2,r2,1
   101a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a4:	003fe106 	br	1012c <_gp+0xfffeebc0>

    active = alt_irq_pending ();
   101a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   101ac:	e0bffb17 	ldw	r2,-20(fp)
   101b0:	103fdb1e 	bne	r2,zero,10120 <_gp+0xfffeebb4>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101b4:	0001883a 	nop
}
   101b8:	0001883a 	nop
   101bc:	e037883a 	mov	sp,fp
   101c0:	dfc00117 	ldw	ra,4(sp)
   101c4:	df000017 	ldw	fp,0(sp)
   101c8:	dec00204 	addi	sp,sp,8
   101cc:	f800283a 	ret

000101d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101d0:	defffb04 	addi	sp,sp,-20
   101d4:	dfc00415 	stw	ra,16(sp)
   101d8:	df000315 	stw	fp,12(sp)
   101dc:	df000304 	addi	fp,sp,12
   101e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   101e4:	000531fa 	rdctl	r2,exception
   101e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   101ec:	e0bffd17 	ldw	r2,-12(fp)
   101f0:	10801f0c 	andi	r2,r2,124
   101f4:	1004d0ba 	srli	r2,r2,2
   101f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   101fc:	0005333a 	rdctl	r2,badaddr
   10200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   10204:	d0a0ce17 	ldw	r2,-31944(gp)
   10208:	10000726 	beq	r2,zero,10228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   1020c:	d0a0ce17 	ldw	r2,-31944(gp)
   10210:	e0fffd17 	ldw	r3,-12(fp)
   10214:	e1bffe17 	ldw	r6,-8(fp)
   10218:	e17fff17 	ldw	r5,-4(fp)
   1021c:	1809883a 	mov	r4,r3
   10220:	103ee83a 	callr	r2
   10224:	00000206 	br	10230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   1022c:	0005883a 	mov	r2,zero
}
   10230:	e037883a 	mov	sp,fp
   10234:	dfc00117 	ldw	ra,4(sp)
   10238:	df000017 	ldw	fp,0(sp)
   1023c:	dec00204 	addi	sp,sp,8
   10240:	f800283a 	ret

Disassembly of section .text:

00010244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   10244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   10248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   1024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   10250:	00bffd16 	blt	zero,r2,10248 <_gp+0xfffeecdc>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10254:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10258:	defe8014 	ori	sp,sp,64000
    movhi gp, %hi(_gp)
   1025c:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   10260:	d6855b14 	ori	gp,gp,5484
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10264:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10268:	10a62014 	ori	r2,r2,39040

    movhi r3, %hi(__bss_end)
   1026c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   10270:	18e66a14 	ori	r3,r3,39336

    beq r2, r3, 1f
   10274:	10c00326 	beq	r2,r3,10284 <_start+0x40>

0:
    stw zero, (r2)
   10278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   1027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   10280:	10fffd36 	bltu	r2,r3,10278 <_gp+0xfffeed0c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10284:	001770c0 	call	1770c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10288:	00177900 	call	17790 <alt_main>

0001028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   1028c:	003fff06 	br	1028c <_gp+0xfffeed20>

00010290 <generateVector>:
#define step 5
#define N 2041

// Generates the vector x and stores it in the memory
void generateVector(float x[N])
{
   10290:	defffb04 	addi	sp,sp,-20
   10294:	dfc00415 	stw	ra,16(sp)
   10298:	df000315 	stw	fp,12(sp)
   1029c:	dc000215 	stw	r16,8(sp)
   102a0:	df000304 	addi	fp,sp,12
   102a4:	e13ffe15 	stw	r4,-8(fp)
	int i;
	x[0] = 0;
   102a8:	e0bffe17 	ldw	r2,-8(fp)
   102ac:	10000015 	stw	zero,0(r2)
	for (i=1; i<N; i++)
   102b0:	00800044 	movi	r2,1
   102b4:	e0bffd15 	stw	r2,-12(fp)
   102b8:	00001906 	br	10320 <generateVector+0x90>
		x[i] = x[i-1] + step;
   102bc:	e0bffd17 	ldw	r2,-12(fp)
   102c0:	1085883a 	add	r2,r2,r2
   102c4:	1085883a 	add	r2,r2,r2
   102c8:	1007883a 	mov	r3,r2
   102cc:	e0bffe17 	ldw	r2,-8(fp)
   102d0:	10e1883a 	add	r16,r2,r3
   102d4:	e0fffd17 	ldw	r3,-12(fp)
   102d8:	00900034 	movhi	r2,16384
   102dc:	10bfffc4 	addi	r2,r2,-1
   102e0:	1885883a 	add	r2,r3,r2
   102e4:	1085883a 	add	r2,r2,r2
   102e8:	1085883a 	add	r2,r2,r2
   102ec:	1007883a 	mov	r3,r2
   102f0:	e0bffe17 	ldw	r2,-8(fp)
   102f4:	10c5883a 	add	r2,r2,r3
   102f8:	10c00017 	ldw	r3,0(r2)
   102fc:	01502834 	movhi	r5,16544
   10300:	1809883a 	mov	r4,r3
   10304:	00105240 	call	10524 <__addsf3>
   10308:	1007883a 	mov	r3,r2
   1030c:	1805883a 	mov	r2,r3
   10310:	80800015 	stw	r2,0(r16)
// Generates the vector x and stores it in the memory
void generateVector(float x[N])
{
	int i;
	x[0] = 0;
	for (i=1; i<N; i++)
   10314:	e0bffd17 	ldw	r2,-12(fp)
   10318:	10800044 	addi	r2,r2,1
   1031c:	e0bffd15 	stw	r2,-12(fp)
   10320:	e0bffd17 	ldw	r2,-12(fp)
   10324:	1081fe50 	cmplti	r2,r2,2041
   10328:	103fe41e 	bne	r2,zero,102bc <_gp+0xfffeed50>
		x[i] = x[i-1] + step;
}
   1032c:	0001883a 	nop
   10330:	e6ffff04 	addi	sp,fp,-4
   10334:	dfc00217 	ldw	ra,8(sp)
   10338:	df000117 	ldw	fp,4(sp)
   1033c:	dc000017 	ldw	r16,0(sp)
   10340:	dec00304 	addi	sp,sp,12
   10344:	f800283a 	ret

00010348 <sumVector>:
float sumVector(float x[], int M)
{
   10348:	defff904 	addi	sp,sp,-28
   1034c:	dfc00615 	stw	ra,24(sp)
   10350:	df000515 	stw	fp,20(sp)
   10354:	dc000415 	stw	r16,16(sp)
   10358:	df000504 	addi	fp,sp,20
   1035c:	e13ffd15 	stw	r4,-12(fp)
   10360:	e17ffe15 	stw	r5,-8(fp)
 float y = 0;
   10364:	e03ffb15 	stw	zero,-20(fp)
 int j;
 for(j=0;j<M;j++)
   10368:	e03ffc15 	stw	zero,-16(fp)
   1036c:	00002706 	br	1040c <sumVector+0xc4>
	 y = y + x[j] +x[j]*x[j];
   10370:	e0bffc17 	ldw	r2,-16(fp)
   10374:	1085883a 	add	r2,r2,r2
   10378:	1085883a 	add	r2,r2,r2
   1037c:	1007883a 	mov	r3,r2
   10380:	e0bffd17 	ldw	r2,-12(fp)
   10384:	10c5883a 	add	r2,r2,r3
   10388:	10c00017 	ldw	r3,0(r2)
   1038c:	e17ffb17 	ldw	r5,-20(fp)
   10390:	1809883a 	mov	r4,r3
   10394:	00105240 	call	10524 <__addsf3>
   10398:	1007883a 	mov	r3,r2
   1039c:	1821883a 	mov	r16,r3
   103a0:	e0bffc17 	ldw	r2,-16(fp)
   103a4:	1085883a 	add	r2,r2,r2
   103a8:	1085883a 	add	r2,r2,r2
   103ac:	1007883a 	mov	r3,r2
   103b0:	e0bffd17 	ldw	r2,-12(fp)
   103b4:	10c5883a 	add	r2,r2,r3
   103b8:	10c00017 	ldw	r3,0(r2)
   103bc:	e0bffc17 	ldw	r2,-16(fp)
   103c0:	1085883a 	add	r2,r2,r2
   103c4:	1085883a 	add	r2,r2,r2
   103c8:	1009883a 	mov	r4,r2
   103cc:	e0bffd17 	ldw	r2,-12(fp)
   103d0:	1105883a 	add	r2,r2,r4
   103d4:	11000017 	ldw	r4,0(r2)
   103d8:	200b883a 	mov	r5,r4
   103dc:	1809883a 	mov	r4,r3
   103e0:	00109ec0 	call	109ec <__mulsf3>
   103e4:	1007883a 	mov	r3,r2
   103e8:	1805883a 	mov	r2,r3
   103ec:	100b883a 	mov	r5,r2
   103f0:	8009883a 	mov	r4,r16
   103f4:	00105240 	call	10524 <__addsf3>
   103f8:	1007883a 	mov	r3,r2
   103fc:	e0fffb15 	stw	r3,-20(fp)
}
float sumVector(float x[], int M)
{
 float y = 0;
 int j;
 for(j=0;j<M;j++)
   10400:	e0bffc17 	ldw	r2,-16(fp)
   10404:	10800044 	addi	r2,r2,1
   10408:	e0bffc15 	stw	r2,-16(fp)
   1040c:	e0fffc17 	ldw	r3,-16(fp)
   10410:	e0bffe17 	ldw	r2,-8(fp)
   10414:	18bfd616 	blt	r3,r2,10370 <_gp+0xfffeee04>
	 y = y + x[j] +x[j]*x[j];
 return y;
   10418:	e0bffb17 	ldw	r2,-20(fp)
   1041c:	1007883a 	mov	r3,r2
}
   10420:	1805883a 	mov	r2,r3
   10424:	e6ffff04 	addi	sp,fp,-4
   10428:	dfc00217 	ldw	ra,8(sp)
   1042c:	df000117 	ldw	fp,4(sp)
   10430:	dc000017 	ldw	r16,0(sp)
   10434:	dec00304 	addi	sp,sp,12
   10438:	f800283a 	ret

0001043c <main>:
int main()
{
   1043c:	def7f504 	addi	sp,sp,-8236
   10440:	dfc80a15 	stw	ra,8232(sp)
   10444:	df080915 	stw	fp,8228(sp)
   10448:	df080904 	addi	fp,sp,8228
	printf("Task 2!\n");
   1044c:	010000b4 	movhi	r4,2
   10450:	21240a04 	addi	r4,r4,-28632
   10454:	00113380 	call	11338 <puts>
	// Define input vector
	float x[N];
	// Returned result
	float y;
	generateVector(x);
   10458:	e0b7fa04 	addi	r2,fp,-8216
   1045c:	1009883a 	mov	r4,r2
   10460:	00102900 	call	10290 <generateVector>
	// The following is used for timing
	char buf[50];
	clock_t exec_t1, exec_t2;
	exec_t1 = times(NULL); // get system time before starting the process
   10464:	0009883a 	mov	r4,zero
   10468:	00179240 	call	17924 <times>
   1046c:	e0b7f715 	stw	r2,-8228(fp)
	// The code that you want to time goes here
	y = sumVector(x, N);
   10470:	e0b7fa04 	addi	r2,fp,-8216
   10474:	0141fe44 	movi	r5,2041
   10478:	1009883a 	mov	r4,r2
   1047c:	00103480 	call	10348 <sumVector>
   10480:	e0b7f815 	stw	r2,-8224(fp)
	// till here
	exec_t2 = times(NULL); // get system time after finishing the process
   10484:	0009883a 	mov	r4,zero
   10488:	00179240 	call	17924 <times>
   1048c:	e0b7f915 	stw	r2,-8220(fp)
	gcvt((exec_t2 - exec_t1), 10, buf);
   10490:	e0f7f917 	ldw	r3,-8220(fp)
   10494:	e0b7f717 	ldw	r2,-8228(fp)
   10498:	1885c83a 	sub	r2,r3,r2
   1049c:	1009883a 	mov	r4,r2
   104a0:	0010e1c0 	call	10e1c <__floatunsidf>
   104a4:	1011883a 	mov	r8,r2
   104a8:	1813883a 	mov	r9,r3
   104ac:	e0bff304 	addi	r2,fp,-52
   104b0:	100f883a 	mov	r7,r2
   104b4:	01800284 	movi	r6,10
   104b8:	4009883a 	mov	r4,r8
   104bc:	480b883a 	mov	r5,r9
   104c0:	00111500 	call	11150 <gcvt>
	alt_putstr(" proc time = ");
   104c4:	010000b4 	movhi	r4,2
   104c8:	21240c04 	addi	r4,r4,-28624
   104cc:	00177fc0 	call	177fc <alt_putstr>
	alt_putstr(buf);
   104d0:	e0bff304 	addi	r2,fp,-52
   104d4:	1009883a 	mov	r4,r2
   104d8:	00177fc0 	call	177fc <alt_putstr>
	alt_putstr(" ticks \n");
   104dc:	010000b4 	movhi	r4,2
   104e0:	21241004 	addi	r4,r4,-28608
   104e4:	00177fc0 	call	177fc <alt_putstr>
	int i;
//	for (i=0; i<10; i++)
//		y = y/2.0;
	printf("%d\n",y);
   104e8:	e137f817 	ldw	r4,-8224(fp)
   104ec:	0010ec40 	call	10ec4 <__extendsfdf2>
   104f0:	100d883a 	mov	r6,r2
   104f4:	180f883a 	mov	r7,r3
   104f8:	300b883a 	mov	r5,r6
   104fc:	380d883a 	mov	r6,r7
   10500:	010000b4 	movhi	r4,2
   10504:	21241304 	addi	r4,r4,-28596
   10508:	001126c0 	call	1126c <printf>
	return 0;
   1050c:	0005883a 	mov	r2,zero
}
   10510:	e037883a 	mov	sp,fp
   10514:	dfc00117 	ldw	ra,4(sp)
   10518:	df000017 	ldw	fp,0(sp)
   1051c:	dec00204 	addi	sp,sp,8
   10520:	f800283a 	ret

00010524 <__addsf3>:
   10524:	defffc04 	addi	sp,sp,-16
   10528:	2004d7fa 	srli	r2,r4,31
   1052c:	280cd5fa 	srli	r6,r5,23
   10530:	dc000015 	stw	r16,0(sp)
   10534:	00c02034 	movhi	r3,128
   10538:	2020d5fa 	srli	r16,r4,23
   1053c:	280ed7fa 	srli	r7,r5,31
   10540:	18ffffc4 	addi	r3,r3,-1
   10544:	dc400115 	stw	r17,4(sp)
   10548:	1908703a 	and	r4,r3,r4
   1054c:	194a703a 	and	r5,r3,r5
   10550:	dfc00315 	stw	ra,12(sp)
   10554:	dc800215 	stw	r18,8(sp)
   10558:	14403fcc 	andi	r17,r2,255
   1055c:	84003fcc 	andi	r16,r16,255
   10560:	200890fa 	slli	r4,r4,3
   10564:	31803fcc 	andi	r6,r6,255
   10568:	280a90fa 	slli	r5,r5,3
   1056c:	89c05026 	beq	r17,r7,106b0 <__addsf3+0x18c>
   10570:	8185c83a 	sub	r2,r16,r6
   10574:	00807a0e 	bge	zero,r2,10760 <__addsf3+0x23c>
   10578:	30001e1e 	bne	r6,zero,105f4 <__addsf3+0xd0>
   1057c:	28006d1e 	bne	r5,zero,10734 <__addsf3+0x210>
   10580:	208001cc 	andi	r2,r4,7
   10584:	10000426 	beq	r2,zero,10598 <__addsf3+0x74>
   10588:	208003cc 	andi	r2,r4,15
   1058c:	00c00104 	movi	r3,4
   10590:	10c00126 	beq	r2,r3,10598 <__addsf3+0x74>
   10594:	20c9883a 	add	r4,r4,r3
   10598:	2081002c 	andhi	r2,r4,1024
   1059c:	10003926 	beq	r2,zero,10684 <__addsf3+0x160>
   105a0:	84000044 	addi	r16,r16,1
   105a4:	00803fc4 	movi	r2,255
   105a8:	80807826 	beq	r16,r2,1078c <__addsf3+0x268>
   105ac:	200891ba 	slli	r4,r4,6
   105b0:	8805883a 	mov	r2,r17
   105b4:	2008d27a 	srli	r4,r4,9
   105b8:	84003fcc 	andi	r16,r16,255
   105bc:	800695fa 	slli	r3,r16,23
   105c0:	10803fcc 	andi	r2,r2,255
   105c4:	04002034 	movhi	r16,128
   105c8:	843fffc4 	addi	r16,r16,-1
   105cc:	100497fa 	slli	r2,r2,31
   105d0:	2408703a 	and	r4,r4,r16
   105d4:	20e0b03a 	or	r16,r4,r3
   105d8:	8084b03a 	or	r2,r16,r2
   105dc:	dfc00317 	ldw	ra,12(sp)
   105e0:	dc800217 	ldw	r18,8(sp)
   105e4:	dc400117 	ldw	r17,4(sp)
   105e8:	dc000017 	ldw	r16,0(sp)
   105ec:	dec00404 	addi	sp,sp,16
   105f0:	f800283a 	ret
   105f4:	00c03fc4 	movi	r3,255
   105f8:	80ffe126 	beq	r16,r3,10580 <_gp+0xfffef014>
   105fc:	29410034 	orhi	r5,r5,1024
   10600:	00c006c4 	movi	r3,27
   10604:	18807516 	blt	r3,r2,107dc <__addsf3+0x2b8>
   10608:	00c00804 	movi	r3,32
   1060c:	1887c83a 	sub	r3,r3,r2
   10610:	28c6983a 	sll	r3,r5,r3
   10614:	288ad83a 	srl	r5,r5,r2
   10618:	1804c03a 	cmpne	r2,r3,zero
   1061c:	288ab03a 	or	r5,r5,r2
   10620:	2149c83a 	sub	r4,r4,r5
   10624:	2081002c 	andhi	r2,r4,1024
   10628:	10001426 	beq	r2,zero,1067c <__addsf3+0x158>
   1062c:	04810034 	movhi	r18,1024
   10630:	94bfffc4 	addi	r18,r18,-1
   10634:	24a4703a 	and	r18,r4,r18
   10638:	9009883a 	mov	r4,r18
   1063c:	0010fd40 	call	10fd4 <__clzsi2>
   10640:	10bffec4 	addi	r2,r2,-5
   10644:	90a4983a 	sll	r18,r18,r2
   10648:	14005416 	blt	r2,r16,1079c <__addsf3+0x278>
   1064c:	1405c83a 	sub	r2,r2,r16
   10650:	11000044 	addi	r4,r2,1
   10654:	00800804 	movi	r2,32
   10658:	1105c83a 	sub	r2,r2,r4
   1065c:	9084983a 	sll	r2,r18,r2
   10660:	9124d83a 	srl	r18,r18,r4
   10664:	0021883a 	mov	r16,zero
   10668:	1008c03a 	cmpne	r4,r2,zero
   1066c:	9108b03a 	or	r4,r18,r4
   10670:	003fc306 	br	10580 <_gp+0xfffef014>
   10674:	1000db26 	beq	r2,zero,109e4 <__addsf3+0x4c0>
   10678:	1009883a 	mov	r4,r2
   1067c:	208001cc 	andi	r2,r4,7
   10680:	103fc11e 	bne	r2,zero,10588 <_gp+0xfffef01c>
   10684:	2006d0fa 	srli	r3,r4,3
   10688:	01003fc4 	movi	r4,255
   1068c:	8805883a 	mov	r2,r17
   10690:	8100241e 	bne	r16,r4,10724 <__addsf3+0x200>
   10694:	18006e26 	beq	r3,zero,10850 <__addsf3+0x32c>
   10698:	19001034 	orhi	r4,r3,64
   1069c:	00c02034 	movhi	r3,128
   106a0:	18ffffc4 	addi	r3,r3,-1
   106a4:	043fffc4 	movi	r16,-1
   106a8:	20c8703a 	and	r4,r4,r3
   106ac:	003fc206 	br	105b8 <_gp+0xfffef04c>
   106b0:	8187c83a 	sub	r3,r16,r6
   106b4:	00c03e0e 	bge	zero,r3,107b0 <__addsf3+0x28c>
   106b8:	30002326 	beq	r6,zero,10748 <__addsf3+0x224>
   106bc:	01803fc4 	movi	r6,255
   106c0:	81bfaf26 	beq	r16,r6,10580 <_gp+0xfffef014>
   106c4:	29410034 	orhi	r5,r5,1024
   106c8:	018006c4 	movi	r6,27
   106cc:	30c07416 	blt	r6,r3,108a0 <__addsf3+0x37c>
   106d0:	01800804 	movi	r6,32
   106d4:	30cdc83a 	sub	r6,r6,r3
   106d8:	298c983a 	sll	r6,r5,r6
   106dc:	28cad83a 	srl	r5,r5,r3
   106e0:	3006c03a 	cmpne	r3,r6,zero
   106e4:	28cab03a 	or	r5,r5,r3
   106e8:	2149883a 	add	r4,r4,r5
   106ec:	20c1002c 	andhi	r3,r4,1024
   106f0:	183fe226 	beq	r3,zero,1067c <_gp+0xfffef110>
   106f4:	84000044 	addi	r16,r16,1
   106f8:	00c03fc4 	movi	r3,255
   106fc:	80c05426 	beq	r16,r3,10850 <__addsf3+0x32c>
   10700:	00bf0034 	movhi	r2,64512
   10704:	10bfffc4 	addi	r2,r2,-1
   10708:	20c0004c 	andi	r3,r4,1
   1070c:	2088703a 	and	r4,r4,r2
   10710:	2008d07a 	srli	r4,r4,1
   10714:	20c8b03a 	or	r4,r4,r3
   10718:	003f9906 	br	10580 <_gp+0xfffef014>
   1071c:	0007883a 	mov	r3,zero
   10720:	0005883a 	mov	r2,zero
   10724:	01002034 	movhi	r4,128
   10728:	213fffc4 	addi	r4,r4,-1
   1072c:	1908703a 	and	r4,r3,r4
   10730:	003fa106 	br	105b8 <_gp+0xfffef04c>
   10734:	10bfffc4 	addi	r2,r2,-1
   10738:	103fb926 	beq	r2,zero,10620 <_gp+0xfffef0b4>
   1073c:	00c03fc4 	movi	r3,255
   10740:	80ffaf1e 	bne	r16,r3,10600 <_gp+0xfffef094>
   10744:	003f8e06 	br	10580 <_gp+0xfffef014>
   10748:	283f8d26 	beq	r5,zero,10580 <_gp+0xfffef014>
   1074c:	18ffffc4 	addi	r3,r3,-1
   10750:	183fe526 	beq	r3,zero,106e8 <_gp+0xfffef17c>
   10754:	01803fc4 	movi	r6,255
   10758:	81bfdb1e 	bne	r16,r6,106c8 <_gp+0xfffef15c>
   1075c:	003f8806 	br	10580 <_gp+0xfffef014>
   10760:	1000201e 	bne	r2,zero,107e4 <__addsf3+0x2c0>
   10764:	80800044 	addi	r2,r16,1
   10768:	10803fcc 	andi	r2,r2,255
   1076c:	01800044 	movi	r6,1
   10770:	3080450e 	bge	r6,r2,10888 <__addsf3+0x364>
   10774:	2165c83a 	sub	r18,r4,r5
   10778:	90c1002c 	andhi	r3,r18,1024
   1077c:	18002b26 	beq	r3,zero,1082c <__addsf3+0x308>
   10780:	2925c83a 	sub	r18,r5,r4
   10784:	3823883a 	mov	r17,r7
   10788:	003fab06 	br	10638 <_gp+0xfffef0cc>
   1078c:	8805883a 	mov	r2,r17
   10790:	043fffc4 	movi	r16,-1
   10794:	0009883a 	mov	r4,zero
   10798:	003f8706 	br	105b8 <_gp+0xfffef04c>
   1079c:	013f0034 	movhi	r4,64512
   107a0:	213fffc4 	addi	r4,r4,-1
   107a4:	80a1c83a 	sub	r16,r16,r2
   107a8:	9108703a 	and	r4,r18,r4
   107ac:	003f7406 	br	10580 <_gp+0xfffef014>
   107b0:	1800411e 	bne	r3,zero,108b8 <__addsf3+0x394>
   107b4:	80c00044 	addi	r3,r16,1
   107b8:	19c03fcc 	andi	r7,r3,255
   107bc:	01800044 	movi	r6,1
   107c0:	31c0260e 	bge	r6,r7,1085c <__addsf3+0x338>
   107c4:	01803fc4 	movi	r6,255
   107c8:	19802126 	beq	r3,r6,10850 <__addsf3+0x32c>
   107cc:	2149883a 	add	r4,r4,r5
   107d0:	2008d07a 	srli	r4,r4,1
   107d4:	1821883a 	mov	r16,r3
   107d8:	003f6906 	br	10580 <_gp+0xfffef014>
   107dc:	01400044 	movi	r5,1
   107e0:	003f8f06 	br	10620 <_gp+0xfffef0b4>
   107e4:	8000151e 	bne	r16,zero,1083c <__addsf3+0x318>
   107e8:	20002f26 	beq	r4,zero,108a8 <__addsf3+0x384>
   107ec:	0084303a 	nor	r2,zero,r2
   107f0:	10000a26 	beq	r2,zero,1081c <__addsf3+0x2f8>
   107f4:	00c03fc4 	movi	r3,255
   107f8:	30c02b26 	beq	r6,r3,108a8 <__addsf3+0x384>
   107fc:	00c006c4 	movi	r3,27
   10800:	18806d16 	blt	r3,r2,109b8 <__addsf3+0x494>
   10804:	00c00804 	movi	r3,32
   10808:	1887c83a 	sub	r3,r3,r2
   1080c:	20c6983a 	sll	r3,r4,r3
   10810:	2084d83a 	srl	r2,r4,r2
   10814:	1808c03a 	cmpne	r4,r3,zero
   10818:	1108b03a 	or	r4,r2,r4
   1081c:	2909c83a 	sub	r4,r5,r4
   10820:	3021883a 	mov	r16,r6
   10824:	3823883a 	mov	r17,r7
   10828:	003f7e06 	br	10624 <_gp+0xfffef0b8>
   1082c:	903f821e 	bne	r18,zero,10638 <_gp+0xfffef0cc>
   10830:	0005883a 	mov	r2,zero
   10834:	0021883a 	mov	r16,zero
   10838:	003fba06 	br	10724 <_gp+0xfffef1b8>
   1083c:	00c03fc4 	movi	r3,255
   10840:	30c01926 	beq	r6,r3,108a8 <__addsf3+0x384>
   10844:	0085c83a 	sub	r2,zero,r2
   10848:	21010034 	orhi	r4,r4,1024
   1084c:	003feb06 	br	107fc <_gp+0xfffef290>
   10850:	043fffc4 	movi	r16,-1
   10854:	0009883a 	mov	r4,zero
   10858:	003f5706 	br	105b8 <_gp+0xfffef04c>
   1085c:	80004a1e 	bne	r16,zero,10988 <__addsf3+0x464>
   10860:	20005926 	beq	r4,zero,109c8 <__addsf3+0x4a4>
   10864:	283f4626 	beq	r5,zero,10580 <_gp+0xfffef014>
   10868:	2149883a 	add	r4,r4,r5
   1086c:	2081002c 	andhi	r2,r4,1024
   10870:	103f8226 	beq	r2,zero,1067c <_gp+0xfffef110>
   10874:	00bf0034 	movhi	r2,64512
   10878:	10bfffc4 	addi	r2,r2,-1
   1087c:	3021883a 	mov	r16,r6
   10880:	2088703a 	and	r4,r4,r2
   10884:	003f3e06 	br	10580 <_gp+0xfffef014>
   10888:	8000121e 	bne	r16,zero,108d4 <__addsf3+0x3b0>
   1088c:	2000261e 	bne	r4,zero,10928 <__addsf3+0x404>
   10890:	283fa226 	beq	r5,zero,1071c <_gp+0xfffef1b0>
   10894:	2809883a 	mov	r4,r5
   10898:	3823883a 	mov	r17,r7
   1089c:	003f3806 	br	10580 <_gp+0xfffef014>
   108a0:	01400044 	movi	r5,1
   108a4:	003f9006 	br	106e8 <_gp+0xfffef17c>
   108a8:	2809883a 	mov	r4,r5
   108ac:	3021883a 	mov	r16,r6
   108b0:	3823883a 	mov	r17,r7
   108b4:	003f3206 	br	10580 <_gp+0xfffef014>
   108b8:	80000c1e 	bne	r16,zero,108ec <__addsf3+0x3c8>
   108bc:	20002f26 	beq	r4,zero,1097c <__addsf3+0x458>
   108c0:	00c6303a 	nor	r3,zero,r3
   108c4:	18002b1e 	bne	r3,zero,10974 <__addsf3+0x450>
   108c8:	2149883a 	add	r4,r4,r5
   108cc:	3021883a 	mov	r16,r6
   108d0:	003f8606 	br	106ec <_gp+0xfffef180>
   108d4:	20001b1e 	bne	r4,zero,10944 <__addsf3+0x420>
   108d8:	28003926 	beq	r5,zero,109c0 <__addsf3+0x49c>
   108dc:	2809883a 	mov	r4,r5
   108e0:	3823883a 	mov	r17,r7
   108e4:	04003fc4 	movi	r16,255
   108e8:	003f2506 	br	10580 <_gp+0xfffef014>
   108ec:	01c03fc4 	movi	r7,255
   108f0:	31c02226 	beq	r6,r7,1097c <__addsf3+0x458>
   108f4:	00c7c83a 	sub	r3,zero,r3
   108f8:	21010034 	orhi	r4,r4,1024
   108fc:	01c006c4 	movi	r7,27
   10900:	38c03616 	blt	r7,r3,109dc <__addsf3+0x4b8>
   10904:	01c00804 	movi	r7,32
   10908:	38cfc83a 	sub	r7,r7,r3
   1090c:	21ce983a 	sll	r7,r4,r7
   10910:	20c6d83a 	srl	r3,r4,r3
   10914:	3808c03a 	cmpne	r4,r7,zero
   10918:	1906b03a 	or	r3,r3,r4
   1091c:	1949883a 	add	r4,r3,r5
   10920:	3021883a 	mov	r16,r6
   10924:	003f7106 	br	106ec <_gp+0xfffef180>
   10928:	283f1526 	beq	r5,zero,10580 <_gp+0xfffef014>
   1092c:	2145c83a 	sub	r2,r4,r5
   10930:	10c1002c 	andhi	r3,r2,1024
   10934:	183f4f26 	beq	r3,zero,10674 <_gp+0xfffef108>
   10938:	2909c83a 	sub	r4,r5,r4
   1093c:	3823883a 	mov	r17,r7
   10940:	003f0f06 	br	10580 <_gp+0xfffef014>
   10944:	28001a26 	beq	r5,zero,109b0 <__addsf3+0x48c>
   10948:	2008d0fa 	srli	r4,r4,3
   1094c:	2080102c 	andhi	r2,r4,64
   10950:	10000526 	beq	r2,zero,10968 <__addsf3+0x444>
   10954:	280ad0fa 	srli	r5,r5,3
   10958:	2880102c 	andhi	r2,r5,64
   1095c:	1000021e 	bne	r2,zero,10968 <__addsf3+0x444>
   10960:	2809883a 	mov	r4,r5
   10964:	3823883a 	mov	r17,r7
   10968:	200890fa 	slli	r4,r4,3
   1096c:	04003fc4 	movi	r16,255
   10970:	003f0306 	br	10580 <_gp+0xfffef014>
   10974:	01c03fc4 	movi	r7,255
   10978:	31ffe01e 	bne	r6,r7,108fc <_gp+0xfffef390>
   1097c:	2809883a 	mov	r4,r5
   10980:	3021883a 	mov	r16,r6
   10984:	003efe06 	br	10580 <_gp+0xfffef014>
   10988:	20001126 	beq	r4,zero,109d0 <__addsf3+0x4ac>
   1098c:	28000826 	beq	r5,zero,109b0 <__addsf3+0x48c>
   10990:	2008d0fa 	srli	r4,r4,3
   10994:	2080102c 	andhi	r2,r4,64
   10998:	103ff326 	beq	r2,zero,10968 <_gp+0xfffef3fc>
   1099c:	280ad0fa 	srli	r5,r5,3
   109a0:	2880102c 	andhi	r2,r5,64
   109a4:	103ff01e 	bne	r2,zero,10968 <_gp+0xfffef3fc>
   109a8:	2809883a 	mov	r4,r5
   109ac:	003fee06 	br	10968 <_gp+0xfffef3fc>
   109b0:	04003fc4 	movi	r16,255
   109b4:	003ef206 	br	10580 <_gp+0xfffef014>
   109b8:	01000044 	movi	r4,1
   109bc:	003f9706 	br	1081c <_gp+0xfffef2b0>
   109c0:	0005883a 	mov	r2,zero
   109c4:	003f3406 	br	10698 <_gp+0xfffef12c>
   109c8:	2809883a 	mov	r4,r5
   109cc:	003eec06 	br	10580 <_gp+0xfffef014>
   109d0:	2809883a 	mov	r4,r5
   109d4:	04003fc4 	movi	r16,255
   109d8:	003ee906 	br	10580 <_gp+0xfffef014>
   109dc:	00c00044 	movi	r3,1
   109e0:	003fce06 	br	1091c <_gp+0xfffef3b0>
   109e4:	0005883a 	mov	r2,zero
   109e8:	003f4e06 	br	10724 <_gp+0xfffef1b8>

000109ec <__mulsf3>:
   109ec:	defff504 	addi	sp,sp,-44
   109f0:	dc000115 	stw	r16,4(sp)
   109f4:	2020d5fa 	srli	r16,r4,23
   109f8:	dd400615 	stw	r21,24(sp)
   109fc:	202ad7fa 	srli	r21,r4,31
   10a00:	dc800315 	stw	r18,12(sp)
   10a04:	04802034 	movhi	r18,128
   10a08:	df000915 	stw	fp,36(sp)
   10a0c:	dd000515 	stw	r20,20(sp)
   10a10:	94bfffc4 	addi	r18,r18,-1
   10a14:	dfc00a15 	stw	ra,40(sp)
   10a18:	ddc00815 	stw	r23,32(sp)
   10a1c:	dd800715 	stw	r22,28(sp)
   10a20:	dcc00415 	stw	r19,16(sp)
   10a24:	dc400215 	stw	r17,8(sp)
   10a28:	84003fcc 	andi	r16,r16,255
   10a2c:	9124703a 	and	r18,r18,r4
   10a30:	a829883a 	mov	r20,r21
   10a34:	af003fcc 	andi	fp,r21,255
   10a38:	80005426 	beq	r16,zero,10b8c <__mulsf3+0x1a0>
   10a3c:	00803fc4 	movi	r2,255
   10a40:	80802f26 	beq	r16,r2,10b00 <__mulsf3+0x114>
   10a44:	91002034 	orhi	r4,r18,128
   10a48:	202490fa 	slli	r18,r4,3
   10a4c:	843fe044 	addi	r16,r16,-127
   10a50:	0023883a 	mov	r17,zero
   10a54:	002f883a 	mov	r23,zero
   10a58:	2804d5fa 	srli	r2,r5,23
   10a5c:	282cd7fa 	srli	r22,r5,31
   10a60:	01002034 	movhi	r4,128
   10a64:	213fffc4 	addi	r4,r4,-1
   10a68:	10803fcc 	andi	r2,r2,255
   10a6c:	2166703a 	and	r19,r4,r5
   10a70:	b1803fcc 	andi	r6,r22,255
   10a74:	10004c26 	beq	r2,zero,10ba8 <__mulsf3+0x1bc>
   10a78:	00c03fc4 	movi	r3,255
   10a7c:	10c04726 	beq	r2,r3,10b9c <__mulsf3+0x1b0>
   10a80:	99002034 	orhi	r4,r19,128
   10a84:	202690fa 	slli	r19,r4,3
   10a88:	10bfe044 	addi	r2,r2,-127
   10a8c:	0007883a 	mov	r3,zero
   10a90:	80a1883a 	add	r16,r16,r2
   10a94:	010003c4 	movi	r4,15
   10a98:	1c44b03a 	or	r2,r3,r17
   10a9c:	b56af03a 	xor	r21,r22,r21
   10aa0:	81c00044 	addi	r7,r16,1
   10aa4:	20806b36 	bltu	r4,r2,10c54 <__mulsf3+0x268>
   10aa8:	100490ba 	slli	r2,r2,2
   10aac:	01000074 	movhi	r4,1
   10ab0:	2102b004 	addi	r4,r4,2752
   10ab4:	1105883a 	add	r2,r2,r4
   10ab8:	10800017 	ldw	r2,0(r2)
   10abc:	1000683a 	jmp	r2
   10ac0:	00010c54 	movui	zero,1073
   10ac4:	00010b14 	movui	zero,1068
   10ac8:	00010b14 	movui	zero,1068
   10acc:	00010b10 	cmplti	zero,zero,1068
   10ad0:	00010c38 	rdprs	zero,zero,1072
   10ad4:	00010c38 	rdprs	zero,zero,1072
   10ad8:	00010c24 	muli	zero,zero,1072
   10adc:	00010b10 	cmplti	zero,zero,1068
   10ae0:	00010c38 	rdprs	zero,zero,1072
   10ae4:	00010c24 	muli	zero,zero,1072
   10ae8:	00010c38 	rdprs	zero,zero,1072
   10aec:	00010b10 	cmplti	zero,zero,1068
   10af0:	00010c44 	movi	zero,1073
   10af4:	00010c44 	movi	zero,1073
   10af8:	00010c44 	movi	zero,1073
   10afc:	00010d54 	movui	zero,1077
   10b00:	90003b1e 	bne	r18,zero,10bf0 <__mulsf3+0x204>
   10b04:	04400204 	movi	r17,8
   10b08:	05c00084 	movi	r23,2
   10b0c:	003fd206 	br	10a58 <_gp+0xfffef4ec>
   10b10:	302b883a 	mov	r21,r6
   10b14:	00800084 	movi	r2,2
   10b18:	18802626 	beq	r3,r2,10bb4 <__mulsf3+0x1c8>
   10b1c:	008000c4 	movi	r2,3
   10b20:	1880b826 	beq	r3,r2,10e04 <__mulsf3+0x418>
   10b24:	00800044 	movi	r2,1
   10b28:	1880af1e 	bne	r3,r2,10de8 <__mulsf3+0x3fc>
   10b2c:	a829883a 	mov	r20,r21
   10b30:	0007883a 	mov	r3,zero
   10b34:	0009883a 	mov	r4,zero
   10b38:	18803fcc 	andi	r2,r3,255
   10b3c:	100695fa 	slli	r3,r2,23
   10b40:	a0803fcc 	andi	r2,r20,255
   10b44:	100a97fa 	slli	r5,r2,31
   10b48:	00802034 	movhi	r2,128
   10b4c:	10bfffc4 	addi	r2,r2,-1
   10b50:	2084703a 	and	r2,r4,r2
   10b54:	10c4b03a 	or	r2,r2,r3
   10b58:	1144b03a 	or	r2,r2,r5
   10b5c:	dfc00a17 	ldw	ra,40(sp)
   10b60:	df000917 	ldw	fp,36(sp)
   10b64:	ddc00817 	ldw	r23,32(sp)
   10b68:	dd800717 	ldw	r22,28(sp)
   10b6c:	dd400617 	ldw	r21,24(sp)
   10b70:	dd000517 	ldw	r20,20(sp)
   10b74:	dcc00417 	ldw	r19,16(sp)
   10b78:	dc800317 	ldw	r18,12(sp)
   10b7c:	dc400217 	ldw	r17,8(sp)
   10b80:	dc000117 	ldw	r16,4(sp)
   10b84:	dec00b04 	addi	sp,sp,44
   10b88:	f800283a 	ret
   10b8c:	90000d1e 	bne	r18,zero,10bc4 <__mulsf3+0x1d8>
   10b90:	04400104 	movi	r17,4
   10b94:	05c00044 	movi	r23,1
   10b98:	003faf06 	br	10a58 <_gp+0xfffef4ec>
   10b9c:	9806c03a 	cmpne	r3,r19,zero
   10ba0:	18c00084 	addi	r3,r3,2
   10ba4:	003fba06 	br	10a90 <_gp+0xfffef524>
   10ba8:	9800141e 	bne	r19,zero,10bfc <__mulsf3+0x210>
   10bac:	00c00044 	movi	r3,1
   10bb0:	003fb706 	br	10a90 <_gp+0xfffef524>
   10bb4:	a829883a 	mov	r20,r21
   10bb8:	00ffffc4 	movi	r3,-1
   10bbc:	0009883a 	mov	r4,zero
   10bc0:	003fdd06 	br	10b38 <_gp+0xfffef5cc>
   10bc4:	9009883a 	mov	r4,r18
   10bc8:	d9400015 	stw	r5,0(sp)
   10bcc:	0010fd40 	call	10fd4 <__clzsi2>
   10bd0:	10fffec4 	addi	r3,r2,-5
   10bd4:	10801d84 	addi	r2,r2,118
   10bd8:	90e4983a 	sll	r18,r18,r3
   10bdc:	00a1c83a 	sub	r16,zero,r2
   10be0:	0023883a 	mov	r17,zero
   10be4:	002f883a 	mov	r23,zero
   10be8:	d9400017 	ldw	r5,0(sp)
   10bec:	003f9a06 	br	10a58 <_gp+0xfffef4ec>
   10bf0:	04400304 	movi	r17,12
   10bf4:	05c000c4 	movi	r23,3
   10bf8:	003f9706 	br	10a58 <_gp+0xfffef4ec>
   10bfc:	9809883a 	mov	r4,r19
   10c00:	d9800015 	stw	r6,0(sp)
   10c04:	0010fd40 	call	10fd4 <__clzsi2>
   10c08:	10fffec4 	addi	r3,r2,-5
   10c0c:	10801d84 	addi	r2,r2,118
   10c10:	98e6983a 	sll	r19,r19,r3
   10c14:	0085c83a 	sub	r2,zero,r2
   10c18:	0007883a 	mov	r3,zero
   10c1c:	d9800017 	ldw	r6,0(sp)
   10c20:	003f9b06 	br	10a90 <_gp+0xfffef524>
   10c24:	01002034 	movhi	r4,128
   10c28:	0029883a 	mov	r20,zero
   10c2c:	213fffc4 	addi	r4,r4,-1
   10c30:	00ffffc4 	movi	r3,-1
   10c34:	003fc006 	br	10b38 <_gp+0xfffef5cc>
   10c38:	9027883a 	mov	r19,r18
   10c3c:	b807883a 	mov	r3,r23
   10c40:	003fb406 	br	10b14 <_gp+0xfffef5a8>
   10c44:	9027883a 	mov	r19,r18
   10c48:	e02b883a 	mov	r21,fp
   10c4c:	b807883a 	mov	r3,r23
   10c50:	003fb006 	br	10b14 <_gp+0xfffef5a8>
   10c54:	9028d43a 	srli	r20,r18,16
   10c58:	982cd43a 	srli	r22,r19,16
   10c5c:	94bfffcc 	andi	r18,r18,65535
   10c60:	9cffffcc 	andi	r19,r19,65535
   10c64:	980b883a 	mov	r5,r19
   10c68:	9009883a 	mov	r4,r18
   10c6c:	d9c00015 	stw	r7,0(sp)
   10c70:	00110380 	call	11038 <__mulsi3>
   10c74:	a00b883a 	mov	r5,r20
   10c78:	9809883a 	mov	r4,r19
   10c7c:	1023883a 	mov	r17,r2
   10c80:	00110380 	call	11038 <__mulsi3>
   10c84:	a009883a 	mov	r4,r20
   10c88:	b00b883a 	mov	r5,r22
   10c8c:	1027883a 	mov	r19,r2
   10c90:	00110380 	call	11038 <__mulsi3>
   10c94:	b00b883a 	mov	r5,r22
   10c98:	9009883a 	mov	r4,r18
   10c9c:	1029883a 	mov	r20,r2
   10ca0:	00110380 	call	11038 <__mulsi3>
   10ca4:	8806d43a 	srli	r3,r17,16
   10ca8:	14c5883a 	add	r2,r2,r19
   10cac:	d9c00017 	ldw	r7,0(sp)
   10cb0:	1885883a 	add	r2,r3,r2
   10cb4:	14c0022e 	bgeu	r2,r19,10cc0 <__mulsf3+0x2d4>
   10cb8:	00c00074 	movhi	r3,1
   10cbc:	a0e9883a 	add	r20,r20,r3
   10cc0:	1026943a 	slli	r19,r2,16
   10cc4:	8c7fffcc 	andi	r17,r17,65535
   10cc8:	1004d43a 	srli	r2,r2,16
   10ccc:	9c63883a 	add	r17,r19,r17
   10cd0:	882691ba 	slli	r19,r17,6
   10cd4:	1505883a 	add	r2,r2,r20
   10cd8:	8822d6ba 	srli	r17,r17,26
   10cdc:	100891ba 	slli	r4,r2,6
   10ce0:	9826c03a 	cmpne	r19,r19,zero
   10ce4:	9c62b03a 	or	r17,r19,r17
   10ce8:	8926b03a 	or	r19,r17,r4
   10cec:	9882002c 	andhi	r2,r19,2048
   10cf0:	10000426 	beq	r2,zero,10d04 <__mulsf3+0x318>
   10cf4:	9804d07a 	srli	r2,r19,1
   10cf8:	9900004c 	andi	r4,r19,1
   10cfc:	3821883a 	mov	r16,r7
   10d00:	1126b03a 	or	r19,r2,r4
   10d04:	80c01fc4 	addi	r3,r16,127
   10d08:	00c0210e 	bge	zero,r3,10d90 <__mulsf3+0x3a4>
   10d0c:	988001cc 	andi	r2,r19,7
   10d10:	10000426 	beq	r2,zero,10d24 <__mulsf3+0x338>
   10d14:	988003cc 	andi	r2,r19,15
   10d18:	01000104 	movi	r4,4
   10d1c:	11000126 	beq	r2,r4,10d24 <__mulsf3+0x338>
   10d20:	9927883a 	add	r19,r19,r4
   10d24:	9882002c 	andhi	r2,r19,2048
   10d28:	10000426 	beq	r2,zero,10d3c <__mulsf3+0x350>
   10d2c:	00be0034 	movhi	r2,63488
   10d30:	10bfffc4 	addi	r2,r2,-1
   10d34:	80c02004 	addi	r3,r16,128
   10d38:	98a6703a 	and	r19,r19,r2
   10d3c:	00803f84 	movi	r2,254
   10d40:	10ff9c16 	blt	r2,r3,10bb4 <_gp+0xfffef648>
   10d44:	980891ba 	slli	r4,r19,6
   10d48:	a829883a 	mov	r20,r21
   10d4c:	2008d27a 	srli	r4,r4,9
   10d50:	003f7906 	br	10b38 <_gp+0xfffef5cc>
   10d54:	9080102c 	andhi	r2,r18,64
   10d58:	10000826 	beq	r2,zero,10d7c <__mulsf3+0x390>
   10d5c:	9880102c 	andhi	r2,r19,64
   10d60:	1000061e 	bne	r2,zero,10d7c <__mulsf3+0x390>
   10d64:	00802034 	movhi	r2,128
   10d68:	99001034 	orhi	r4,r19,64
   10d6c:	10bfffc4 	addi	r2,r2,-1
   10d70:	b029883a 	mov	r20,r22
   10d74:	2088703a 	and	r4,r4,r2
   10d78:	003fad06 	br	10c30 <_gp+0xfffef6c4>
   10d7c:	00802034 	movhi	r2,128
   10d80:	91001034 	orhi	r4,r18,64
   10d84:	10bfffc4 	addi	r2,r2,-1
   10d88:	2088703a 	and	r4,r4,r2
   10d8c:	003fa806 	br	10c30 <_gp+0xfffef6c4>
   10d90:	00800044 	movi	r2,1
   10d94:	10c7c83a 	sub	r3,r2,r3
   10d98:	008006c4 	movi	r2,27
   10d9c:	10ff6316 	blt	r2,r3,10b2c <_gp+0xfffef5c0>
   10da0:	00800804 	movi	r2,32
   10da4:	10c5c83a 	sub	r2,r2,r3
   10da8:	9884983a 	sll	r2,r19,r2
   10dac:	98c6d83a 	srl	r3,r19,r3
   10db0:	1004c03a 	cmpne	r2,r2,zero
   10db4:	1884b03a 	or	r2,r3,r2
   10db8:	10c001cc 	andi	r3,r2,7
   10dbc:	18000426 	beq	r3,zero,10dd0 <__mulsf3+0x3e4>
   10dc0:	10c003cc 	andi	r3,r2,15
   10dc4:	01000104 	movi	r4,4
   10dc8:	19000126 	beq	r3,r4,10dd0 <__mulsf3+0x3e4>
   10dcc:	1105883a 	add	r2,r2,r4
   10dd0:	10c1002c 	andhi	r3,r2,1024
   10dd4:	18000626 	beq	r3,zero,10df0 <__mulsf3+0x404>
   10dd8:	a829883a 	mov	r20,r21
   10ddc:	00c00044 	movi	r3,1
   10de0:	0009883a 	mov	r4,zero
   10de4:	003f5406 	br	10b38 <_gp+0xfffef5cc>
   10de8:	3821883a 	mov	r16,r7
   10dec:	003fc506 	br	10d04 <_gp+0xfffef798>
   10df0:	100491ba 	slli	r2,r2,6
   10df4:	a829883a 	mov	r20,r21
   10df8:	0007883a 	mov	r3,zero
   10dfc:	1008d27a 	srli	r4,r2,9
   10e00:	003f4d06 	br	10b38 <_gp+0xfffef5cc>
   10e04:	00802034 	movhi	r2,128
   10e08:	99001034 	orhi	r4,r19,64
   10e0c:	10bfffc4 	addi	r2,r2,-1
   10e10:	a829883a 	mov	r20,r21
   10e14:	2088703a 	and	r4,r4,r2
   10e18:	003f8506 	br	10c30 <_gp+0xfffef6c4>

00010e1c <__floatunsidf>:
   10e1c:	defffe04 	addi	sp,sp,-8
   10e20:	dc000015 	stw	r16,0(sp)
   10e24:	dfc00115 	stw	ra,4(sp)
   10e28:	2021883a 	mov	r16,r4
   10e2c:	20002226 	beq	r4,zero,10eb8 <__floatunsidf+0x9c>
   10e30:	0010fd40 	call	10fd4 <__clzsi2>
   10e34:	01010784 	movi	r4,1054
   10e38:	2089c83a 	sub	r4,r4,r2
   10e3c:	01810cc4 	movi	r6,1075
   10e40:	310dc83a 	sub	r6,r6,r4
   10e44:	00c007c4 	movi	r3,31
   10e48:	1980120e 	bge	r3,r6,10e94 <__floatunsidf+0x78>
   10e4c:	00c104c4 	movi	r3,1043
   10e50:	1907c83a 	sub	r3,r3,r4
   10e54:	80ca983a 	sll	r5,r16,r3
   10e58:	00800434 	movhi	r2,16
   10e5c:	10bfffc4 	addi	r2,r2,-1
   10e60:	2101ffcc 	andi	r4,r4,2047
   10e64:	0021883a 	mov	r16,zero
   10e68:	288a703a 	and	r5,r5,r2
   10e6c:	2008953a 	slli	r4,r4,20
   10e70:	00c00434 	movhi	r3,16
   10e74:	18ffffc4 	addi	r3,r3,-1
   10e78:	28c6703a 	and	r3,r5,r3
   10e7c:	8005883a 	mov	r2,r16
   10e80:	1906b03a 	or	r3,r3,r4
   10e84:	dfc00117 	ldw	ra,4(sp)
   10e88:	dc000017 	ldw	r16,0(sp)
   10e8c:	dec00204 	addi	sp,sp,8
   10e90:	f800283a 	ret
   10e94:	00c002c4 	movi	r3,11
   10e98:	188bc83a 	sub	r5,r3,r2
   10e9c:	814ad83a 	srl	r5,r16,r5
   10ea0:	00c00434 	movhi	r3,16
   10ea4:	18ffffc4 	addi	r3,r3,-1
   10ea8:	81a0983a 	sll	r16,r16,r6
   10eac:	2101ffcc 	andi	r4,r4,2047
   10eb0:	28ca703a 	and	r5,r5,r3
   10eb4:	003fed06 	br	10e6c <_gp+0xfffef900>
   10eb8:	0009883a 	mov	r4,zero
   10ebc:	000b883a 	mov	r5,zero
   10ec0:	003fea06 	br	10e6c <_gp+0xfffef900>

00010ec4 <__extendsfdf2>:
   10ec4:	200ad5fa 	srli	r5,r4,23
   10ec8:	defffd04 	addi	sp,sp,-12
   10ecc:	dc400115 	stw	r17,4(sp)
   10ed0:	29403fcc 	andi	r5,r5,255
   10ed4:	29800044 	addi	r6,r5,1
   10ed8:	04402034 	movhi	r17,128
   10edc:	dc000015 	stw	r16,0(sp)
   10ee0:	8c7fffc4 	addi	r17,r17,-1
   10ee4:	dfc00215 	stw	ra,8(sp)
   10ee8:	31803fcc 	andi	r6,r6,255
   10eec:	00800044 	movi	r2,1
   10ef0:	8922703a 	and	r17,r17,r4
   10ef4:	2020d7fa 	srli	r16,r4,31
   10ef8:	1180110e 	bge	r2,r6,10f40 <__extendsfdf2+0x7c>
   10efc:	880cd0fa 	srli	r6,r17,3
   10f00:	8822977a 	slli	r17,r17,29
   10f04:	2940e004 	addi	r5,r5,896
   10f08:	2941ffcc 	andi	r5,r5,2047
   10f0c:	2804953a 	slli	r2,r5,20
   10f10:	01400434 	movhi	r5,16
   10f14:	800697fa 	slli	r3,r16,31
   10f18:	297fffc4 	addi	r5,r5,-1
   10f1c:	314a703a 	and	r5,r6,r5
   10f20:	288ab03a 	or	r5,r5,r2
   10f24:	28c6b03a 	or	r3,r5,r3
   10f28:	8805883a 	mov	r2,r17
   10f2c:	dfc00217 	ldw	ra,8(sp)
   10f30:	dc400117 	ldw	r17,4(sp)
   10f34:	dc000017 	ldw	r16,0(sp)
   10f38:	dec00304 	addi	sp,sp,12
   10f3c:	f800283a 	ret
   10f40:	2800111e 	bne	r5,zero,10f88 <__extendsfdf2+0xc4>
   10f44:	88001c26 	beq	r17,zero,10fb8 <__extendsfdf2+0xf4>
   10f48:	8809883a 	mov	r4,r17
   10f4c:	0010fd40 	call	10fd4 <__clzsi2>
   10f50:	00c00284 	movi	r3,10
   10f54:	18801b16 	blt	r3,r2,10fc4 <__extendsfdf2+0x100>
   10f58:	018002c4 	movi	r6,11
   10f5c:	308dc83a 	sub	r6,r6,r2
   10f60:	11000544 	addi	r4,r2,21
   10f64:	8986d83a 	srl	r3,r17,r6
   10f68:	8922983a 	sll	r17,r17,r4
   10f6c:	0180e244 	movi	r6,905
   10f70:	01400434 	movhi	r5,16
   10f74:	3085c83a 	sub	r2,r6,r2
   10f78:	297fffc4 	addi	r5,r5,-1
   10f7c:	194c703a 	and	r6,r3,r5
   10f80:	1141ffcc 	andi	r5,r2,2047
   10f84:	003fe006 	br	10f08 <_gp+0xfffef99c>
   10f88:	88000826 	beq	r17,zero,10fac <__extendsfdf2+0xe8>
   10f8c:	880cd0fa 	srli	r6,r17,3
   10f90:	00800434 	movhi	r2,16
   10f94:	10bfffc4 	addi	r2,r2,-1
   10f98:	31800234 	orhi	r6,r6,8
   10f9c:	8822977a 	slli	r17,r17,29
   10fa0:	308c703a 	and	r6,r6,r2
   10fa4:	0141ffc4 	movi	r5,2047
   10fa8:	003fd706 	br	10f08 <_gp+0xfffef99c>
   10fac:	0141ffc4 	movi	r5,2047
   10fb0:	000d883a 	mov	r6,zero
   10fb4:	003fd406 	br	10f08 <_gp+0xfffef99c>
   10fb8:	000b883a 	mov	r5,zero
   10fbc:	000d883a 	mov	r6,zero
   10fc0:	003fd106 	br	10f08 <_gp+0xfffef99c>
   10fc4:	11bffd44 	addi	r6,r2,-11
   10fc8:	8986983a 	sll	r3,r17,r6
   10fcc:	0023883a 	mov	r17,zero
   10fd0:	003fe606 	br	10f6c <_gp+0xfffefa00>

00010fd4 <__clzsi2>:
   10fd4:	00bfffd4 	movui	r2,65535
   10fd8:	11000536 	bltu	r2,r4,10ff0 <__clzsi2+0x1c>
   10fdc:	00803fc4 	movi	r2,255
   10fe0:	11000f36 	bltu	r2,r4,11020 <__clzsi2+0x4c>
   10fe4:	00800804 	movi	r2,32
   10fe8:	0007883a 	mov	r3,zero
   10fec:	00000506 	br	11004 <__clzsi2+0x30>
   10ff0:	00804034 	movhi	r2,256
   10ff4:	10bfffc4 	addi	r2,r2,-1
   10ff8:	11000c2e 	bgeu	r2,r4,1102c <__clzsi2+0x58>
   10ffc:	00800204 	movi	r2,8
   11000:	00c00604 	movi	r3,24
   11004:	20c8d83a 	srl	r4,r4,r3
   11008:	00c000b4 	movhi	r3,2
   1100c:	18e41404 	addi	r3,r3,-28592
   11010:	1909883a 	add	r4,r3,r4
   11014:	20c00003 	ldbu	r3,0(r4)
   11018:	10c5c83a 	sub	r2,r2,r3
   1101c:	f800283a 	ret
   11020:	00800604 	movi	r2,24
   11024:	00c00204 	movi	r3,8
   11028:	003ff606 	br	11004 <_gp+0xfffefa98>
   1102c:	00800404 	movi	r2,16
   11030:	1007883a 	mov	r3,r2
   11034:	003ff306 	br	11004 <_gp+0xfffefa98>

00011038 <__mulsi3>:
   11038:	0005883a 	mov	r2,zero
   1103c:	20000726 	beq	r4,zero,1105c <__mulsi3+0x24>
   11040:	20c0004c 	andi	r3,r4,1
   11044:	2008d07a 	srli	r4,r4,1
   11048:	18000126 	beq	r3,zero,11050 <__mulsi3+0x18>
   1104c:	1145883a 	add	r2,r2,r5
   11050:	294b883a 	add	r5,r5,r5
   11054:	203ffa1e 	bne	r4,zero,11040 <_gp+0xfffefad4>
   11058:	f800283a 	ret
   1105c:	f800283a 	ret

00011060 <fcvt>:
   11060:	defffd04 	addi	sp,sp,-12
   11064:	d8800317 	ldw	r2,12(sp)
   11068:	d8000115 	stw	zero,4(sp)
   1106c:	dfc00215 	stw	ra,8(sp)
   11070:	d8800015 	stw	r2,0(sp)
   11074:	0011b000 	call	11b00 <fcvtbuf>
   11078:	dfc00217 	ldw	ra,8(sp)
   1107c:	dec00304 	addi	sp,sp,12
   11080:	f800283a 	ret

00011084 <fcvtf>:
   11084:	defffb04 	addi	sp,sp,-20
   11088:	dfc00415 	stw	ra,16(sp)
   1108c:	dc800315 	stw	r18,12(sp)
   11090:	dc400215 	stw	r17,8(sp)
   11094:	3825883a 	mov	r18,r7
   11098:	3023883a 	mov	r17,r6
   1109c:	dc000115 	stw	r16,4(sp)
   110a0:	2821883a 	mov	r16,r5
   110a4:	0010ec40 	call	10ec4 <__extendsfdf2>
   110a8:	880f883a 	mov	r7,r17
   110ac:	dc800015 	stw	r18,0(sp)
   110b0:	800d883a 	mov	r6,r16
   110b4:	1009883a 	mov	r4,r2
   110b8:	180b883a 	mov	r5,r3
   110bc:	00110600 	call	11060 <fcvt>
   110c0:	dfc00417 	ldw	ra,16(sp)
   110c4:	dc800317 	ldw	r18,12(sp)
   110c8:	dc400217 	ldw	r17,8(sp)
   110cc:	dc000117 	ldw	r16,4(sp)
   110d0:	dec00504 	addi	sp,sp,20
   110d4:	f800283a 	ret

000110d8 <ecvt>:
   110d8:	defffd04 	addi	sp,sp,-12
   110dc:	d8800317 	ldw	r2,12(sp)
   110e0:	d8000115 	stw	zero,4(sp)
   110e4:	dfc00215 	stw	ra,8(sp)
   110e8:	d8800015 	stw	r2,0(sp)
   110ec:	0011c6c0 	call	11c6c <ecvtbuf>
   110f0:	dfc00217 	ldw	ra,8(sp)
   110f4:	dec00304 	addi	sp,sp,12
   110f8:	f800283a 	ret

000110fc <ecvtf>:
   110fc:	defffb04 	addi	sp,sp,-20
   11100:	dfc00415 	stw	ra,16(sp)
   11104:	dc800315 	stw	r18,12(sp)
   11108:	dc400215 	stw	r17,8(sp)
   1110c:	3825883a 	mov	r18,r7
   11110:	3023883a 	mov	r17,r6
   11114:	dc000115 	stw	r16,4(sp)
   11118:	2821883a 	mov	r16,r5
   1111c:	0010ec40 	call	10ec4 <__extendsfdf2>
   11120:	880f883a 	mov	r7,r17
   11124:	dc800015 	stw	r18,0(sp)
   11128:	800d883a 	mov	r6,r16
   1112c:	1009883a 	mov	r4,r2
   11130:	180b883a 	mov	r5,r3
   11134:	00110d80 	call	110d8 <ecvt>
   11138:	dfc00417 	ldw	ra,16(sp)
   1113c:	dc800317 	ldw	r18,12(sp)
   11140:	dc400217 	ldw	r17,8(sp)
   11144:	dc000117 	ldw	r16,4(sp)
   11148:	dec00504 	addi	sp,sp,20
   1114c:	f800283a 	ret

00011150 <gcvt>:
   11150:	defff804 	addi	sp,sp,-32
   11154:	dc400415 	stw	r17,16(sp)
   11158:	dc000315 	stw	r16,12(sp)
   1115c:	3023883a 	mov	r17,r6
   11160:	3821883a 	mov	r16,r7
   11164:	000d883a 	mov	r6,zero
   11168:	000f883a 	mov	r7,zero
   1116c:	dcc00615 	stw	r19,24(sp)
   11170:	dc800515 	stw	r18,20(sp)
   11174:	dfc00715 	stw	ra,28(sp)
   11178:	2027883a 	mov	r19,r4
   1117c:	2825883a 	mov	r18,r5
   11180:	00162ec0 	call	162ec <__ledf2>
   11184:	1000050e 	bge	r2,zero,1119c <gcvt+0x4c>
   11188:	00800b44 	movi	r2,45
   1118c:	80800005 	stb	r2,0(r16)
   11190:	8c7fffc4 	addi	r17,r17,-1
   11194:	80800044 	addi	r2,r16,1
   11198:	00000106 	br	111a0 <gcvt+0x50>
   1119c:	8005883a 	mov	r2,r16
   111a0:	d8800015 	stw	r2,0(sp)
   111a4:	00c019c4 	movi	r3,103
   111a8:	008000b4 	movhi	r2,2
   111ac:	d8000215 	stw	zero,8(sp)
   111b0:	d8c00115 	stw	r3,4(sp)
   111b4:	10a55c04 	addi	r2,r2,-27280
   111b8:	11000017 	ldw	r4,0(r2)
   111bc:	880f883a 	mov	r7,r17
   111c0:	980b883a 	mov	r5,r19
   111c4:	900d883a 	mov	r6,r18
   111c8:	0011d740 	call	11d74 <_gcvt>
   111cc:	10000126 	beq	r2,zero,111d4 <gcvt+0x84>
   111d0:	8005883a 	mov	r2,r16
   111d4:	dfc00717 	ldw	ra,28(sp)
   111d8:	dcc00617 	ldw	r19,24(sp)
   111dc:	dc800517 	ldw	r18,20(sp)
   111e0:	dc400417 	ldw	r17,16(sp)
   111e4:	dc000317 	ldw	r16,12(sp)
   111e8:	dec00804 	addi	sp,sp,32
   111ec:	f800283a 	ret

000111f0 <gcvtf>:
   111f0:	defffd04 	addi	sp,sp,-12
   111f4:	dc400115 	stw	r17,4(sp)
   111f8:	dc000015 	stw	r16,0(sp)
   111fc:	3023883a 	mov	r17,r6
   11200:	2821883a 	mov	r16,r5
   11204:	dfc00215 	stw	ra,8(sp)
   11208:	0010ec40 	call	10ec4 <__extendsfdf2>
   1120c:	880f883a 	mov	r7,r17
   11210:	800d883a 	mov	r6,r16
   11214:	1009883a 	mov	r4,r2
   11218:	180b883a 	mov	r5,r3
   1121c:	dfc00217 	ldw	ra,8(sp)
   11220:	dc400117 	ldw	r17,4(sp)
   11224:	dc000017 	ldw	r16,0(sp)
   11228:	dec00304 	addi	sp,sp,12
   1122c:	00111501 	jmpi	11150 <gcvt>

00011230 <_printf_r>:
   11230:	defffd04 	addi	sp,sp,-12
   11234:	dfc00015 	stw	ra,0(sp)
   11238:	d9800115 	stw	r6,4(sp)
   1123c:	d9c00215 	stw	r7,8(sp)
   11240:	20c00217 	ldw	r3,8(r4)
   11244:	01800074 	movhi	r6,1
   11248:	3188b604 	addi	r6,r6,8920
   1124c:	19800115 	stw	r6,4(r3)
   11250:	280d883a 	mov	r6,r5
   11254:	21400217 	ldw	r5,8(r4)
   11258:	d9c00104 	addi	r7,sp,4
   1125c:	00113d40 	call	113d4 <___vfprintf_internal_r>
   11260:	dfc00017 	ldw	ra,0(sp)
   11264:	dec00304 	addi	sp,sp,12
   11268:	f800283a 	ret

0001126c <printf>:
   1126c:	defffc04 	addi	sp,sp,-16
   11270:	dfc00015 	stw	ra,0(sp)
   11274:	d9400115 	stw	r5,4(sp)
   11278:	d9800215 	stw	r6,8(sp)
   1127c:	d9c00315 	stw	r7,12(sp)
   11280:	008000b4 	movhi	r2,2
   11284:	10a55c04 	addi	r2,r2,-27280
   11288:	10800017 	ldw	r2,0(r2)
   1128c:	01400074 	movhi	r5,1
   11290:	2948b604 	addi	r5,r5,8920
   11294:	10c00217 	ldw	r3,8(r2)
   11298:	d9800104 	addi	r6,sp,4
   1129c:	19400115 	stw	r5,4(r3)
   112a0:	200b883a 	mov	r5,r4
   112a4:	11000217 	ldw	r4,8(r2)
   112a8:	00119000 	call	11900 <__vfprintf_internal>
   112ac:	dfc00017 	ldw	ra,0(sp)
   112b0:	dec00404 	addi	sp,sp,16
   112b4:	f800283a 	ret

000112b8 <_puts_r>:
   112b8:	defffd04 	addi	sp,sp,-12
   112bc:	dc000015 	stw	r16,0(sp)
   112c0:	2021883a 	mov	r16,r4
   112c4:	2809883a 	mov	r4,r5
   112c8:	dfc00215 	stw	ra,8(sp)
   112cc:	dc400115 	stw	r17,4(sp)
   112d0:	2823883a 	mov	r17,r5
   112d4:	001134c0 	call	1134c <strlen>
   112d8:	81400217 	ldw	r5,8(r16)
   112dc:	01000074 	movhi	r4,1
   112e0:	2108b604 	addi	r4,r4,8920
   112e4:	29000115 	stw	r4,4(r5)
   112e8:	100f883a 	mov	r7,r2
   112ec:	880d883a 	mov	r6,r17
   112f0:	8009883a 	mov	r4,r16
   112f4:	00122d80 	call	122d8 <__sfvwrite_small_dev>
   112f8:	00ffffc4 	movi	r3,-1
   112fc:	10c00926 	beq	r2,r3,11324 <_puts_r+0x6c>
   11300:	81400217 	ldw	r5,8(r16)
   11304:	018000b4 	movhi	r6,2
   11308:	01c00044 	movi	r7,1
   1130c:	28800117 	ldw	r2,4(r5)
   11310:	31a45404 	addi	r6,r6,-28336
   11314:	8009883a 	mov	r4,r16
   11318:	103ee83a 	callr	r2
   1131c:	10bfffe0 	cmpeqi	r2,r2,-1
   11320:	0085c83a 	sub	r2,zero,r2
   11324:	dfc00217 	ldw	ra,8(sp)
   11328:	dc400117 	ldw	r17,4(sp)
   1132c:	dc000017 	ldw	r16,0(sp)
   11330:	dec00304 	addi	sp,sp,12
   11334:	f800283a 	ret

00011338 <puts>:
   11338:	008000b4 	movhi	r2,2
   1133c:	10a55c04 	addi	r2,r2,-27280
   11340:	200b883a 	mov	r5,r4
   11344:	11000017 	ldw	r4,0(r2)
   11348:	00112b81 	jmpi	112b8 <_puts_r>

0001134c <strlen>:
   1134c:	2005883a 	mov	r2,r4
   11350:	10c00007 	ldb	r3,0(r2)
   11354:	18000226 	beq	r3,zero,11360 <strlen+0x14>
   11358:	10800044 	addi	r2,r2,1
   1135c:	003ffc06 	br	11350 <_gp+0xfffefde4>
   11360:	1105c83a 	sub	r2,r2,r4
   11364:	f800283a 	ret

00011368 <print_repeat>:
   11368:	defffb04 	addi	sp,sp,-20
   1136c:	dc800315 	stw	r18,12(sp)
   11370:	dc400215 	stw	r17,8(sp)
   11374:	dc000115 	stw	r16,4(sp)
   11378:	dfc00415 	stw	ra,16(sp)
   1137c:	2025883a 	mov	r18,r4
   11380:	2823883a 	mov	r17,r5
   11384:	d9800005 	stb	r6,0(sp)
   11388:	3821883a 	mov	r16,r7
   1138c:	04000a0e 	bge	zero,r16,113b8 <print_repeat+0x50>
   11390:	88800117 	ldw	r2,4(r17)
   11394:	01c00044 	movi	r7,1
   11398:	d80d883a 	mov	r6,sp
   1139c:	880b883a 	mov	r5,r17
   113a0:	9009883a 	mov	r4,r18
   113a4:	103ee83a 	callr	r2
   113a8:	843fffc4 	addi	r16,r16,-1
   113ac:	103ff726 	beq	r2,zero,1138c <_gp+0xfffefe20>
   113b0:	00bfffc4 	movi	r2,-1
   113b4:	00000106 	br	113bc <print_repeat+0x54>
   113b8:	0005883a 	mov	r2,zero
   113bc:	dfc00417 	ldw	ra,16(sp)
   113c0:	dc800317 	ldw	r18,12(sp)
   113c4:	dc400217 	ldw	r17,8(sp)
   113c8:	dc000117 	ldw	r16,4(sp)
   113cc:	dec00504 	addi	sp,sp,20
   113d0:	f800283a 	ret

000113d4 <___vfprintf_internal_r>:
   113d4:	deffe504 	addi	sp,sp,-108
   113d8:	d8c00804 	addi	r3,sp,32
   113dc:	ddc01815 	stw	r23,96(sp)
   113e0:	dd801715 	stw	r22,92(sp)
   113e4:	dd401615 	stw	r21,88(sp)
   113e8:	dd001515 	stw	r20,84(sp)
   113ec:	dcc01415 	stw	r19,80(sp)
   113f0:	dc801315 	stw	r18,76(sp)
   113f4:	dc401215 	stw	r17,72(sp)
   113f8:	dc001115 	stw	r16,68(sp)
   113fc:	dfc01a15 	stw	ra,104(sp)
   11400:	df001915 	stw	fp,100(sp)
   11404:	2029883a 	mov	r20,r4
   11408:	2823883a 	mov	r17,r5
   1140c:	382d883a 	mov	r22,r7
   11410:	d9800f15 	stw	r6,60(sp)
   11414:	0021883a 	mov	r16,zero
   11418:	d8000e15 	stw	zero,56(sp)
   1141c:	d8000a15 	stw	zero,40(sp)
   11420:	002b883a 	mov	r21,zero
   11424:	0027883a 	mov	r19,zero
   11428:	0025883a 	mov	r18,zero
   1142c:	d8000c15 	stw	zero,48(sp)
   11430:	d8000b15 	stw	zero,44(sp)
   11434:	002f883a 	mov	r23,zero
   11438:	d8c00915 	stw	r3,36(sp)
   1143c:	d8c00f17 	ldw	r3,60(sp)
   11440:	19000003 	ldbu	r4,0(r3)
   11444:	20803fcc 	andi	r2,r4,255
   11448:	1080201c 	xori	r2,r2,128
   1144c:	10bfe004 	addi	r2,r2,-128
   11450:	10011e26 	beq	r2,zero,118cc <___vfprintf_internal_r+0x4f8>
   11454:	00c00044 	movi	r3,1
   11458:	b8c01426 	beq	r23,r3,114ac <___vfprintf_internal_r+0xd8>
   1145c:	1dc00216 	blt	r3,r23,11468 <___vfprintf_internal_r+0x94>
   11460:	b8000626 	beq	r23,zero,1147c <___vfprintf_internal_r+0xa8>
   11464:	00011506 	br	118bc <___vfprintf_internal_r+0x4e8>
   11468:	01400084 	movi	r5,2
   1146c:	b9401d26 	beq	r23,r5,114e4 <___vfprintf_internal_r+0x110>
   11470:	014000c4 	movi	r5,3
   11474:	b9402b26 	beq	r23,r5,11524 <___vfprintf_internal_r+0x150>
   11478:	00011006 	br	118bc <___vfprintf_internal_r+0x4e8>
   1147c:	01400944 	movi	r5,37
   11480:	1140fc26 	beq	r2,r5,11874 <___vfprintf_internal_r+0x4a0>
   11484:	88800117 	ldw	r2,4(r17)
   11488:	d9000005 	stb	r4,0(sp)
   1148c:	01c00044 	movi	r7,1
   11490:	d80d883a 	mov	r6,sp
   11494:	880b883a 	mov	r5,r17
   11498:	a009883a 	mov	r4,r20
   1149c:	103ee83a 	callr	r2
   114a0:	1000d81e 	bne	r2,zero,11804 <___vfprintf_internal_r+0x430>
   114a4:	84000044 	addi	r16,r16,1
   114a8:	00010406 	br	118bc <___vfprintf_internal_r+0x4e8>
   114ac:	01400c04 	movi	r5,48
   114b0:	1140fa26 	beq	r2,r5,1189c <___vfprintf_internal_r+0x4c8>
   114b4:	01400944 	movi	r5,37
   114b8:	11400a1e 	bne	r2,r5,114e4 <___vfprintf_internal_r+0x110>
   114bc:	d8800005 	stb	r2,0(sp)
   114c0:	88800117 	ldw	r2,4(r17)
   114c4:	b80f883a 	mov	r7,r23
   114c8:	d80d883a 	mov	r6,sp
   114cc:	880b883a 	mov	r5,r17
   114d0:	a009883a 	mov	r4,r20
   114d4:	103ee83a 	callr	r2
   114d8:	1000ca1e 	bne	r2,zero,11804 <___vfprintf_internal_r+0x430>
   114dc:	84000044 	addi	r16,r16,1
   114e0:	0000f506 	br	118b8 <___vfprintf_internal_r+0x4e4>
   114e4:	25fff404 	addi	r23,r4,-48
   114e8:	bdc03fcc 	andi	r23,r23,255
   114ec:	00c00244 	movi	r3,9
   114f0:	1dc00936 	bltu	r3,r23,11518 <___vfprintf_internal_r+0x144>
   114f4:	00bfffc4 	movi	r2,-1
   114f8:	90800426 	beq	r18,r2,1150c <___vfprintf_internal_r+0x138>
   114fc:	01400284 	movi	r5,10
   11500:	9009883a 	mov	r4,r18
   11504:	00110380 	call	11038 <__mulsi3>
   11508:	00000106 	br	11510 <___vfprintf_internal_r+0x13c>
   1150c:	0005883a 	mov	r2,zero
   11510:	b8a5883a 	add	r18,r23,r2
   11514:	0000e206 	br	118a0 <___vfprintf_internal_r+0x4cc>
   11518:	01400b84 	movi	r5,46
   1151c:	1140e426 	beq	r2,r5,118b0 <___vfprintf_internal_r+0x4dc>
   11520:	05c00084 	movi	r23,2
   11524:	213ff404 	addi	r4,r4,-48
   11528:	27003fcc 	andi	fp,r4,255
   1152c:	00c00244 	movi	r3,9
   11530:	1f000936 	bltu	r3,fp,11558 <___vfprintf_internal_r+0x184>
   11534:	00bfffc4 	movi	r2,-1
   11538:	98800426 	beq	r19,r2,1154c <___vfprintf_internal_r+0x178>
   1153c:	01400284 	movi	r5,10
   11540:	9809883a 	mov	r4,r19
   11544:	00110380 	call	11038 <__mulsi3>
   11548:	00000106 	br	11550 <___vfprintf_internal_r+0x17c>
   1154c:	0005883a 	mov	r2,zero
   11550:	e0a7883a 	add	r19,fp,r2
   11554:	0000d906 	br	118bc <___vfprintf_internal_r+0x4e8>
   11558:	00c01b04 	movi	r3,108
   1155c:	10c0d226 	beq	r2,r3,118a8 <___vfprintf_internal_r+0x4d4>
   11560:	013fffc4 	movi	r4,-1
   11564:	99000226 	beq	r19,r4,11570 <___vfprintf_internal_r+0x19c>
   11568:	d8000b15 	stw	zero,44(sp)
   1156c:	00000106 	br	11574 <___vfprintf_internal_r+0x1a0>
   11570:	04c00044 	movi	r19,1
   11574:	01001a44 	movi	r4,105
   11578:	11001626 	beq	r2,r4,115d4 <___vfprintf_internal_r+0x200>
   1157c:	20800916 	blt	r4,r2,115a4 <___vfprintf_internal_r+0x1d0>
   11580:	010018c4 	movi	r4,99
   11584:	11008826 	beq	r2,r4,117a8 <___vfprintf_internal_r+0x3d4>
   11588:	01001904 	movi	r4,100
   1158c:	11001126 	beq	r2,r4,115d4 <___vfprintf_internal_r+0x200>
   11590:	01001604 	movi	r4,88
   11594:	1100c81e 	bne	r2,r4,118b8 <___vfprintf_internal_r+0x4e4>
   11598:	00c00044 	movi	r3,1
   1159c:	d8c00e15 	stw	r3,56(sp)
   115a0:	00001506 	br	115f8 <___vfprintf_internal_r+0x224>
   115a4:	01001cc4 	movi	r4,115
   115a8:	11009826 	beq	r2,r4,1180c <___vfprintf_internal_r+0x438>
   115ac:	20800416 	blt	r4,r2,115c0 <___vfprintf_internal_r+0x1ec>
   115b0:	01001bc4 	movi	r4,111
   115b4:	1100c01e 	bne	r2,r4,118b8 <___vfprintf_internal_r+0x4e4>
   115b8:	05400204 	movi	r21,8
   115bc:	00000f06 	br	115fc <___vfprintf_internal_r+0x228>
   115c0:	01001d44 	movi	r4,117
   115c4:	11000d26 	beq	r2,r4,115fc <___vfprintf_internal_r+0x228>
   115c8:	01001e04 	movi	r4,120
   115cc:	11000a26 	beq	r2,r4,115f8 <___vfprintf_internal_r+0x224>
   115d0:	0000b906 	br	118b8 <___vfprintf_internal_r+0x4e4>
   115d4:	d8c00a17 	ldw	r3,40(sp)
   115d8:	b7000104 	addi	fp,r22,4
   115dc:	18000726 	beq	r3,zero,115fc <___vfprintf_internal_r+0x228>
   115e0:	df000d15 	stw	fp,52(sp)
   115e4:	b5c00017 	ldw	r23,0(r22)
   115e8:	b800080e 	bge	r23,zero,1160c <___vfprintf_internal_r+0x238>
   115ec:	05efc83a 	sub	r23,zero,r23
   115f0:	02400044 	movi	r9,1
   115f4:	00000606 	br	11610 <___vfprintf_internal_r+0x23c>
   115f8:	05400404 	movi	r21,16
   115fc:	b0c00104 	addi	r3,r22,4
   11600:	d8c00d15 	stw	r3,52(sp)
   11604:	b5c00017 	ldw	r23,0(r22)
   11608:	d8000a15 	stw	zero,40(sp)
   1160c:	0013883a 	mov	r9,zero
   11610:	d839883a 	mov	fp,sp
   11614:	b8001726 	beq	r23,zero,11674 <___vfprintf_internal_r+0x2a0>
   11618:	a80b883a 	mov	r5,r21
   1161c:	b809883a 	mov	r4,r23
   11620:	da401015 	stw	r9,64(sp)
   11624:	0014e500 	call	14e50 <__udivsi3>
   11628:	a80b883a 	mov	r5,r21
   1162c:	1009883a 	mov	r4,r2
   11630:	102d883a 	mov	r22,r2
   11634:	00110380 	call	11038 <__mulsi3>
   11638:	b885c83a 	sub	r2,r23,r2
   1163c:	00c00244 	movi	r3,9
   11640:	da401017 	ldw	r9,64(sp)
   11644:	18800216 	blt	r3,r2,11650 <___vfprintf_internal_r+0x27c>
   11648:	10800c04 	addi	r2,r2,48
   1164c:	00000506 	br	11664 <___vfprintf_internal_r+0x290>
   11650:	d8c00e17 	ldw	r3,56(sp)
   11654:	18000226 	beq	r3,zero,11660 <___vfprintf_internal_r+0x28c>
   11658:	10800dc4 	addi	r2,r2,55
   1165c:	00000106 	br	11664 <___vfprintf_internal_r+0x290>
   11660:	108015c4 	addi	r2,r2,87
   11664:	e0800005 	stb	r2,0(fp)
   11668:	b02f883a 	mov	r23,r22
   1166c:	e7000044 	addi	fp,fp,1
   11670:	003fe806 	br	11614 <_gp+0xffff00a8>
   11674:	e6efc83a 	sub	r23,fp,sp
   11678:	9dc5c83a 	sub	r2,r19,r23
   1167c:	0080090e 	bge	zero,r2,116a4 <___vfprintf_internal_r+0x2d0>
   11680:	e085883a 	add	r2,fp,r2
   11684:	01400c04 	movi	r5,48
   11688:	d8c00917 	ldw	r3,36(sp)
   1168c:	e009883a 	mov	r4,fp
   11690:	e0c0032e 	bgeu	fp,r3,116a0 <___vfprintf_internal_r+0x2cc>
   11694:	e7000044 	addi	fp,fp,1
   11698:	21400005 	stb	r5,0(r4)
   1169c:	e0bffa1e 	bne	fp,r2,11688 <_gp+0xffff011c>
   116a0:	e6efc83a 	sub	r23,fp,sp
   116a4:	d8c00b17 	ldw	r3,44(sp)
   116a8:	4dd1883a 	add	r8,r9,r23
   116ac:	922dc83a 	sub	r22,r18,r8
   116b0:	18001626 	beq	r3,zero,1170c <___vfprintf_internal_r+0x338>
   116b4:	48000a26 	beq	r9,zero,116e0 <___vfprintf_internal_r+0x30c>
   116b8:	00800b44 	movi	r2,45
   116bc:	d8800805 	stb	r2,32(sp)
   116c0:	88800117 	ldw	r2,4(r17)
   116c4:	01c00044 	movi	r7,1
   116c8:	d9800804 	addi	r6,sp,32
   116cc:	880b883a 	mov	r5,r17
   116d0:	a009883a 	mov	r4,r20
   116d4:	103ee83a 	callr	r2
   116d8:	10004a1e 	bne	r2,zero,11804 <___vfprintf_internal_r+0x430>
   116dc:	84000044 	addi	r16,r16,1
   116e0:	0580070e 	bge	zero,r22,11700 <___vfprintf_internal_r+0x32c>
   116e4:	b00f883a 	mov	r7,r22
   116e8:	01800c04 	movi	r6,48
   116ec:	880b883a 	mov	r5,r17
   116f0:	a009883a 	mov	r4,r20
   116f4:	00113680 	call	11368 <print_repeat>
   116f8:	1000421e 	bne	r2,zero,11804 <___vfprintf_internal_r+0x430>
   116fc:	85a1883a 	add	r16,r16,r22
   11700:	e02d883a 	mov	r22,fp
   11704:	bf2fc83a 	sub	r23,r23,fp
   11708:	00002006 	br	1178c <___vfprintf_internal_r+0x3b8>
   1170c:	0580090e 	bge	zero,r22,11734 <___vfprintf_internal_r+0x360>
   11710:	b00f883a 	mov	r7,r22
   11714:	01800804 	movi	r6,32
   11718:	880b883a 	mov	r5,r17
   1171c:	a009883a 	mov	r4,r20
   11720:	da401015 	stw	r9,64(sp)
   11724:	00113680 	call	11368 <print_repeat>
   11728:	da401017 	ldw	r9,64(sp)
   1172c:	1000351e 	bne	r2,zero,11804 <___vfprintf_internal_r+0x430>
   11730:	85a1883a 	add	r16,r16,r22
   11734:	483ff226 	beq	r9,zero,11700 <_gp+0xffff0194>
   11738:	00800b44 	movi	r2,45
   1173c:	d8800805 	stb	r2,32(sp)
   11740:	88800117 	ldw	r2,4(r17)
   11744:	01c00044 	movi	r7,1
   11748:	d9800804 	addi	r6,sp,32
   1174c:	880b883a 	mov	r5,r17
   11750:	a009883a 	mov	r4,r20
   11754:	103ee83a 	callr	r2
   11758:	10002a1e 	bne	r2,zero,11804 <___vfprintf_internal_r+0x430>
   1175c:	84000044 	addi	r16,r16,1
   11760:	003fe706 	br	11700 <_gp+0xffff0194>
   11764:	b5bfffc4 	addi	r22,r22,-1
   11768:	b0800003 	ldbu	r2,0(r22)
   1176c:	01c00044 	movi	r7,1
   11770:	d9800804 	addi	r6,sp,32
   11774:	d8800805 	stb	r2,32(sp)
   11778:	88800117 	ldw	r2,4(r17)
   1177c:	880b883a 	mov	r5,r17
   11780:	a009883a 	mov	r4,r20
   11784:	103ee83a 	callr	r2
   11788:	10001e1e 	bne	r2,zero,11804 <___vfprintf_internal_r+0x430>
   1178c:	8585c83a 	sub	r2,r16,r22
   11790:	b5c9883a 	add	r4,r22,r23
   11794:	e085883a 	add	r2,fp,r2
   11798:	013ff216 	blt	zero,r4,11764 <_gp+0xffff01f8>
   1179c:	1021883a 	mov	r16,r2
   117a0:	dd800d17 	ldw	r22,52(sp)
   117a4:	00004406 	br	118b8 <___vfprintf_internal_r+0x4e4>
   117a8:	00800044 	movi	r2,1
   117ac:	1480080e 	bge	r2,r18,117d0 <___vfprintf_internal_r+0x3fc>
   117b0:	95ffffc4 	addi	r23,r18,-1
   117b4:	b80f883a 	mov	r7,r23
   117b8:	01800804 	movi	r6,32
   117bc:	880b883a 	mov	r5,r17
   117c0:	a009883a 	mov	r4,r20
   117c4:	00113680 	call	11368 <print_repeat>
   117c8:	10000e1e 	bne	r2,zero,11804 <___vfprintf_internal_r+0x430>
   117cc:	85e1883a 	add	r16,r16,r23
   117d0:	b0800017 	ldw	r2,0(r22)
   117d4:	01c00044 	movi	r7,1
   117d8:	d80d883a 	mov	r6,sp
   117dc:	d8800005 	stb	r2,0(sp)
   117e0:	88800117 	ldw	r2,4(r17)
   117e4:	880b883a 	mov	r5,r17
   117e8:	a009883a 	mov	r4,r20
   117ec:	b5c00104 	addi	r23,r22,4
   117f0:	103ee83a 	callr	r2
   117f4:	1000031e 	bne	r2,zero,11804 <___vfprintf_internal_r+0x430>
   117f8:	84000044 	addi	r16,r16,1
   117fc:	b82d883a 	mov	r22,r23
   11800:	00002d06 	br	118b8 <___vfprintf_internal_r+0x4e4>
   11804:	00bfffc4 	movi	r2,-1
   11808:	00003106 	br	118d0 <___vfprintf_internal_r+0x4fc>
   1180c:	b5c00017 	ldw	r23,0(r22)
   11810:	b7000104 	addi	fp,r22,4
   11814:	b809883a 	mov	r4,r23
   11818:	001134c0 	call	1134c <strlen>
   1181c:	9091c83a 	sub	r8,r18,r2
   11820:	102d883a 	mov	r22,r2
   11824:	0200090e 	bge	zero,r8,1184c <___vfprintf_internal_r+0x478>
   11828:	400f883a 	mov	r7,r8
   1182c:	01800804 	movi	r6,32
   11830:	880b883a 	mov	r5,r17
   11834:	a009883a 	mov	r4,r20
   11838:	da001015 	stw	r8,64(sp)
   1183c:	00113680 	call	11368 <print_repeat>
   11840:	da001017 	ldw	r8,64(sp)
   11844:	103fef1e 	bne	r2,zero,11804 <_gp+0xffff0298>
   11848:	8221883a 	add	r16,r16,r8
   1184c:	88800117 	ldw	r2,4(r17)
   11850:	b00f883a 	mov	r7,r22
   11854:	b80d883a 	mov	r6,r23
   11858:	880b883a 	mov	r5,r17
   1185c:	a009883a 	mov	r4,r20
   11860:	103ee83a 	callr	r2
   11864:	103fe71e 	bne	r2,zero,11804 <_gp+0xffff0298>
   11868:	85a1883a 	add	r16,r16,r22
   1186c:	e02d883a 	mov	r22,fp
   11870:	00001106 	br	118b8 <___vfprintf_internal_r+0x4e4>
   11874:	00c00044 	movi	r3,1
   11878:	04ffffc4 	movi	r19,-1
   1187c:	d8000e15 	stw	zero,56(sp)
   11880:	d8c00a15 	stw	r3,40(sp)
   11884:	05400284 	movi	r21,10
   11888:	9825883a 	mov	r18,r19
   1188c:	d8000c15 	stw	zero,48(sp)
   11890:	d8000b15 	stw	zero,44(sp)
   11894:	182f883a 	mov	r23,r3
   11898:	00000806 	br	118bc <___vfprintf_internal_r+0x4e8>
   1189c:	ddc00b15 	stw	r23,44(sp)
   118a0:	05c00084 	movi	r23,2
   118a4:	00000506 	br	118bc <___vfprintf_internal_r+0x4e8>
   118a8:	00c00044 	movi	r3,1
   118ac:	d8c00c15 	stw	r3,48(sp)
   118b0:	05c000c4 	movi	r23,3
   118b4:	00000106 	br	118bc <___vfprintf_internal_r+0x4e8>
   118b8:	002f883a 	mov	r23,zero
   118bc:	d8c00f17 	ldw	r3,60(sp)
   118c0:	18c00044 	addi	r3,r3,1
   118c4:	d8c00f15 	stw	r3,60(sp)
   118c8:	003edc06 	br	1143c <_gp+0xfffefed0>
   118cc:	8005883a 	mov	r2,r16
   118d0:	dfc01a17 	ldw	ra,104(sp)
   118d4:	df001917 	ldw	fp,100(sp)
   118d8:	ddc01817 	ldw	r23,96(sp)
   118dc:	dd801717 	ldw	r22,92(sp)
   118e0:	dd401617 	ldw	r21,88(sp)
   118e4:	dd001517 	ldw	r20,84(sp)
   118e8:	dcc01417 	ldw	r19,80(sp)
   118ec:	dc801317 	ldw	r18,76(sp)
   118f0:	dc401217 	ldw	r17,72(sp)
   118f4:	dc001117 	ldw	r16,68(sp)
   118f8:	dec01b04 	addi	sp,sp,108
   118fc:	f800283a 	ret

00011900 <__vfprintf_internal>:
   11900:	008000b4 	movhi	r2,2
   11904:	10a55c04 	addi	r2,r2,-27280
   11908:	300f883a 	mov	r7,r6
   1190c:	280d883a 	mov	r6,r5
   11910:	200b883a 	mov	r5,r4
   11914:	11000017 	ldw	r4,0(r2)
   11918:	00113d41 	jmpi	113d4 <___vfprintf_internal_r>

0001191c <print_e>:
   1191c:	defff404 	addi	sp,sp,-48
   11920:	dc000715 	stw	r16,28(sp)
   11924:	d8c00504 	addi	r3,sp,20
   11928:	dc000c17 	ldw	r16,48(sp)
   1192c:	d8c00315 	stw	r3,12(sp)
   11930:	d8c00604 	addi	r3,sp,24
   11934:	d8c00215 	stw	r3,8(sp)
   11938:	d8c00404 	addi	r3,sp,16
   1193c:	3805883a 	mov	r2,r7
   11940:	d8c00115 	stw	r3,4(sp)
   11944:	80c00044 	addi	r3,r16,1
   11948:	dc800915 	stw	r18,36(sp)
   1194c:	d8c00015 	stw	r3,0(sp)
   11950:	2825883a 	mov	r18,r5
   11954:	01c00084 	movi	r7,2
   11958:	300b883a 	mov	r5,r6
   1195c:	100d883a 	mov	r6,r2
   11960:	dc400815 	stw	r17,32(sp)
   11964:	dfc00b15 	stw	ra,44(sp)
   11968:	dcc00a15 	stw	r19,40(sp)
   1196c:	dc400d17 	ldw	r17,52(sp)
   11970:	00138f00 	call	138f0 <_dtoa_r>
   11974:	d8c00417 	ldw	r3,16(sp)
   11978:	0109c3c4 	movi	r4,9999
   1197c:	1900041e 	bne	r3,r4,11990 <print_e+0x74>
   11980:	100b883a 	mov	r5,r2
   11984:	9009883a 	mov	r4,r18
   11988:	001364c0 	call	1364c <strcpy>
   1198c:	00005506 	br	11ae4 <print_e+0x1c8>
   11990:	11800044 	addi	r6,r2,1
   11994:	10800003 	ldbu	r2,0(r2)
   11998:	8827883a 	mov	r19,r17
   1199c:	90800005 	stb	r2,0(r18)
   119a0:	d8800e17 	ldw	r2,56(sp)
   119a4:	1000031e 	bne	r2,zero,119b4 <print_e+0x98>
   119a8:	8000021e 	bne	r16,zero,119b4 <print_e+0x98>
   119ac:	90800044 	addi	r2,r18,1
   119b0:	00000906 	br	119d8 <print_e+0xbc>
   119b4:	01000b84 	movi	r4,46
   119b8:	90800084 	addi	r2,r18,2
   119bc:	91000045 	stb	r4,1(r18)
   119c0:	00000506 	br	119d8 <print_e+0xbc>
   119c4:	04000a0e 	bge	zero,r16,119f0 <print_e+0xd4>
   119c8:	11400005 	stb	r5,0(r2)
   119cc:	31800044 	addi	r6,r6,1
   119d0:	843fffc4 	addi	r16,r16,-1
   119d4:	10800044 	addi	r2,r2,1
   119d8:	31400003 	ldbu	r5,0(r6)
   119dc:	1009883a 	mov	r4,r2
   119e0:	29c03fcc 	andi	r7,r5,255
   119e4:	39c0201c 	xori	r7,r7,128
   119e8:	39ffe004 	addi	r7,r7,-128
   119ec:	383ff51e 	bne	r7,zero,119c4 <_gp+0xffff0458>
   119f0:	8c403fcc 	andi	r17,r17,255
   119f4:	8c40201c 	xori	r17,r17,128
   119f8:	8c7fe004 	addi	r17,r17,-128
   119fc:	014019c4 	movi	r5,103
   11a00:	89400d26 	beq	r17,r5,11a38 <print_e+0x11c>
   11a04:	014011c4 	movi	r5,71
   11a08:	89400d26 	beq	r17,r5,11a40 <print_e+0x124>
   11a0c:	800b883a 	mov	r5,r16
   11a10:	01800c04 	movi	r6,48
   11a14:	0140040e 	bge	zero,r5,11a28 <print_e+0x10c>
   11a18:	11800005 	stb	r6,0(r2)
   11a1c:	297fffc4 	addi	r5,r5,-1
   11a20:	10800044 	addi	r2,r2,1
   11a24:	003ffb06 	br	11a14 <_gp+0xffff04a8>
   11a28:	8000010e 	bge	r16,zero,11a30 <print_e+0x114>
   11a2c:	0021883a 	mov	r16,zero
   11a30:	2409883a 	add	r4,r4,r16
   11a34:	00000306 	br	11a44 <print_e+0x128>
   11a38:	04c01944 	movi	r19,101
   11a3c:	00000106 	br	11a44 <print_e+0x128>
   11a40:	04c01144 	movi	r19,69
   11a44:	18bfffc4 	addi	r2,r3,-1
   11a48:	24800084 	addi	r18,r4,2
   11a4c:	24c00005 	stb	r19,0(r4)
   11a50:	d8800415 	stw	r2,16(sp)
   11a54:	9021883a 	mov	r16,r18
   11a58:	1000050e 	bge	r2,zero,11a70 <print_e+0x154>
   11a5c:	00c00b44 	movi	r3,45
   11a60:	0085c83a 	sub	r2,zero,r2
   11a64:	20c00045 	stb	r3,1(r4)
   11a68:	d8800415 	stw	r2,16(sp)
   11a6c:	00000206 	br	11a78 <print_e+0x15c>
   11a70:	00800ac4 	movi	r2,43
   11a74:	20800045 	stb	r2,1(r4)
   11a78:	dc400417 	ldw	r17,16(sp)
   11a7c:	008018c4 	movi	r2,99
   11a80:	14400b0e 	bge	r2,r17,11ab0 <print_e+0x194>
   11a84:	01401904 	movi	r5,100
   11a88:	8809883a 	mov	r4,r17
   11a8c:	0014d580 	call	14d58 <__divsi3>
   11a90:	10c00c04 	addi	r3,r2,48
   11a94:	90c00005 	stb	r3,0(r18)
   11a98:	017fe704 	movi	r5,-100
   11a9c:	1009883a 	mov	r4,r2
   11aa0:	00110380 	call	11038 <__mulsi3>
   11aa4:	1445883a 	add	r2,r2,r17
   11aa8:	94000044 	addi	r16,r18,1
   11aac:	d8800415 	stw	r2,16(sp)
   11ab0:	dc400417 	ldw	r17,16(sp)
   11ab4:	01400284 	movi	r5,10
   11ab8:	8809883a 	mov	r4,r17
   11abc:	0014d580 	call	14d58 <__divsi3>
   11ac0:	10c00c04 	addi	r3,r2,48
   11ac4:	80c00005 	stb	r3,0(r16)
   11ac8:	017ffd84 	movi	r5,-10
   11acc:	1009883a 	mov	r4,r2
   11ad0:	00110380 	call	11038 <__mulsi3>
   11ad4:	1445883a 	add	r2,r2,r17
   11ad8:	10800c04 	addi	r2,r2,48
   11adc:	80800045 	stb	r2,1(r16)
   11ae0:	80000085 	stb	zero,2(r16)
   11ae4:	dfc00b17 	ldw	ra,44(sp)
   11ae8:	dcc00a17 	ldw	r19,40(sp)
   11aec:	dc800917 	ldw	r18,36(sp)
   11af0:	dc400817 	ldw	r17,32(sp)
   11af4:	dc000717 	ldw	r16,28(sp)
   11af8:	dec00c04 	addi	sp,sp,48
   11afc:	f800283a 	ret

00011b00 <fcvtbuf>:
   11b00:	defff304 	addi	sp,sp,-52
   11b04:	dc000515 	stw	r16,20(sp)
   11b08:	dc000e17 	ldw	r16,56(sp)
   11b0c:	008000b4 	movhi	r2,2
   11b10:	dd800b15 	stw	r22,44(sp)
   11b14:	dd400a15 	stw	r21,40(sp)
   11b18:	dd000915 	stw	r20,36(sp)
   11b1c:	dcc00815 	stw	r19,32(sp)
   11b20:	dc800715 	stw	r18,28(sp)
   11b24:	dc400615 	stw	r17,24(sp)
   11b28:	10a55c04 	addi	r2,r2,-27280
   11b2c:	dfc00c15 	stw	ra,48(sp)
   11b30:	2029883a 	mov	r20,r4
   11b34:	2827883a 	mov	r19,r5
   11b38:	3025883a 	mov	r18,r6
   11b3c:	382b883a 	mov	r21,r7
   11b40:	dd800d17 	ldw	r22,52(sp)
   11b44:	14400017 	ldw	r17,0(r2)
   11b48:	80000c1e 	bne	r16,zero,11b7c <fcvtbuf+0x7c>
   11b4c:	88c00617 	ldw	r3,24(r17)
   11b50:	308008c4 	addi	r2,r6,35
   11b54:	10c00816 	blt	r2,r3,11b78 <fcvtbuf+0x78>
   11b58:	89400717 	ldw	r5,28(r17)
   11b5c:	34000904 	addi	r16,r6,36
   11b60:	800d883a 	mov	r6,r16
   11b64:	8809883a 	mov	r4,r17
   11b68:	00135580 	call	13558 <_realloc_r>
   11b6c:	10003426 	beq	r2,zero,11c40 <fcvtbuf+0x140>
   11b70:	8c000615 	stw	r16,24(r17)
   11b74:	88800715 	stw	r2,28(r17)
   11b78:	8c000717 	ldw	r16,28(r17)
   11b7c:	000d883a 	mov	r6,zero
   11b80:	01cffc34 	movhi	r7,16368
   11b84:	a009883a 	mov	r4,r20
   11b88:	980b883a 	mov	r5,r19
   11b8c:	00162ec0 	call	162ec <__ledf2>
   11b90:	10000d0e 	bge	r2,zero,11bc8 <fcvtbuf+0xc8>
   11b94:	000d883a 	mov	r6,zero
   11b98:	01effc34 	movhi	r7,49136
   11b9c:	a009883a 	mov	r4,r20
   11ba0:	980b883a 	mov	r5,r19
   11ba4:	00162100 	call	16210 <__gedf2>
   11ba8:	0080070e 	bge	zero,r2,11bc8 <fcvtbuf+0xc8>
   11bac:	d8800404 	addi	r2,sp,16
   11bb0:	d8800315 	stw	r2,12(sp)
   11bb4:	dd800215 	stw	r22,8(sp)
   11bb8:	dd400115 	stw	r21,4(sp)
   11bbc:	dc800015 	stw	r18,0(sp)
   11bc0:	01c00084 	movi	r7,2
   11bc4:	00000606 	br	11be0 <fcvtbuf+0xe0>
   11bc8:	d8800404 	addi	r2,sp,16
   11bcc:	d8800315 	stw	r2,12(sp)
   11bd0:	dd800215 	stw	r22,8(sp)
   11bd4:	dd400115 	stw	r21,4(sp)
   11bd8:	dc800015 	stw	r18,0(sp)
   11bdc:	01c000c4 	movi	r7,3
   11be0:	8809883a 	mov	r4,r17
   11be4:	a00b883a 	mov	r5,r20
   11be8:	980d883a 	mov	r6,r19
   11bec:	00138f00 	call	138f0 <_dtoa_r>
   11bf0:	a9000017 	ldw	r4,0(r21)
   11bf4:	8007883a 	mov	r3,r16
   11bf8:	0109c83a 	sub	r4,zero,r4
   11bfc:	2409c83a 	sub	r4,r4,r16
   11c00:	d9400417 	ldw	r5,16(sp)
   11c04:	1140052e 	bgeu	r2,r5,11c1c <fcvtbuf+0x11c>
   11c08:	11400003 	ldbu	r5,0(r2)
   11c0c:	18c00044 	addi	r3,r3,1
   11c10:	10800044 	addi	r2,r2,1
   11c14:	197fffc5 	stb	r5,-1(r3)
   11c18:	003ff906 	br	11c00 <_gp+0xffff0694>
   11c1c:	01400c04 	movi	r5,48
   11c20:	1905883a 	add	r2,r3,r4
   11c24:	1480030e 	bge	r2,r18,11c34 <fcvtbuf+0x134>
   11c28:	19400005 	stb	r5,0(r3)
   11c2c:	18c00044 	addi	r3,r3,1
   11c30:	003ffb06 	br	11c20 <_gp+0xffff06b4>
   11c34:	18000005 	stb	zero,0(r3)
   11c38:	8005883a 	mov	r2,r16
   11c3c:	00000106 	br	11c44 <fcvtbuf+0x144>
   11c40:	0005883a 	mov	r2,zero
   11c44:	dfc00c17 	ldw	ra,48(sp)
   11c48:	dd800b17 	ldw	r22,44(sp)
   11c4c:	dd400a17 	ldw	r21,40(sp)
   11c50:	dd000917 	ldw	r20,36(sp)
   11c54:	dcc00817 	ldw	r19,32(sp)
   11c58:	dc800717 	ldw	r18,28(sp)
   11c5c:	dc400617 	ldw	r17,24(sp)
   11c60:	dc000517 	ldw	r16,20(sp)
   11c64:	dec00d04 	addi	sp,sp,52
   11c68:	f800283a 	ret

00011c6c <ecvtbuf>:
   11c6c:	defff404 	addi	sp,sp,-48
   11c70:	dc000515 	stw	r16,20(sp)
   11c74:	dc000d17 	ldw	r16,52(sp)
   11c78:	008000b4 	movhi	r2,2
   11c7c:	dd400a15 	stw	r21,40(sp)
   11c80:	dd000915 	stw	r20,36(sp)
   11c84:	dcc00815 	stw	r19,32(sp)
   11c88:	dc800715 	stw	r18,28(sp)
   11c8c:	dc400615 	stw	r17,24(sp)
   11c90:	10a55c04 	addi	r2,r2,-27280
   11c94:	dfc00b15 	stw	ra,44(sp)
   11c98:	2029883a 	mov	r20,r4
   11c9c:	2827883a 	mov	r19,r5
   11ca0:	3025883a 	mov	r18,r6
   11ca4:	382b883a 	mov	r21,r7
   11ca8:	14400017 	ldw	r17,0(r2)
   11cac:	80000b1e 	bne	r16,zero,11cdc <ecvtbuf+0x70>
   11cb0:	88800617 	ldw	r2,24(r17)
   11cb4:	30800816 	blt	r6,r2,11cd8 <ecvtbuf+0x6c>
   11cb8:	89400717 	ldw	r5,28(r17)
   11cbc:	34000044 	addi	r16,r6,1
   11cc0:	800d883a 	mov	r6,r16
   11cc4:	8809883a 	mov	r4,r17
   11cc8:	00135580 	call	13558 <_realloc_r>
   11ccc:	10001f26 	beq	r2,zero,11d4c <ecvtbuf+0xe0>
   11cd0:	8c000615 	stw	r16,24(r17)
   11cd4:	88800715 	stw	r2,28(r17)
   11cd8:	8c000717 	ldw	r16,28(r17)
   11cdc:	d8800404 	addi	r2,sp,16
   11ce0:	d8800315 	stw	r2,12(sp)
   11ce4:	d8800c17 	ldw	r2,48(sp)
   11ce8:	dd400115 	stw	r21,4(sp)
   11cec:	dc800015 	stw	r18,0(sp)
   11cf0:	d8800215 	stw	r2,8(sp)
   11cf4:	01c00084 	movi	r7,2
   11cf8:	a00b883a 	mov	r5,r20
   11cfc:	980d883a 	mov	r6,r19
   11d00:	8809883a 	mov	r4,r17
   11d04:	00138f00 	call	138f0 <_dtoa_r>
   11d08:	8007883a 	mov	r3,r16
   11d0c:	d9000417 	ldw	r4,16(sp)
   11d10:	1100052e 	bgeu	r2,r4,11d28 <ecvtbuf+0xbc>
   11d14:	11000003 	ldbu	r4,0(r2)
   11d18:	18c00044 	addi	r3,r3,1
   11d1c:	10800044 	addi	r2,r2,1
   11d20:	193fffc5 	stb	r4,-1(r3)
   11d24:	003ff906 	br	11d0c <_gp+0xffff07a0>
   11d28:	01000c04 	movi	r4,48
   11d2c:	1c05c83a 	sub	r2,r3,r16
   11d30:	1480030e 	bge	r2,r18,11d40 <ecvtbuf+0xd4>
   11d34:	19000005 	stb	r4,0(r3)
   11d38:	18c00044 	addi	r3,r3,1
   11d3c:	003ffb06 	br	11d2c <_gp+0xffff07c0>
   11d40:	18000005 	stb	zero,0(r3)
   11d44:	8005883a 	mov	r2,r16
   11d48:	00000106 	br	11d50 <ecvtbuf+0xe4>
   11d4c:	0005883a 	mov	r2,zero
   11d50:	dfc00b17 	ldw	ra,44(sp)
   11d54:	dd400a17 	ldw	r21,40(sp)
   11d58:	dd000917 	ldw	r20,36(sp)
   11d5c:	dcc00817 	ldw	r19,32(sp)
   11d60:	dc800717 	ldw	r18,28(sp)
   11d64:	dc400617 	ldw	r17,24(sp)
   11d68:	dc000517 	ldw	r16,20(sp)
   11d6c:	dec00c04 	addi	sp,sp,48
   11d70:	f800283a 	ret

00011d74 <_gcvt>:
   11d74:	defff104 	addi	sp,sp,-60
   11d78:	dc400815 	stw	r17,32(sp)
   11d7c:	3023883a 	mov	r17,r6
   11d80:	dd400c15 	stw	r21,48(sp)
   11d84:	dd000b15 	stw	r20,44(sp)
   11d88:	dc800915 	stw	r18,36(sp)
   11d8c:	202b883a 	mov	r21,r4
   11d90:	2825883a 	mov	r18,r5
   11d94:	3829883a 	mov	r20,r7
   11d98:	2809883a 	mov	r4,r5
   11d9c:	000d883a 	mov	r6,zero
   11da0:	000f883a 	mov	r7,zero
   11da4:	880b883a 	mov	r5,r17
   11da8:	dd800d15 	stw	r22,52(sp)
   11dac:	dcc00a15 	stw	r19,40(sp)
   11db0:	dc000715 	stw	r16,28(sp)
   11db4:	dfc00e15 	stw	ra,56(sp)
   11db8:	dc000f17 	ldw	r16,60(sp)
   11dbc:	dd801017 	ldw	r22,64(sp)
   11dc0:	dcc01117 	ldw	r19,68(sp)
   11dc4:	00162ec0 	call	162ec <__ledf2>
   11dc8:	1000010e 	bge	r2,zero,11dd0 <_gcvt+0x5c>
   11dcc:	8c60003c 	xorhi	r17,r17,32768
   11dd0:	000d883a 	mov	r6,zero
   11dd4:	000f883a 	mov	r7,zero
   11dd8:	9009883a 	mov	r4,r18
   11ddc:	880b883a 	mov	r5,r17
   11de0:	00161880 	call	16188 <__eqdf2>
   11de4:	1000041e 	bne	r2,zero,11df8 <_gcvt+0x84>
   11de8:	00800c04 	movi	r2,48
   11dec:	80800005 	stb	r2,0(r16)
   11df0:	80000045 	stb	zero,1(r16)
   11df4:	00009206 	br	12040 <_gcvt+0x2cc>
   11df8:	01bac734 	movhi	r6,60188
   11dfc:	01cfc6b4 	movhi	r7,16154
   11e00:	3190cb44 	addi	r6,r6,17197
   11e04:	39cdb884 	addi	r7,r7,14050
   11e08:	9009883a 	mov	r4,r18
   11e0c:	880b883a 	mov	r5,r17
   11e10:	00162ec0 	call	162ec <__ledf2>
   11e14:	00800d16 	blt	zero,r2,11e4c <_gcvt+0xd8>
   11e18:	b5803fcc 	andi	r22,r22,255
   11e1c:	b580201c 	xori	r22,r22,128
   11e20:	b5bfe004 	addi	r22,r22,-128
   11e24:	a53fffc4 	addi	r20,r20,-1
   11e28:	dcc00215 	stw	r19,8(sp)
   11e2c:	dd800115 	stw	r22,4(sp)
   11e30:	dd000015 	stw	r20,0(sp)
   11e34:	900d883a 	mov	r6,r18
   11e38:	880f883a 	mov	r7,r17
   11e3c:	800b883a 	mov	r5,r16
   11e40:	a809883a 	mov	r4,r21
   11e44:	001191c0 	call	1191c <print_e>
   11e48:	00007d06 	br	12040 <_gcvt+0x2cc>
   11e4c:	a009883a 	mov	r4,r20
   11e50:	00132700 	call	13270 <_mprec_log10>
   11e54:	100d883a 	mov	r6,r2
   11e58:	180f883a 	mov	r7,r3
   11e5c:	9009883a 	mov	r4,r18
   11e60:	880b883a 	mov	r5,r17
   11e64:	00162100 	call	16210 <__gedf2>
   11e68:	103feb0e 	bge	r2,zero,11e18 <_gp+0xffff08ac>
   11e6c:	9009883a 	mov	r4,r18
   11e70:	000d883a 	mov	r6,zero
   11e74:	01cffc34 	movhi	r7,16368
   11e78:	880b883a 	mov	r5,r17
   11e7c:	00162ec0 	call	162ec <__ledf2>
   11e80:	d9000504 	addi	r4,sp,20
   11e84:	d8c00604 	addi	r3,sp,24
   11e88:	1000070e 	bge	r2,zero,11ea8 <_gcvt+0x134>
   11e8c:	d8800404 	addi	r2,sp,16
   11e90:	d8800315 	stw	r2,12(sp)
   11e94:	d9000215 	stw	r4,8(sp)
   11e98:	d8c00115 	stw	r3,4(sp)
   11e9c:	dd000015 	stw	r20,0(sp)
   11ea0:	01c000c4 	movi	r7,3
   11ea4:	00000606 	br	11ec0 <_gcvt+0x14c>
   11ea8:	d8800404 	addi	r2,sp,16
   11eac:	d8800315 	stw	r2,12(sp)
   11eb0:	d9000215 	stw	r4,8(sp)
   11eb4:	d8c00115 	stw	r3,4(sp)
   11eb8:	dd000015 	stw	r20,0(sp)
   11ebc:	01c00084 	movi	r7,2
   11ec0:	a809883a 	mov	r4,r21
   11ec4:	900b883a 	mov	r5,r18
   11ec8:	880d883a 	mov	r6,r17
   11ecc:	00138f00 	call	138f0 <_dtoa_r>
   11ed0:	d9000617 	ldw	r4,24(sp)
   11ed4:	00c9c3c4 	movi	r3,9999
   11ed8:	20c00226 	beq	r4,r3,11ee4 <_gcvt+0x170>
   11edc:	8009883a 	mov	r4,r16
   11ee0:	00000a06 	br	11f0c <_gcvt+0x198>
   11ee4:	100b883a 	mov	r5,r2
   11ee8:	8009883a 	mov	r4,r16
   11eec:	001364c0 	call	1364c <strcpy>
   11ef0:	00005306 	br	12040 <_gcvt+0x2cc>
   11ef4:	01c01d0e 	bge	zero,r7,11f6c <_gcvt+0x1f8>
   11ef8:	39ffffc4 	addi	r7,r7,-1
   11efc:	21800005 	stb	r6,0(r4)
   11f00:	10800044 	addi	r2,r2,1
   11f04:	d9c00615 	stw	r7,24(sp)
   11f08:	21000044 	addi	r4,r4,1
   11f0c:	11800003 	ldbu	r6,0(r2)
   11f10:	a107c83a 	sub	r3,r20,r4
   11f14:	200b883a 	mov	r5,r4
   11f18:	32003fcc 	andi	r8,r6,255
   11f1c:	4200201c 	xori	r8,r8,128
   11f20:	423fe004 	addi	r8,r8,-128
   11f24:	80c7883a 	add	r3,r16,r3
   11f28:	d9c00617 	ldw	r7,24(sp)
   11f2c:	403ff11e 	bne	r8,zero,11ef4 <_gp+0xffff0988>
   11f30:	000d883a 	mov	r6,zero
   11f34:	38cfc83a 	sub	r7,r7,r3
   11f38:	02400c04 	movi	r9,48
   11f3c:	00000506 	br	11f54 <_gcvt+0x1e0>
   11f40:	00c0070e 	bge	zero,r3,11f60 <_gcvt+0x1ec>
   11f44:	22400005 	stb	r9,0(r4)
   11f48:	18ffffc4 	addi	r3,r3,-1
   11f4c:	21000044 	addi	r4,r4,1
   11f50:	01800044 	movi	r6,1
   11f54:	38d1883a 	add	r8,r7,r3
   11f58:	200b883a 	mov	r5,r4
   11f5c:	023ff816 	blt	zero,r8,11f40 <_gp+0xffff09d4>
   11f60:	31803fcc 	andi	r6,r6,255
   11f64:	30000126 	beq	r6,zero,11f6c <_gcvt+0x1f8>
   11f68:	da000615 	stw	r8,24(sp)
   11f6c:	9800021e 	bne	r19,zero,11f78 <_gcvt+0x204>
   11f70:	11800007 	ldb	r6,0(r2)
   11f74:	30003126 	beq	r6,zero,1203c <_gcvt+0x2c8>
   11f78:	8100031e 	bne	r16,r4,11f88 <_gcvt+0x214>
   11f7c:	01000c04 	movi	r4,48
   11f80:	81400044 	addi	r5,r16,1
   11f84:	81000005 	stb	r4,0(r16)
   11f88:	d9800617 	ldw	r6,24(sp)
   11f8c:	01000b84 	movi	r4,46
   11f90:	29000005 	stb	r4,0(r5)
   11f94:	02000c04 	movi	r8,48
   11f98:	29000044 	addi	r4,r5,1
   11f9c:	000b883a 	mov	r5,zero
   11fa0:	300f883a 	mov	r7,r6
   11fa4:	30000416 	blt	r6,zero,11fb8 <_gcvt+0x244>
   11fa8:	29403fcc 	andi	r5,r5,255
   11fac:	28001226 	beq	r5,zero,11ff8 <_gcvt+0x284>
   11fb0:	d9800615 	stw	r6,24(sp)
   11fb4:	00001006 	br	11ff8 <_gcvt+0x284>
   11fb8:	31800044 	addi	r6,r6,1
   11fbc:	00c0050e 	bge	zero,r3,11fd4 <_gcvt+0x260>
   11fc0:	22000005 	stb	r8,0(r4)
   11fc4:	18ffffc4 	addi	r3,r3,-1
   11fc8:	21000044 	addi	r4,r4,1
   11fcc:	01400044 	movi	r5,1
   11fd0:	003ff306 	br	11fa0 <_gp+0xffff0a34>
   11fd4:	29403fcc 	andi	r5,r5,255
   11fd8:	28000726 	beq	r5,zero,11ff8 <_gcvt+0x284>
   11fdc:	d9c00615 	stw	r7,24(sp)
   11fe0:	00000506 	br	11ff8 <_gcvt+0x284>
   11fe4:	00c00a0e 	bge	zero,r3,12010 <_gcvt+0x29c>
   11fe8:	21800005 	stb	r6,0(r4)
   11fec:	10800044 	addi	r2,r2,1
   11ff0:	18ffffc4 	addi	r3,r3,-1
   11ff4:	21000044 	addi	r4,r4,1
   11ff8:	11800003 	ldbu	r6,0(r2)
   11ffc:	200b883a 	mov	r5,r4
   12000:	31c03fcc 	andi	r7,r6,255
   12004:	39c0201c 	xori	r7,r7,128
   12008:	39ffe004 	addi	r7,r7,-128
   1200c:	383ff51e 	bne	r7,zero,11fe4 <_gp+0xffff0a78>
   12010:	98000a26 	beq	r19,zero,1203c <_gcvt+0x2c8>
   12014:	1805883a 	mov	r2,r3
   12018:	01800c04 	movi	r6,48
   1201c:	0080040e 	bge	zero,r2,12030 <_gcvt+0x2bc>
   12020:	21800005 	stb	r6,0(r4)
   12024:	10bfffc4 	addi	r2,r2,-1
   12028:	21000044 	addi	r4,r4,1
   1202c:	003ffb06 	br	1201c <_gp+0xffff0ab0>
   12030:	1800010e 	bge	r3,zero,12038 <_gcvt+0x2c4>
   12034:	0007883a 	mov	r3,zero
   12038:	28cb883a 	add	r5,r5,r3
   1203c:	28000005 	stb	zero,0(r5)
   12040:	8005883a 	mov	r2,r16
   12044:	dfc00e17 	ldw	ra,56(sp)
   12048:	dd800d17 	ldw	r22,52(sp)
   1204c:	dd400c17 	ldw	r21,48(sp)
   12050:	dd000b17 	ldw	r20,44(sp)
   12054:	dcc00a17 	ldw	r19,40(sp)
   12058:	dc800917 	ldw	r18,36(sp)
   1205c:	dc400817 	ldw	r17,32(sp)
   12060:	dc000717 	ldw	r16,28(sp)
   12064:	dec00f04 	addi	sp,sp,60
   12068:	f800283a 	ret

0001206c <_dcvt>:
   1206c:	defff504 	addi	sp,sp,-44
   12070:	d8800d07 	ldb	r2,52(sp)
   12074:	dc400815 	stw	r17,32(sp)
   12078:	dc000715 	stw	r16,28(sp)
   1207c:	2823883a 	mov	r17,r5
   12080:	dfc00a15 	stw	ra,40(sp)
   12084:	300b883a 	mov	r5,r6
   12088:	dc800915 	stw	r18,36(sp)
   1208c:	018011c4 	movi	r6,71
   12090:	3811883a 	mov	r8,r7
   12094:	dc000b17 	ldw	r16,44(sp)
   12098:	d8c00e17 	ldw	r3,56(sp)
   1209c:	11807726 	beq	r2,r6,1227c <_dcvt+0x210>
   120a0:	30800516 	blt	r6,r2,120b8 <_dcvt+0x4c>
   120a4:	01801144 	movi	r6,69
   120a8:	11807d26 	beq	r2,r6,122a0 <_dcvt+0x234>
   120ac:	01801184 	movi	r6,70
   120b0:	11800826 	beq	r2,r6,120d4 <_dcvt+0x68>
   120b4:	00008106 	br	122bc <_dcvt+0x250>
   120b8:	01801984 	movi	r6,102
   120bc:	11800526 	beq	r2,r6,120d4 <_dcvt+0x68>
   120c0:	018019c4 	movi	r6,103
   120c4:	11806d26 	beq	r2,r6,1227c <_dcvt+0x210>
   120c8:	01801944 	movi	r6,101
   120cc:	11807b1e 	bne	r2,r6,122bc <_dcvt+0x250>
   120d0:	00007306 	br	122a0 <_dcvt+0x234>
   120d4:	80000226 	beq	r16,zero,120e0 <_dcvt+0x74>
   120d8:	04800044 	movi	r18,1
   120dc:	00000106 	br	120e4 <_dcvt+0x78>
   120e0:	1825883a 	mov	r18,r3
   120e4:	d8800404 	addi	r2,sp,16
   120e8:	d8800315 	stw	r2,12(sp)
   120ec:	d8800504 	addi	r2,sp,20
   120f0:	d8800215 	stw	r2,8(sp)
   120f4:	d8800604 	addi	r2,sp,24
   120f8:	d8800115 	stw	r2,4(sp)
   120fc:	dc000015 	stw	r16,0(sp)
   12100:	01c000c4 	movi	r7,3
   12104:	400d883a 	mov	r6,r8
   12108:	00138f00 	call	138f0 <_dtoa_r>
   1210c:	d9000617 	ldw	r4,24(sp)
   12110:	00c9c3c4 	movi	r3,9999
   12114:	20c00326 	beq	r4,r3,12124 <_dcvt+0xb8>
   12118:	880f883a 	mov	r7,r17
   1211c:	100d883a 	mov	r6,r2
   12120:	00000a06 	br	1214c <_dcvt+0xe0>
   12124:	100b883a 	mov	r5,r2
   12128:	8809883a 	mov	r4,r17
   1212c:	001364c0 	call	1364c <strcpy>
   12130:	00006206 	br	122bc <_dcvt+0x250>
   12134:	01001c0e 	bge	zero,r4,121a8 <_dcvt+0x13c>
   12138:	213fffc4 	addi	r4,r4,-1
   1213c:	39400005 	stb	r5,0(r7)
   12140:	31800044 	addi	r6,r6,1
   12144:	d9000615 	stw	r4,24(sp)
   12148:	39c00044 	addi	r7,r7,1
   1214c:	31400003 	ldbu	r5,0(r6)
   12150:	3807883a 	mov	r3,r7
   12154:	d9000617 	ldw	r4,24(sp)
   12158:	2a003fcc 	andi	r8,r5,255
   1215c:	4200201c 	xori	r8,r8,128
   12160:	423fe004 	addi	r8,r8,-128
   12164:	403ff31e 	bne	r8,zero,12134 <_gp+0xffff0bc8>
   12168:	02400c04 	movi	r9,48
   1216c:	21cbc83a 	sub	r5,r4,r7
   12170:	194b883a 	add	r5,r3,r5
   12174:	0140040e 	bge	zero,r5,12188 <_dcvt+0x11c>
   12178:	3a400005 	stb	r9,0(r7)
   1217c:	02000044 	movi	r8,1
   12180:	39c00044 	addi	r7,r7,1
   12184:	003ff906 	br	1216c <_gp+0xffff0c00>
   12188:	200b883a 	mov	r5,r4
   1218c:	2000010e 	bge	r4,zero,12194 <_dcvt+0x128>
   12190:	000b883a 	mov	r5,zero
   12194:	42003fcc 	andi	r8,r8,255
   12198:	1947883a 	add	r3,r3,r5
   1219c:	2149c83a 	sub	r4,r4,r5
   121a0:	40000126 	beq	r8,zero,121a8 <_dcvt+0x13c>
   121a4:	d9000615 	stw	r4,24(sp)
   121a8:	9000021e 	bne	r18,zero,121b4 <_dcvt+0x148>
   121ac:	31000007 	ldb	r4,0(r6)
   121b0:	20003026 	beq	r4,zero,12274 <_dcvt+0x208>
   121b4:	1180031e 	bne	r2,r6,121c4 <_dcvt+0x158>
   121b8:	00800c04 	movi	r2,48
   121bc:	18800005 	stb	r2,0(r3)
   121c0:	18c00044 	addi	r3,r3,1
   121c4:	d9000617 	ldw	r4,24(sp)
   121c8:	00800b84 	movi	r2,46
   121cc:	18800005 	stb	r2,0(r3)
   121d0:	01c00c04 	movi	r7,48
   121d4:	18800044 	addi	r2,r3,1
   121d8:	0007883a 	mov	r3,zero
   121dc:	200b883a 	mov	r5,r4
   121e0:	20000416 	blt	r4,zero,121f4 <_dcvt+0x188>
   121e4:	18c03fcc 	andi	r3,r3,255
   121e8:	18001226 	beq	r3,zero,12234 <_dcvt+0x1c8>
   121ec:	d9000615 	stw	r4,24(sp)
   121f0:	00001006 	br	12234 <_dcvt+0x1c8>
   121f4:	21000044 	addi	r4,r4,1
   121f8:	0400050e 	bge	zero,r16,12210 <_dcvt+0x1a4>
   121fc:	11c00005 	stb	r7,0(r2)
   12200:	843fffc4 	addi	r16,r16,-1
   12204:	10800044 	addi	r2,r2,1
   12208:	00c00044 	movi	r3,1
   1220c:	003ff306 	br	121dc <_gp+0xffff0c70>
   12210:	18c03fcc 	andi	r3,r3,255
   12214:	18000726 	beq	r3,zero,12234 <_dcvt+0x1c8>
   12218:	d9400615 	stw	r5,24(sp)
   1221c:	00000506 	br	12234 <_dcvt+0x1c8>
   12220:	0400140e 	bge	zero,r16,12274 <_dcvt+0x208>
   12224:	11000005 	stb	r4,0(r2)
   12228:	31800044 	addi	r6,r6,1
   1222c:	843fffc4 	addi	r16,r16,-1
   12230:	10800044 	addi	r2,r2,1
   12234:	31000003 	ldbu	r4,0(r6)
   12238:	1007883a 	mov	r3,r2
   1223c:	21403fcc 	andi	r5,r4,255
   12240:	2940201c 	xori	r5,r5,128
   12244:	297fe004 	addi	r5,r5,-128
   12248:	283ff51e 	bne	r5,zero,12220 <_gp+0xffff0cb4>
   1224c:	8009883a 	mov	r4,r16
   12250:	01400c04 	movi	r5,48
   12254:	0100040e 	bge	zero,r4,12268 <_dcvt+0x1fc>
   12258:	11400005 	stb	r5,0(r2)
   1225c:	213fffc4 	addi	r4,r4,-1
   12260:	10800044 	addi	r2,r2,1
   12264:	003ffb06 	br	12254 <_gp+0xffff0ce8>
   12268:	8000010e 	bge	r16,zero,12270 <_dcvt+0x204>
   1226c:	0021883a 	mov	r16,zero
   12270:	1c07883a 	add	r3,r3,r16
   12274:	18000005 	stb	zero,0(r3)
   12278:	00001006 	br	122bc <_dcvt+0x250>
   1227c:	8000011e 	bne	r16,zero,12284 <_dcvt+0x218>
   12280:	04000044 	movi	r16,1
   12284:	d8c00215 	stw	r3,8(sp)
   12288:	d8800115 	stw	r2,4(sp)
   1228c:	dc400015 	stw	r17,0(sp)
   12290:	800f883a 	mov	r7,r16
   12294:	400d883a 	mov	r6,r8
   12298:	0011d740 	call	11d74 <_gcvt>
   1229c:	00000706 	br	122bc <_dcvt+0x250>
   122a0:	280d883a 	mov	r6,r5
   122a4:	d8c00215 	stw	r3,8(sp)
   122a8:	d8800115 	stw	r2,4(sp)
   122ac:	dc000015 	stw	r16,0(sp)
   122b0:	400f883a 	mov	r7,r8
   122b4:	880b883a 	mov	r5,r17
   122b8:	001191c0 	call	1191c <print_e>
   122bc:	8805883a 	mov	r2,r17
   122c0:	dfc00a17 	ldw	ra,40(sp)
   122c4:	dc800917 	ldw	r18,36(sp)
   122c8:	dc400817 	ldw	r17,32(sp)
   122cc:	dc000717 	ldw	r16,28(sp)
   122d0:	dec00b04 	addi	sp,sp,44
   122d4:	f800283a 	ret

000122d8 <__sfvwrite_small_dev>:
   122d8:	2880000b 	ldhu	r2,0(r5)
   122dc:	1080020c 	andi	r2,r2,8
   122e0:	10002126 	beq	r2,zero,12368 <__sfvwrite_small_dev+0x90>
   122e4:	2880008f 	ldh	r2,2(r5)
   122e8:	defffa04 	addi	sp,sp,-24
   122ec:	dc000015 	stw	r16,0(sp)
   122f0:	dfc00515 	stw	ra,20(sp)
   122f4:	dd000415 	stw	r20,16(sp)
   122f8:	dcc00315 	stw	r19,12(sp)
   122fc:	dc800215 	stw	r18,8(sp)
   12300:	dc400115 	stw	r17,4(sp)
   12304:	2821883a 	mov	r16,r5
   12308:	10001216 	blt	r2,zero,12354 <__sfvwrite_small_dev+0x7c>
   1230c:	2027883a 	mov	r19,r4
   12310:	3025883a 	mov	r18,r6
   12314:	3823883a 	mov	r17,r7
   12318:	05010004 	movi	r20,1024
   1231c:	04400b0e 	bge	zero,r17,1234c <__sfvwrite_small_dev+0x74>
   12320:	880f883a 	mov	r7,r17
   12324:	a440010e 	bge	r20,r17,1232c <__sfvwrite_small_dev+0x54>
   12328:	01c10004 	movi	r7,1024
   1232c:	8140008f 	ldh	r5,2(r16)
   12330:	900d883a 	mov	r6,r18
   12334:	9809883a 	mov	r4,r19
   12338:	00136780 	call	13678 <_write_r>
   1233c:	0080050e 	bge	zero,r2,12354 <__sfvwrite_small_dev+0x7c>
   12340:	88a3c83a 	sub	r17,r17,r2
   12344:	90a5883a 	add	r18,r18,r2
   12348:	003ff406 	br	1231c <_gp+0xffff0db0>
   1234c:	0005883a 	mov	r2,zero
   12350:	00000706 	br	12370 <__sfvwrite_small_dev+0x98>
   12354:	8080000b 	ldhu	r2,0(r16)
   12358:	10801014 	ori	r2,r2,64
   1235c:	8080000d 	sth	r2,0(r16)
   12360:	00bfffc4 	movi	r2,-1
   12364:	00000206 	br	12370 <__sfvwrite_small_dev+0x98>
   12368:	00bfffc4 	movi	r2,-1
   1236c:	f800283a 	ret
   12370:	dfc00517 	ldw	ra,20(sp)
   12374:	dd000417 	ldw	r20,16(sp)
   12378:	dcc00317 	ldw	r19,12(sp)
   1237c:	dc800217 	ldw	r18,8(sp)
   12380:	dc400117 	ldw	r17,4(sp)
   12384:	dc000017 	ldw	r16,0(sp)
   12388:	dec00604 	addi	sp,sp,24
   1238c:	f800283a 	ret

00012390 <_Balloc>:
   12390:	20800417 	ldw	r2,16(r4)
   12394:	defffc04 	addi	sp,sp,-16
   12398:	dc400115 	stw	r17,4(sp)
   1239c:	dc000015 	stw	r16,0(sp)
   123a0:	dfc00315 	stw	ra,12(sp)
   123a4:	dc800215 	stw	r18,8(sp)
   123a8:	2021883a 	mov	r16,r4
   123ac:	2823883a 	mov	r17,r5
   123b0:	1000071e 	bne	r2,zero,123d0 <_Balloc+0x40>
   123b4:	01000404 	movi	r4,16
   123b8:	0014be80 	call	14be8 <malloc>
   123bc:	80800415 	stw	r2,16(r16)
   123c0:	10000115 	stw	zero,4(r2)
   123c4:	10000215 	stw	zero,8(r2)
   123c8:	10000015 	stw	zero,0(r2)
   123cc:	10000315 	stw	zero,12(r2)
   123d0:	84800417 	ldw	r18,16(r16)
   123d4:	90800317 	ldw	r2,12(r18)
   123d8:	10000a26 	beq	r2,zero,12404 <_Balloc+0x74>
   123dc:	80800417 	ldw	r2,16(r16)
   123e0:	8c47883a 	add	r3,r17,r17
   123e4:	18c7883a 	add	r3,r3,r3
   123e8:	10800317 	ldw	r2,12(r2)
   123ec:	10c7883a 	add	r3,r2,r3
   123f0:	18800017 	ldw	r2,0(r3)
   123f4:	10000d26 	beq	r2,zero,1242c <_Balloc+0x9c>
   123f8:	11000017 	ldw	r4,0(r2)
   123fc:	19000015 	stw	r4,0(r3)
   12400:	00001406 	br	12454 <_Balloc+0xc4>
   12404:	01800844 	movi	r6,33
   12408:	01400104 	movi	r5,4
   1240c:	8009883a 	mov	r4,r16
   12410:	00133a00 	call	133a0 <_calloc_r>
   12414:	90800315 	stw	r2,12(r18)
   12418:	80800417 	ldw	r2,16(r16)
   1241c:	10800317 	ldw	r2,12(r2)
   12420:	103fee1e 	bne	r2,zero,123dc <_gp+0xffff0e70>
   12424:	0005883a 	mov	r2,zero
   12428:	00000c06 	br	1245c <_Balloc+0xcc>
   1242c:	01400044 	movi	r5,1
   12430:	2c64983a 	sll	r18,r5,r17
   12434:	8009883a 	mov	r4,r16
   12438:	91800144 	addi	r6,r18,5
   1243c:	318d883a 	add	r6,r6,r6
   12440:	318d883a 	add	r6,r6,r6
   12444:	00133a00 	call	133a0 <_calloc_r>
   12448:	103ff626 	beq	r2,zero,12424 <_gp+0xffff0eb8>
   1244c:	14400115 	stw	r17,4(r2)
   12450:	14800215 	stw	r18,8(r2)
   12454:	10000415 	stw	zero,16(r2)
   12458:	10000315 	stw	zero,12(r2)
   1245c:	dfc00317 	ldw	ra,12(sp)
   12460:	dc800217 	ldw	r18,8(sp)
   12464:	dc400117 	ldw	r17,4(sp)
   12468:	dc000017 	ldw	r16,0(sp)
   1246c:	dec00404 	addi	sp,sp,16
   12470:	f800283a 	ret

00012474 <_Bfree>:
   12474:	20800417 	ldw	r2,16(r4)
   12478:	defffd04 	addi	sp,sp,-12
   1247c:	dc400115 	stw	r17,4(sp)
   12480:	dc000015 	stw	r16,0(sp)
   12484:	dfc00215 	stw	ra,8(sp)
   12488:	2023883a 	mov	r17,r4
   1248c:	2821883a 	mov	r16,r5
   12490:	1000071e 	bne	r2,zero,124b0 <_Bfree+0x3c>
   12494:	01000404 	movi	r4,16
   12498:	0014be80 	call	14be8 <malloc>
   1249c:	88800415 	stw	r2,16(r17)
   124a0:	10000115 	stw	zero,4(r2)
   124a4:	10000215 	stw	zero,8(r2)
   124a8:	10000015 	stw	zero,0(r2)
   124ac:	10000315 	stw	zero,12(r2)
   124b0:	80000926 	beq	r16,zero,124d8 <_Bfree+0x64>
   124b4:	88c00417 	ldw	r3,16(r17)
   124b8:	80800117 	ldw	r2,4(r16)
   124bc:	18c00317 	ldw	r3,12(r3)
   124c0:	1085883a 	add	r2,r2,r2
   124c4:	1085883a 	add	r2,r2,r2
   124c8:	1885883a 	add	r2,r3,r2
   124cc:	10c00017 	ldw	r3,0(r2)
   124d0:	80c00015 	stw	r3,0(r16)
   124d4:	14000015 	stw	r16,0(r2)
   124d8:	dfc00217 	ldw	ra,8(sp)
   124dc:	dc400117 	ldw	r17,4(sp)
   124e0:	dc000017 	ldw	r16,0(sp)
   124e4:	dec00304 	addi	sp,sp,12
   124e8:	f800283a 	ret

000124ec <__multadd>:
   124ec:	defff604 	addi	sp,sp,-40
   124f0:	dc400115 	stw	r17,4(sp)
   124f4:	2c400417 	ldw	r17,16(r5)
   124f8:	ddc00715 	stw	r23,28(sp)
   124fc:	dd800615 	stw	r22,24(sp)
   12500:	dd400515 	stw	r21,20(sp)
   12504:	dd000415 	stw	r20,16(sp)
   12508:	dcc00315 	stw	r19,12(sp)
   1250c:	dc000015 	stw	r16,0(sp)
   12510:	dfc00915 	stw	ra,36(sp)
   12514:	df000815 	stw	fp,32(sp)
   12518:	dc800215 	stw	r18,8(sp)
   1251c:	2027883a 	mov	r19,r4
   12520:	2821883a 	mov	r16,r5
   12524:	3029883a 	mov	r20,r6
   12528:	382b883a 	mov	r21,r7
   1252c:	2d800504 	addi	r22,r5,20
   12530:	002f883a 	mov	r23,zero
   12534:	b7000017 	ldw	fp,0(r22)
   12538:	a00b883a 	mov	r5,r20
   1253c:	bdc00044 	addi	r23,r23,1
   12540:	e13fffcc 	andi	r4,fp,65535
   12544:	00110380 	call	11038 <__mulsi3>
   12548:	e008d43a 	srli	r4,fp,16
   1254c:	a00b883a 	mov	r5,r20
   12550:	1565883a 	add	r18,r2,r21
   12554:	00110380 	call	11038 <__mulsi3>
   12558:	9006d43a 	srli	r3,r18,16
   1255c:	94bfffcc 	andi	r18,r18,65535
   12560:	b5800104 	addi	r22,r22,4
   12564:	10c5883a 	add	r2,r2,r3
   12568:	102ad43a 	srli	r21,r2,16
   1256c:	1004943a 	slli	r2,r2,16
   12570:	14a5883a 	add	r18,r2,r18
   12574:	b4bfff15 	stw	r18,-4(r22)
   12578:	bc7fee16 	blt	r23,r17,12534 <_gp+0xffff0fc8>
   1257c:	a8001926 	beq	r21,zero,125e4 <__multadd+0xf8>
   12580:	80800217 	ldw	r2,8(r16)
   12584:	88801016 	blt	r17,r2,125c8 <__multadd+0xdc>
   12588:	81400117 	ldw	r5,4(r16)
   1258c:	9809883a 	mov	r4,r19
   12590:	29400044 	addi	r5,r5,1
   12594:	00123900 	call	12390 <_Balloc>
   12598:	81800417 	ldw	r6,16(r16)
   1259c:	81400304 	addi	r5,r16,12
   125a0:	11000304 	addi	r4,r2,12
   125a4:	31800084 	addi	r6,r6,2
   125a8:	318d883a 	add	r6,r6,r6
   125ac:	318d883a 	add	r6,r6,r6
   125b0:	1025883a 	mov	r18,r2
   125b4:	0014c100 	call	14c10 <memcpy>
   125b8:	800b883a 	mov	r5,r16
   125bc:	9809883a 	mov	r4,r19
   125c0:	00124740 	call	12474 <_Bfree>
   125c4:	9021883a 	mov	r16,r18
   125c8:	88800144 	addi	r2,r17,5
   125cc:	1085883a 	add	r2,r2,r2
   125d0:	1085883a 	add	r2,r2,r2
   125d4:	8085883a 	add	r2,r16,r2
   125d8:	15400015 	stw	r21,0(r2)
   125dc:	8c400044 	addi	r17,r17,1
   125e0:	84400415 	stw	r17,16(r16)
   125e4:	8005883a 	mov	r2,r16
   125e8:	dfc00917 	ldw	ra,36(sp)
   125ec:	df000817 	ldw	fp,32(sp)
   125f0:	ddc00717 	ldw	r23,28(sp)
   125f4:	dd800617 	ldw	r22,24(sp)
   125f8:	dd400517 	ldw	r21,20(sp)
   125fc:	dd000417 	ldw	r20,16(sp)
   12600:	dcc00317 	ldw	r19,12(sp)
   12604:	dc800217 	ldw	r18,8(sp)
   12608:	dc400117 	ldw	r17,4(sp)
   1260c:	dc000017 	ldw	r16,0(sp)
   12610:	dec00a04 	addi	sp,sp,40
   12614:	f800283a 	ret

00012618 <__s2b>:
   12618:	defff904 	addi	sp,sp,-28
   1261c:	dc800215 	stw	r18,8(sp)
   12620:	dc000015 	stw	r16,0(sp)
   12624:	2025883a 	mov	r18,r4
   12628:	2821883a 	mov	r16,r5
   1262c:	39000204 	addi	r4,r7,8
   12630:	01400244 	movi	r5,9
   12634:	dcc00315 	stw	r19,12(sp)
   12638:	dc400115 	stw	r17,4(sp)
   1263c:	dfc00615 	stw	ra,24(sp)
   12640:	dd400515 	stw	r21,20(sp)
   12644:	dd000415 	stw	r20,16(sp)
   12648:	3023883a 	mov	r17,r6
   1264c:	3827883a 	mov	r19,r7
   12650:	0014d580 	call	14d58 <__divsi3>
   12654:	00c00044 	movi	r3,1
   12658:	000b883a 	mov	r5,zero
   1265c:	1880030e 	bge	r3,r2,1266c <__s2b+0x54>
   12660:	18c7883a 	add	r3,r3,r3
   12664:	29400044 	addi	r5,r5,1
   12668:	003ffc06 	br	1265c <_gp+0xffff10f0>
   1266c:	9009883a 	mov	r4,r18
   12670:	00123900 	call	12390 <_Balloc>
   12674:	d8c00717 	ldw	r3,28(sp)
   12678:	10c00515 	stw	r3,20(r2)
   1267c:	00c00044 	movi	r3,1
   12680:	10c00415 	stw	r3,16(r2)
   12684:	00c00244 	movi	r3,9
   12688:	1c400e0e 	bge	r3,r17,126c4 <__s2b+0xac>
   1268c:	80e9883a 	add	r20,r16,r3
   12690:	a02b883a 	mov	r21,r20
   12694:	8461883a 	add	r16,r16,r17
   12698:	a9c00007 	ldb	r7,0(r21)
   1269c:	01800284 	movi	r6,10
   126a0:	100b883a 	mov	r5,r2
   126a4:	39fff404 	addi	r7,r7,-48
   126a8:	9009883a 	mov	r4,r18
   126ac:	ad400044 	addi	r21,r21,1
   126b0:	00124ec0 	call	124ec <__multadd>
   126b4:	ac3ff81e 	bne	r21,r16,12698 <_gp+0xffff112c>
   126b8:	a461883a 	add	r16,r20,r17
   126bc:	843ffe04 	addi	r16,r16,-8
   126c0:	00000206 	br	126cc <__s2b+0xb4>
   126c4:	84000284 	addi	r16,r16,10
   126c8:	1823883a 	mov	r17,r3
   126cc:	8c23c83a 	sub	r17,r17,r16
   126d0:	8c07883a 	add	r3,r17,r16
   126d4:	1cc0080e 	bge	r3,r19,126f8 <__s2b+0xe0>
   126d8:	81c00007 	ldb	r7,0(r16)
   126dc:	01800284 	movi	r6,10
   126e0:	100b883a 	mov	r5,r2
   126e4:	39fff404 	addi	r7,r7,-48
   126e8:	9009883a 	mov	r4,r18
   126ec:	00124ec0 	call	124ec <__multadd>
   126f0:	84000044 	addi	r16,r16,1
   126f4:	003ff606 	br	126d0 <_gp+0xffff1164>
   126f8:	dfc00617 	ldw	ra,24(sp)
   126fc:	dd400517 	ldw	r21,20(sp)
   12700:	dd000417 	ldw	r20,16(sp)
   12704:	dcc00317 	ldw	r19,12(sp)
   12708:	dc800217 	ldw	r18,8(sp)
   1270c:	dc400117 	ldw	r17,4(sp)
   12710:	dc000017 	ldw	r16,0(sp)
   12714:	dec00704 	addi	sp,sp,28
   12718:	f800283a 	ret

0001271c <__hi0bits>:
   1271c:	20bfffec 	andhi	r2,r4,65535
   12720:	1000031e 	bne	r2,zero,12730 <__hi0bits+0x14>
   12724:	2008943a 	slli	r4,r4,16
   12728:	00800404 	movi	r2,16
   1272c:	00000106 	br	12734 <__hi0bits+0x18>
   12730:	0005883a 	mov	r2,zero
   12734:	20ffc02c 	andhi	r3,r4,65280
   12738:	1800021e 	bne	r3,zero,12744 <__hi0bits+0x28>
   1273c:	2008923a 	slli	r4,r4,8
   12740:	10800204 	addi	r2,r2,8
   12744:	20fc002c 	andhi	r3,r4,61440
   12748:	1800021e 	bne	r3,zero,12754 <__hi0bits+0x38>
   1274c:	2008913a 	slli	r4,r4,4
   12750:	10800104 	addi	r2,r2,4
   12754:	20f0002c 	andhi	r3,r4,49152
   12758:	1800031e 	bne	r3,zero,12768 <__hi0bits+0x4c>
   1275c:	2109883a 	add	r4,r4,r4
   12760:	10800084 	addi	r2,r2,2
   12764:	2109883a 	add	r4,r4,r4
   12768:	20000516 	blt	r4,zero,12780 <__hi0bits+0x64>
   1276c:	2110002c 	andhi	r4,r4,16384
   12770:	20000226 	beq	r4,zero,1277c <__hi0bits+0x60>
   12774:	10800044 	addi	r2,r2,1
   12778:	f800283a 	ret
   1277c:	00800804 	movi	r2,32
   12780:	f800283a 	ret

00012784 <__lo0bits>:
   12784:	20c00017 	ldw	r3,0(r4)
   12788:	188001cc 	andi	r2,r3,7
   1278c:	10000c26 	beq	r2,zero,127c0 <__lo0bits+0x3c>
   12790:	1880004c 	andi	r2,r3,1
   12794:	1000231e 	bne	r2,zero,12824 <__lo0bits+0xa0>
   12798:	1880008c 	andi	r2,r3,2
   1279c:	10000426 	beq	r2,zero,127b0 <__lo0bits+0x2c>
   127a0:	1806d07a 	srli	r3,r3,1
   127a4:	00800044 	movi	r2,1
   127a8:	20c00015 	stw	r3,0(r4)
   127ac:	f800283a 	ret
   127b0:	1806d0ba 	srli	r3,r3,2
   127b4:	00800084 	movi	r2,2
   127b8:	20c00015 	stw	r3,0(r4)
   127bc:	f800283a 	ret
   127c0:	18bfffcc 	andi	r2,r3,65535
   127c4:	1000031e 	bne	r2,zero,127d4 <__lo0bits+0x50>
   127c8:	1806d43a 	srli	r3,r3,16
   127cc:	00800404 	movi	r2,16
   127d0:	00000106 	br	127d8 <__lo0bits+0x54>
   127d4:	0005883a 	mov	r2,zero
   127d8:	19403fcc 	andi	r5,r3,255
   127dc:	2800021e 	bne	r5,zero,127e8 <__lo0bits+0x64>
   127e0:	1806d23a 	srli	r3,r3,8
   127e4:	10800204 	addi	r2,r2,8
   127e8:	194003cc 	andi	r5,r3,15
   127ec:	2800021e 	bne	r5,zero,127f8 <__lo0bits+0x74>
   127f0:	1806d13a 	srli	r3,r3,4
   127f4:	10800104 	addi	r2,r2,4
   127f8:	194000cc 	andi	r5,r3,3
   127fc:	2800021e 	bne	r5,zero,12808 <__lo0bits+0x84>
   12800:	1806d0ba 	srli	r3,r3,2
   12804:	10800084 	addi	r2,r2,2
   12808:	1940004c 	andi	r5,r3,1
   1280c:	2800031e 	bne	r5,zero,1281c <__lo0bits+0x98>
   12810:	1806d07a 	srli	r3,r3,1
   12814:	18000526 	beq	r3,zero,1282c <__lo0bits+0xa8>
   12818:	10800044 	addi	r2,r2,1
   1281c:	20c00015 	stw	r3,0(r4)
   12820:	f800283a 	ret
   12824:	0005883a 	mov	r2,zero
   12828:	f800283a 	ret
   1282c:	00800804 	movi	r2,32
   12830:	f800283a 	ret

00012834 <__i2b>:
   12834:	defffd04 	addi	sp,sp,-12
   12838:	dc000015 	stw	r16,0(sp)
   1283c:	04000044 	movi	r16,1
   12840:	dc400115 	stw	r17,4(sp)
   12844:	2823883a 	mov	r17,r5
   12848:	800b883a 	mov	r5,r16
   1284c:	dfc00215 	stw	ra,8(sp)
   12850:	00123900 	call	12390 <_Balloc>
   12854:	14400515 	stw	r17,20(r2)
   12858:	14000415 	stw	r16,16(r2)
   1285c:	dfc00217 	ldw	ra,8(sp)
   12860:	dc400117 	ldw	r17,4(sp)
   12864:	dc000017 	ldw	r16,0(sp)
   12868:	dec00304 	addi	sp,sp,12
   1286c:	f800283a 	ret

00012870 <__multiply>:
   12870:	28c00417 	ldw	r3,16(r5)
   12874:	30800417 	ldw	r2,16(r6)
   12878:	deffef04 	addi	sp,sp,-68
   1287c:	dc800915 	stw	r18,36(sp)
   12880:	dc000715 	stw	r16,28(sp)
   12884:	dfc01015 	stw	ra,64(sp)
   12888:	df000f15 	stw	fp,60(sp)
   1288c:	ddc00e15 	stw	r23,56(sp)
   12890:	dd800d15 	stw	r22,52(sp)
   12894:	dd400c15 	stw	r21,48(sp)
   12898:	dd000b15 	stw	r20,44(sp)
   1289c:	dcc00a15 	stw	r19,40(sp)
   128a0:	dc400815 	stw	r17,32(sp)
   128a4:	2825883a 	mov	r18,r5
   128a8:	3021883a 	mov	r16,r6
   128ac:	1880020e 	bge	r3,r2,128b8 <__multiply+0x48>
   128b0:	3025883a 	mov	r18,r6
   128b4:	2821883a 	mov	r16,r5
   128b8:	94c00417 	ldw	r19,16(r18)
   128bc:	85000417 	ldw	r20,16(r16)
   128c0:	90800217 	ldw	r2,8(r18)
   128c4:	91400117 	ldw	r5,4(r18)
   128c8:	9d2f883a 	add	r23,r19,r20
   128cc:	15c0010e 	bge	r2,r23,128d4 <__multiply+0x64>
   128d0:	29400044 	addi	r5,r5,1
   128d4:	00123900 	call	12390 <_Balloc>
   128d8:	bdeb883a 	add	r21,r23,r23
   128dc:	15800504 	addi	r22,r2,20
   128e0:	ad6b883a 	add	r21,r21,r21
   128e4:	100f883a 	mov	r7,r2
   128e8:	b56b883a 	add	r21,r22,r21
   128ec:	b005883a 	mov	r2,r22
   128f0:	1540032e 	bgeu	r2,r21,12900 <__multiply+0x90>
   128f4:	10000015 	stw	zero,0(r2)
   128f8:	10800104 	addi	r2,r2,4
   128fc:	003ffc06 	br	128f0 <_gp+0xffff1384>
   12900:	9ce7883a 	add	r19,r19,r19
   12904:	a529883a 	add	r20,r20,r20
   12908:	94800504 	addi	r18,r18,20
   1290c:	9ce7883a 	add	r19,r19,r19
   12910:	84000504 	addi	r16,r16,20
   12914:	a529883a 	add	r20,r20,r20
   12918:	94e7883a 	add	r19,r18,r19
   1291c:	8529883a 	add	r20,r16,r20
   12920:	dcc00015 	stw	r19,0(sp)
   12924:	dd000115 	stw	r20,4(sp)
   12928:	d8800117 	ldw	r2,4(sp)
   1292c:	80805f2e 	bgeu	r16,r2,12aac <__multiply+0x23c>
   12930:	8240000b 	ldhu	r9,0(r16)
   12934:	48002726 	beq	r9,zero,129d4 <__multiply+0x164>
   12938:	b00d883a 	mov	r6,r22
   1293c:	9027883a 	mov	r19,r18
   12940:	0029883a 	mov	r20,zero
   12944:	9ac00017 	ldw	r11,0(r19)
   12948:	480b883a 	mov	r5,r9
   1294c:	37000017 	ldw	fp,0(r6)
   12950:	593fffcc 	andi	r4,r11,65535
   12954:	d9800215 	stw	r6,8(sp)
   12958:	d9c00615 	stw	r7,24(sp)
   1295c:	d9800515 	stw	r6,20(sp)
   12960:	da400315 	stw	r9,12(sp)
   12964:	dac00415 	stw	r11,16(sp)
   12968:	00110380 	call	11038 <__mulsi3>
   1296c:	dac00417 	ldw	r11,16(sp)
   12970:	da400317 	ldw	r9,12(sp)
   12974:	e47fffcc 	andi	r17,fp,65535
   12978:	5808d43a 	srli	r4,r11,16
   1297c:	1445883a 	add	r2,r2,r17
   12980:	480b883a 	mov	r5,r9
   12984:	1523883a 	add	r17,r2,r20
   12988:	e038d43a 	srli	fp,fp,16
   1298c:	00110380 	call	11038 <__mulsi3>
   12990:	8806d43a 	srli	r3,r17,16
   12994:	1705883a 	add	r2,r2,fp
   12998:	d9800217 	ldw	r6,8(sp)
   1299c:	10c5883a 	add	r2,r2,r3
   129a0:	1028d43a 	srli	r20,r2,16
   129a4:	1004943a 	slli	r2,r2,16
   129a8:	8c7fffcc 	andi	r17,r17,65535
   129ac:	9cc00104 	addi	r19,r19,4
   129b0:	1462b03a 	or	r17,r2,r17
   129b4:	d8800017 	ldw	r2,0(sp)
   129b8:	34400015 	stw	r17,0(r6)
   129bc:	d9c00617 	ldw	r7,24(sp)
   129c0:	31800104 	addi	r6,r6,4
   129c4:	da000517 	ldw	r8,20(sp)
   129c8:	da400317 	ldw	r9,12(sp)
   129cc:	98bfdd36 	bltu	r19,r2,12944 <_gp+0xffff13d8>
   129d0:	45000115 	stw	r20,4(r8)
   129d4:	82000017 	ldw	r8,0(r16)
   129d8:	4010d43a 	srli	r8,r8,16
   129dc:	40002c26 	beq	r8,zero,12a90 <__multiply+0x220>
   129e0:	b4400017 	ldw	r17,0(r22)
   129e4:	9027883a 	mov	r19,r18
   129e8:	b015883a 	mov	r10,r22
   129ec:	b029883a 	mov	r20,r22
   129f0:	0039883a 	mov	fp,zero
   129f4:	9900000b 	ldhu	r4,0(r19)
   129f8:	400b883a 	mov	r5,r8
   129fc:	d9c00615 	stw	r7,24(sp)
   12a00:	da000515 	stw	r8,20(sp)
   12a04:	da800215 	stw	r10,8(sp)
   12a08:	00110380 	call	11038 <__mulsi3>
   12a0c:	a0c00017 	ldw	r3,0(r20)
   12a10:	da800217 	ldw	r10,8(sp)
   12a14:	8c7fffcc 	andi	r17,r17,65535
   12a18:	1806d43a 	srli	r3,r3,16
   12a1c:	da000517 	ldw	r8,20(sp)
   12a20:	a2c00104 	addi	r11,r20,4
   12a24:	10c5883a 	add	r2,r2,r3
   12a28:	1739883a 	add	fp,r2,fp
   12a2c:	e004943a 	slli	r2,fp,16
   12a30:	400b883a 	mov	r5,r8
   12a34:	e038d43a 	srli	fp,fp,16
   12a38:	1444b03a 	or	r2,r2,r17
   12a3c:	50800015 	stw	r2,0(r10)
   12a40:	99000017 	ldw	r4,0(r19)
   12a44:	da800215 	stw	r10,8(sp)
   12a48:	dac00415 	stw	r11,16(sp)
   12a4c:	2008d43a 	srli	r4,r4,16
   12a50:	9cc00104 	addi	r19,r19,4
   12a54:	00110380 	call	11038 <__mulsi3>
   12a58:	dac00417 	ldw	r11,16(sp)
   12a5c:	da800217 	ldw	r10,8(sp)
   12a60:	d9c00617 	ldw	r7,24(sp)
   12a64:	58c0000b 	ldhu	r3,0(r11)
   12a68:	52800104 	addi	r10,r10,4
   12a6c:	da000517 	ldw	r8,20(sp)
   12a70:	10c5883a 	add	r2,r2,r3
   12a74:	1723883a 	add	r17,r2,fp
   12a78:	d8800017 	ldw	r2,0(sp)
   12a7c:	8838d43a 	srli	fp,r17,16
   12a80:	9880022e 	bgeu	r19,r2,12a8c <__multiply+0x21c>
   12a84:	5829883a 	mov	r20,r11
   12a88:	003fda06 	br	129f4 <_gp+0xffff1488>
   12a8c:	a4400115 	stw	r17,4(r20)
   12a90:	84000104 	addi	r16,r16,4
   12a94:	b5800104 	addi	r22,r22,4
   12a98:	003fa306 	br	12928 <_gp+0xffff13bc>
   12a9c:	ad7fff04 	addi	r21,r21,-4
   12aa0:	a8800017 	ldw	r2,0(r21)
   12aa4:	1000021e 	bne	r2,zero,12ab0 <__multiply+0x240>
   12aa8:	bdffffc4 	addi	r23,r23,-1
   12aac:	05fffb16 	blt	zero,r23,12a9c <_gp+0xffff1530>
   12ab0:	3805883a 	mov	r2,r7
   12ab4:	3dc00415 	stw	r23,16(r7)
   12ab8:	dfc01017 	ldw	ra,64(sp)
   12abc:	df000f17 	ldw	fp,60(sp)
   12ac0:	ddc00e17 	ldw	r23,56(sp)
   12ac4:	dd800d17 	ldw	r22,52(sp)
   12ac8:	dd400c17 	ldw	r21,48(sp)
   12acc:	dd000b17 	ldw	r20,44(sp)
   12ad0:	dcc00a17 	ldw	r19,40(sp)
   12ad4:	dc800917 	ldw	r18,36(sp)
   12ad8:	dc400817 	ldw	r17,32(sp)
   12adc:	dc000717 	ldw	r16,28(sp)
   12ae0:	dec01104 	addi	sp,sp,68
   12ae4:	f800283a 	ret

00012ae8 <__pow5mult>:
   12ae8:	defffa04 	addi	sp,sp,-24
   12aec:	dc800215 	stw	r18,8(sp)
   12af0:	dc400115 	stw	r17,4(sp)
   12af4:	dfc00515 	stw	ra,20(sp)
   12af8:	dd000415 	stw	r20,16(sp)
   12afc:	dcc00315 	stw	r19,12(sp)
   12b00:	dc000015 	stw	r16,0(sp)
   12b04:	308000cc 	andi	r2,r6,3
   12b08:	2025883a 	mov	r18,r4
   12b0c:	3023883a 	mov	r17,r6
   12b10:	10000b26 	beq	r2,zero,12b40 <__pow5mult+0x58>
   12b14:	10bfffc4 	addi	r2,r2,-1
   12b18:	1085883a 	add	r2,r2,r2
   12b1c:	00c000b4 	movhi	r3,2
   12b20:	18e45504 	addi	r3,r3,-28332
   12b24:	1085883a 	add	r2,r2,r2
   12b28:	1885883a 	add	r2,r3,r2
   12b2c:	11800017 	ldw	r6,0(r2)
   12b30:	000f883a 	mov	r7,zero
   12b34:	00124ec0 	call	124ec <__multadd>
   12b38:	1029883a 	mov	r20,r2
   12b3c:	00000106 	br	12b44 <__pow5mult+0x5c>
   12b40:	2829883a 	mov	r20,r5
   12b44:	8823d0ba 	srai	r17,r17,2
   12b48:	88002b26 	beq	r17,zero,12bf8 <__pow5mult+0x110>
   12b4c:	90800417 	ldw	r2,16(r18)
   12b50:	1000071e 	bne	r2,zero,12b70 <__pow5mult+0x88>
   12b54:	01000404 	movi	r4,16
   12b58:	0014be80 	call	14be8 <malloc>
   12b5c:	90800415 	stw	r2,16(r18)
   12b60:	10000115 	stw	zero,4(r2)
   12b64:	10000215 	stw	zero,8(r2)
   12b68:	10000015 	stw	zero,0(r2)
   12b6c:	10000315 	stw	zero,12(r2)
   12b70:	94c00417 	ldw	r19,16(r18)
   12b74:	9c000217 	ldw	r16,8(r19)
   12b78:	80000c1e 	bne	r16,zero,12bac <__pow5mult+0xc4>
   12b7c:	01409c44 	movi	r5,625
   12b80:	9009883a 	mov	r4,r18
   12b84:	00128340 	call	12834 <__i2b>
   12b88:	98800215 	stw	r2,8(r19)
   12b8c:	1021883a 	mov	r16,r2
   12b90:	10000015 	stw	zero,0(r2)
   12b94:	00000506 	br	12bac <__pow5mult+0xc4>
   12b98:	8823d07a 	srai	r17,r17,1
   12b9c:	88001626 	beq	r17,zero,12bf8 <__pow5mult+0x110>
   12ba0:	80800017 	ldw	r2,0(r16)
   12ba4:	10000d26 	beq	r2,zero,12bdc <__pow5mult+0xf4>
   12ba8:	1021883a 	mov	r16,r2
   12bac:	8880004c 	andi	r2,r17,1
   12bb0:	103ff926 	beq	r2,zero,12b98 <_gp+0xffff162c>
   12bb4:	a00b883a 	mov	r5,r20
   12bb8:	800d883a 	mov	r6,r16
   12bbc:	9009883a 	mov	r4,r18
   12bc0:	00128700 	call	12870 <__multiply>
   12bc4:	1027883a 	mov	r19,r2
   12bc8:	a00b883a 	mov	r5,r20
   12bcc:	9009883a 	mov	r4,r18
   12bd0:	00124740 	call	12474 <_Bfree>
   12bd4:	9829883a 	mov	r20,r19
   12bd8:	003fef06 	br	12b98 <_gp+0xffff162c>
   12bdc:	800d883a 	mov	r6,r16
   12be0:	800b883a 	mov	r5,r16
   12be4:	9009883a 	mov	r4,r18
   12be8:	00128700 	call	12870 <__multiply>
   12bec:	80800015 	stw	r2,0(r16)
   12bf0:	10000015 	stw	zero,0(r2)
   12bf4:	003fec06 	br	12ba8 <_gp+0xffff163c>
   12bf8:	a005883a 	mov	r2,r20
   12bfc:	dfc00517 	ldw	ra,20(sp)
   12c00:	dd000417 	ldw	r20,16(sp)
   12c04:	dcc00317 	ldw	r19,12(sp)
   12c08:	dc800217 	ldw	r18,8(sp)
   12c0c:	dc400117 	ldw	r17,4(sp)
   12c10:	dc000017 	ldw	r16,0(sp)
   12c14:	dec00604 	addi	sp,sp,24
   12c18:	f800283a 	ret

00012c1c <__lshift>:
   12c1c:	defff804 	addi	sp,sp,-32
   12c20:	dc400215 	stw	r17,8(sp)
   12c24:	2823883a 	mov	r17,r5
   12c28:	dd000515 	stw	r20,20(sp)
   12c2c:	dc000115 	stw	r16,4(sp)
   12c30:	8d000417 	ldw	r20,16(r17)
   12c34:	3021d17a 	srai	r16,r6,5
   12c38:	29400117 	ldw	r5,4(r5)
   12c3c:	88800217 	ldw	r2,8(r17)
   12c40:	8529883a 	add	r20,r16,r20
   12c44:	dd400615 	stw	r21,24(sp)
   12c48:	dcc00415 	stw	r19,16(sp)
   12c4c:	dc800315 	stw	r18,12(sp)
   12c50:	dfc00715 	stw	ra,28(sp)
   12c54:	2025883a 	mov	r18,r4
   12c58:	302b883a 	mov	r21,r6
   12c5c:	a4c00044 	addi	r19,r20,1
   12c60:	14c0030e 	bge	r2,r19,12c70 <__lshift+0x54>
   12c64:	29400044 	addi	r5,r5,1
   12c68:	1085883a 	add	r2,r2,r2
   12c6c:	003ffc06 	br	12c60 <_gp+0xffff16f4>
   12c70:	9009883a 	mov	r4,r18
   12c74:	00123900 	call	12390 <_Balloc>
   12c78:	10c00504 	addi	r3,r2,20
   12c7c:	180d883a 	mov	r6,r3
   12c80:	000b883a 	mov	r5,zero
   12c84:	2c00040e 	bge	r5,r16,12c98 <__lshift+0x7c>
   12c88:	30000015 	stw	zero,0(r6)
   12c8c:	29400044 	addi	r5,r5,1
   12c90:	31800104 	addi	r6,r6,4
   12c94:	003ffb06 	br	12c84 <_gp+0xffff1718>
   12c98:	8009883a 	mov	r4,r16
   12c9c:	8000010e 	bge	r16,zero,12ca4 <__lshift+0x88>
   12ca0:	0009883a 	mov	r4,zero
   12ca4:	89400417 	ldw	r5,16(r17)
   12ca8:	2109883a 	add	r4,r4,r4
   12cac:	2109883a 	add	r4,r4,r4
   12cb0:	294b883a 	add	r5,r5,r5
   12cb4:	1907883a 	add	r3,r3,r4
   12cb8:	294b883a 	add	r5,r5,r5
   12cbc:	89000504 	addi	r4,r17,20
   12cc0:	a98007cc 	andi	r6,r21,31
   12cc4:	214b883a 	add	r5,r4,r5
   12cc8:	30001126 	beq	r6,zero,12d10 <__lshift+0xf4>
   12ccc:	02000804 	movi	r8,32
   12cd0:	4191c83a 	sub	r8,r8,r6
   12cd4:	000f883a 	mov	r7,zero
   12cd8:	22400017 	ldw	r9,0(r4)
   12cdc:	21000104 	addi	r4,r4,4
   12ce0:	1815883a 	mov	r10,r3
   12ce4:	4992983a 	sll	r9,r9,r6
   12ce8:	18c00104 	addi	r3,r3,4
   12cec:	49ceb03a 	or	r7,r9,r7
   12cf0:	19ffff15 	stw	r7,-4(r3)
   12cf4:	21ffff17 	ldw	r7,-4(r4)
   12cf8:	3a0ed83a 	srl	r7,r7,r8
   12cfc:	217ff636 	bltu	r4,r5,12cd8 <_gp+0xffff176c>
   12d00:	51c00115 	stw	r7,4(r10)
   12d04:	38000726 	beq	r7,zero,12d24 <__lshift+0x108>
   12d08:	a4c00084 	addi	r19,r20,2
   12d0c:	00000506 	br	12d24 <__lshift+0x108>
   12d10:	21800017 	ldw	r6,0(r4)
   12d14:	21000104 	addi	r4,r4,4
   12d18:	18c00104 	addi	r3,r3,4
   12d1c:	19bfff15 	stw	r6,-4(r3)
   12d20:	217ffb36 	bltu	r4,r5,12d10 <_gp+0xffff17a4>
   12d24:	9cffffc4 	addi	r19,r19,-1
   12d28:	14c00415 	stw	r19,16(r2)
   12d2c:	880b883a 	mov	r5,r17
   12d30:	9009883a 	mov	r4,r18
   12d34:	d8800015 	stw	r2,0(sp)
   12d38:	00124740 	call	12474 <_Bfree>
   12d3c:	d8800017 	ldw	r2,0(sp)
   12d40:	dfc00717 	ldw	ra,28(sp)
   12d44:	dd400617 	ldw	r21,24(sp)
   12d48:	dd000517 	ldw	r20,20(sp)
   12d4c:	dcc00417 	ldw	r19,16(sp)
   12d50:	dc800317 	ldw	r18,12(sp)
   12d54:	dc400217 	ldw	r17,8(sp)
   12d58:	dc000117 	ldw	r16,4(sp)
   12d5c:	dec00804 	addi	sp,sp,32
   12d60:	f800283a 	ret

00012d64 <__mcmp>:
   12d64:	20800417 	ldw	r2,16(r4)
   12d68:	28c00417 	ldw	r3,16(r5)
   12d6c:	10c5c83a 	sub	r2,r2,r3
   12d70:	1000121e 	bne	r2,zero,12dbc <__mcmp+0x58>
   12d74:	18c7883a 	add	r3,r3,r3
   12d78:	18c7883a 	add	r3,r3,r3
   12d7c:	21000504 	addi	r4,r4,20
   12d80:	29400504 	addi	r5,r5,20
   12d84:	20c5883a 	add	r2,r4,r3
   12d88:	28cb883a 	add	r5,r5,r3
   12d8c:	10bfff04 	addi	r2,r2,-4
   12d90:	297fff04 	addi	r5,r5,-4
   12d94:	11800017 	ldw	r6,0(r2)
   12d98:	28c00017 	ldw	r3,0(r5)
   12d9c:	30c00326 	beq	r6,r3,12dac <__mcmp+0x48>
   12da0:	30c00536 	bltu	r6,r3,12db8 <__mcmp+0x54>
   12da4:	00800044 	movi	r2,1
   12da8:	f800283a 	ret
   12dac:	20bff736 	bltu	r4,r2,12d8c <_gp+0xffff1820>
   12db0:	0005883a 	mov	r2,zero
   12db4:	f800283a 	ret
   12db8:	00bfffc4 	movi	r2,-1
   12dbc:	f800283a 	ret

00012dc0 <__mdiff>:
   12dc0:	defffb04 	addi	sp,sp,-20
   12dc4:	dc000015 	stw	r16,0(sp)
   12dc8:	2821883a 	mov	r16,r5
   12dcc:	dcc00315 	stw	r19,12(sp)
   12dd0:	300b883a 	mov	r5,r6
   12dd4:	2027883a 	mov	r19,r4
   12dd8:	8009883a 	mov	r4,r16
   12ddc:	dc400115 	stw	r17,4(sp)
   12de0:	dfc00415 	stw	ra,16(sp)
   12de4:	dc800215 	stw	r18,8(sp)
   12de8:	3023883a 	mov	r17,r6
   12dec:	0012d640 	call	12d64 <__mcmp>
   12df0:	1000071e 	bne	r2,zero,12e10 <__mdiff+0x50>
   12df4:	000b883a 	mov	r5,zero
   12df8:	9809883a 	mov	r4,r19
   12dfc:	00123900 	call	12390 <_Balloc>
   12e00:	00c00044 	movi	r3,1
   12e04:	10c00415 	stw	r3,16(r2)
   12e08:	10000515 	stw	zero,20(r2)
   12e0c:	00004206 	br	12f18 <__mdiff+0x158>
   12e10:	1000050e 	bge	r2,zero,12e28 <__mdiff+0x68>
   12e14:	8005883a 	mov	r2,r16
   12e18:	04800044 	movi	r18,1
   12e1c:	8821883a 	mov	r16,r17
   12e20:	1023883a 	mov	r17,r2
   12e24:	00000106 	br	12e2c <__mdiff+0x6c>
   12e28:	0025883a 	mov	r18,zero
   12e2c:	81400117 	ldw	r5,4(r16)
   12e30:	9809883a 	mov	r4,r19
   12e34:	00123900 	call	12390 <_Balloc>
   12e38:	82000417 	ldw	r8,16(r16)
   12e3c:	88c00417 	ldw	r3,16(r17)
   12e40:	81400504 	addi	r5,r16,20
   12e44:	420f883a 	add	r7,r8,r8
   12e48:	18c7883a 	add	r3,r3,r3
   12e4c:	39cf883a 	add	r7,r7,r7
   12e50:	8a800504 	addi	r10,r17,20
   12e54:	18c7883a 	add	r3,r3,r3
   12e58:	14800315 	stw	r18,12(r2)
   12e5c:	29cf883a 	add	r7,r5,r7
   12e60:	50c9883a 	add	r4,r10,r3
   12e64:	13000504 	addi	r12,r2,20
   12e68:	0017883a 	mov	r11,zero
   12e6c:	29800017 	ldw	r6,0(r5)
   12e70:	52400017 	ldw	r9,0(r10)
   12e74:	52800104 	addi	r10,r10,4
   12e78:	30ffffcc 	andi	r3,r6,65535
   12e7c:	1ac7883a 	add	r3,r3,r11
   12e80:	300cd43a 	srli	r6,r6,16
   12e84:	4affffcc 	andi	r11,r9,65535
   12e88:	4812d43a 	srli	r9,r9,16
   12e8c:	1ac7c83a 	sub	r3,r3,r11
   12e90:	29400104 	addi	r5,r5,4
   12e94:	3253c83a 	sub	r9,r6,r9
   12e98:	180dd43a 	srai	r6,r3,16
   12e9c:	18ffffcc 	andi	r3,r3,65535
   12ea0:	498d883a 	add	r6,r9,r6
   12ea4:	3017d43a 	srai	r11,r6,16
   12ea8:	300c943a 	slli	r6,r6,16
   12eac:	62400104 	addi	r9,r12,4
   12eb0:	30c6b03a 	or	r3,r6,r3
   12eb4:	60c00015 	stw	r3,0(r12)
   12eb8:	4819883a 	mov	r12,r9
   12ebc:	513feb36 	bltu	r10,r4,12e6c <_gp+0xffff1900>
   12ec0:	4807883a 	mov	r3,r9
   12ec4:	29c00e2e 	bgeu	r5,r7,12f00 <__mdiff+0x140>
   12ec8:	29800017 	ldw	r6,0(r5)
   12ecc:	4a400104 	addi	r9,r9,4
   12ed0:	29400104 	addi	r5,r5,4
   12ed4:	313fffcc 	andi	r4,r6,65535
   12ed8:	22c9883a 	add	r4,r4,r11
   12edc:	2007d43a 	srai	r3,r4,16
   12ee0:	300cd43a 	srli	r6,r6,16
   12ee4:	213fffcc 	andi	r4,r4,65535
   12ee8:	30cd883a 	add	r6,r6,r3
   12eec:	3017d43a 	srai	r11,r6,16
   12ef0:	300c943a 	slli	r6,r6,16
   12ef4:	3108b03a 	or	r4,r6,r4
   12ef8:	493fff15 	stw	r4,-4(r9)
   12efc:	003ff006 	br	12ec0 <_gp+0xffff1954>
   12f00:	18ffff04 	addi	r3,r3,-4
   12f04:	19000017 	ldw	r4,0(r3)
   12f08:	2000021e 	bne	r4,zero,12f14 <__mdiff+0x154>
   12f0c:	423fffc4 	addi	r8,r8,-1
   12f10:	003ffb06 	br	12f00 <_gp+0xffff1994>
   12f14:	12000415 	stw	r8,16(r2)
   12f18:	dfc00417 	ldw	ra,16(sp)
   12f1c:	dcc00317 	ldw	r19,12(sp)
   12f20:	dc800217 	ldw	r18,8(sp)
   12f24:	dc400117 	ldw	r17,4(sp)
   12f28:	dc000017 	ldw	r16,0(sp)
   12f2c:	dec00504 	addi	sp,sp,20
   12f30:	f800283a 	ret

00012f34 <__ulp>:
   12f34:	295ffc2c 	andhi	r5,r5,32752
   12f38:	00bf3034 	movhi	r2,64704
   12f3c:	2887883a 	add	r3,r5,r2
   12f40:	00c00616 	blt	zero,r3,12f5c <__ulp+0x28>
   12f44:	00c7c83a 	sub	r3,zero,r3
   12f48:	1805d53a 	srai	r2,r3,20
   12f4c:	00c004c4 	movi	r3,19
   12f50:	18800416 	blt	r3,r2,12f64 <__ulp+0x30>
   12f54:	00c00234 	movhi	r3,8
   12f58:	1887d83a 	sra	r3,r3,r2
   12f5c:	0005883a 	mov	r2,zero
   12f60:	f800283a 	ret
   12f64:	117ffb04 	addi	r5,r2,-20
   12f68:	01000784 	movi	r4,30
   12f6c:	0007883a 	mov	r3,zero
   12f70:	00800044 	movi	r2,1
   12f74:	21400316 	blt	r4,r5,12f84 <__ulp+0x50>
   12f78:	010007c4 	movi	r4,31
   12f7c:	214bc83a 	sub	r5,r4,r5
   12f80:	1144983a 	sll	r2,r2,r5
   12f84:	f800283a 	ret

00012f88 <__b2d>:
   12f88:	defffa04 	addi	sp,sp,-24
   12f8c:	dc000015 	stw	r16,0(sp)
   12f90:	24000417 	ldw	r16,16(r4)
   12f94:	dcc00315 	stw	r19,12(sp)
   12f98:	24c00504 	addi	r19,r4,20
   12f9c:	8421883a 	add	r16,r16,r16
   12fa0:	8421883a 	add	r16,r16,r16
   12fa4:	9c21883a 	add	r16,r19,r16
   12fa8:	dc400115 	stw	r17,4(sp)
   12fac:	847fff17 	ldw	r17,-4(r16)
   12fb0:	dd000415 	stw	r20,16(sp)
   12fb4:	dc800215 	stw	r18,8(sp)
   12fb8:	8809883a 	mov	r4,r17
   12fbc:	2829883a 	mov	r20,r5
   12fc0:	dfc00515 	stw	ra,20(sp)
   12fc4:	001271c0 	call	1271c <__hi0bits>
   12fc8:	01000804 	movi	r4,32
   12fcc:	2087c83a 	sub	r3,r4,r2
   12fd0:	a0c00015 	stw	r3,0(r20)
   12fd4:	00c00284 	movi	r3,10
   12fd8:	84bfff04 	addi	r18,r16,-4
   12fdc:	18800d16 	blt	r3,r2,13014 <__b2d+0x8c>
   12fe0:	018002c4 	movi	r6,11
   12fe4:	308bc83a 	sub	r5,r6,r2
   12fe8:	8946d83a 	srl	r3,r17,r5
   12fec:	18cffc34 	orhi	r3,r3,16368
   12ff0:	9c80022e 	bgeu	r19,r18,12ffc <__b2d+0x74>
   12ff4:	81bffe17 	ldw	r6,-8(r16)
   12ff8:	00000106 	br	13000 <__b2d+0x78>
   12ffc:	000d883a 	mov	r6,zero
   13000:	10800544 	addi	r2,r2,21
   13004:	8884983a 	sll	r2,r17,r2
   13008:	314cd83a 	srl	r6,r6,r5
   1300c:	1184b03a 	or	r2,r2,r6
   13010:	00001606 	br	1306c <__b2d+0xe4>
   13014:	9c80032e 	bgeu	r19,r18,13024 <__b2d+0x9c>
   13018:	84bffe04 	addi	r18,r16,-8
   1301c:	817ffe17 	ldw	r5,-8(r16)
   13020:	00000106 	br	13028 <__b2d+0xa0>
   13024:	000b883a 	mov	r5,zero
   13028:	10bffd44 	addi	r2,r2,-11
   1302c:	10000d26 	beq	r2,zero,13064 <__b2d+0xdc>
   13030:	2089c83a 	sub	r4,r4,r2
   13034:	88a2983a 	sll	r17,r17,r2
   13038:	2906d83a 	srl	r3,r5,r4
   1303c:	8c4ffc34 	orhi	r17,r17,16368
   13040:	88c6b03a 	or	r3,r17,r3
   13044:	9c80022e 	bgeu	r19,r18,13050 <__b2d+0xc8>
   13048:	91bfff17 	ldw	r6,-4(r18)
   1304c:	00000106 	br	13054 <__b2d+0xcc>
   13050:	000d883a 	mov	r6,zero
   13054:	288a983a 	sll	r5,r5,r2
   13058:	3104d83a 	srl	r2,r6,r4
   1305c:	2884b03a 	or	r2,r5,r2
   13060:	00000206 	br	1306c <__b2d+0xe4>
   13064:	88cffc34 	orhi	r3,r17,16368
   13068:	2805883a 	mov	r2,r5
   1306c:	dfc00517 	ldw	ra,20(sp)
   13070:	dd000417 	ldw	r20,16(sp)
   13074:	dcc00317 	ldw	r19,12(sp)
   13078:	dc800217 	ldw	r18,8(sp)
   1307c:	dc400117 	ldw	r17,4(sp)
   13080:	dc000017 	ldw	r16,0(sp)
   13084:	dec00604 	addi	sp,sp,24
   13088:	f800283a 	ret

0001308c <__d2b>:
   1308c:	defff804 	addi	sp,sp,-32
   13090:	dc000215 	stw	r16,8(sp)
   13094:	2821883a 	mov	r16,r5
   13098:	01400044 	movi	r5,1
   1309c:	dd000615 	stw	r20,24(sp)
   130a0:	dcc00515 	stw	r19,20(sp)
   130a4:	dc800415 	stw	r18,16(sp)
   130a8:	dc400315 	stw	r17,12(sp)
   130ac:	dfc00715 	stw	ra,28(sp)
   130b0:	3023883a 	mov	r17,r6
   130b4:	3827883a 	mov	r19,r7
   130b8:	dc800817 	ldw	r18,32(sp)
   130bc:	00123900 	call	12390 <_Balloc>
   130c0:	1029883a 	mov	r20,r2
   130c4:	00800434 	movhi	r2,16
   130c8:	10bfffc4 	addi	r2,r2,-1
   130cc:	8884703a 	and	r2,r17,r2
   130d0:	8822907a 	slli	r17,r17,1
   130d4:	8822d57a 	srli	r17,r17,21
   130d8:	88000126 	beq	r17,zero,130e0 <__d2b+0x54>
   130dc:	10800434 	orhi	r2,r2,16
   130e0:	d8800015 	stw	r2,0(sp)
   130e4:	80001526 	beq	r16,zero,1313c <__d2b+0xb0>
   130e8:	d9000104 	addi	r4,sp,4
   130ec:	dc000115 	stw	r16,4(sp)
   130f0:	00127840 	call	12784 <__lo0bits>
   130f4:	d9000117 	ldw	r4,4(sp)
   130f8:	10000926 	beq	r2,zero,13120 <__d2b+0x94>
   130fc:	d9400017 	ldw	r5,0(sp)
   13100:	00c00804 	movi	r3,32
   13104:	1887c83a 	sub	r3,r3,r2
   13108:	28c6983a 	sll	r3,r5,r3
   1310c:	288ad83a 	srl	r5,r5,r2
   13110:	1906b03a 	or	r3,r3,r4
   13114:	a0c00515 	stw	r3,20(r20)
   13118:	d9400015 	stw	r5,0(sp)
   1311c:	00000106 	br	13124 <__d2b+0x98>
   13120:	a1000515 	stw	r4,20(r20)
   13124:	dc000017 	ldw	r16,0(sp)
   13128:	a4000615 	stw	r16,24(r20)
   1312c:	8020c03a 	cmpne	r16,r16,zero
   13130:	84000044 	addi	r16,r16,1
   13134:	a4000415 	stw	r16,16(r20)
   13138:	00000706 	br	13158 <__d2b+0xcc>
   1313c:	d809883a 	mov	r4,sp
   13140:	00127840 	call	12784 <__lo0bits>
   13144:	d8c00017 	ldw	r3,0(sp)
   13148:	04000044 	movi	r16,1
   1314c:	a4000415 	stw	r16,16(r20)
   13150:	a0c00515 	stw	r3,20(r20)
   13154:	10800804 	addi	r2,r2,32
   13158:	88000626 	beq	r17,zero,13174 <__d2b+0xe8>
   1315c:	8c7ef344 	addi	r17,r17,-1075
   13160:	88a3883a 	add	r17,r17,r2
   13164:	00c00d44 	movi	r3,53
   13168:	9c400015 	stw	r17,0(r19)
   1316c:	1885c83a 	sub	r2,r3,r2
   13170:	00000c06 	br	131a4 <__d2b+0x118>
   13174:	10bef384 	addi	r2,r2,-1074
   13178:	98800015 	stw	r2,0(r19)
   1317c:	00900034 	movhi	r2,16384
   13180:	10bfffc4 	addi	r2,r2,-1
   13184:	8085883a 	add	r2,r16,r2
   13188:	1085883a 	add	r2,r2,r2
   1318c:	1085883a 	add	r2,r2,r2
   13190:	a085883a 	add	r2,r20,r2
   13194:	11000517 	ldw	r4,20(r2)
   13198:	8020917a 	slli	r16,r16,5
   1319c:	001271c0 	call	1271c <__hi0bits>
   131a0:	8085c83a 	sub	r2,r16,r2
   131a4:	90800015 	stw	r2,0(r18)
   131a8:	a005883a 	mov	r2,r20
   131ac:	dfc00717 	ldw	ra,28(sp)
   131b0:	dd000617 	ldw	r20,24(sp)
   131b4:	dcc00517 	ldw	r19,20(sp)
   131b8:	dc800417 	ldw	r18,16(sp)
   131bc:	dc400317 	ldw	r17,12(sp)
   131c0:	dc000217 	ldw	r16,8(sp)
   131c4:	dec00804 	addi	sp,sp,32
   131c8:	f800283a 	ret

000131cc <__ratio>:
   131cc:	defff904 	addi	sp,sp,-28
   131d0:	dc400315 	stw	r17,12(sp)
   131d4:	2823883a 	mov	r17,r5
   131d8:	d9400104 	addi	r5,sp,4
   131dc:	dfc00615 	stw	ra,24(sp)
   131e0:	dcc00515 	stw	r19,20(sp)
   131e4:	dc800415 	stw	r18,16(sp)
   131e8:	2027883a 	mov	r19,r4
   131ec:	dc000215 	stw	r16,8(sp)
   131f0:	0012f880 	call	12f88 <__b2d>
   131f4:	d80b883a 	mov	r5,sp
   131f8:	8809883a 	mov	r4,r17
   131fc:	1025883a 	mov	r18,r2
   13200:	1821883a 	mov	r16,r3
   13204:	0012f880 	call	12f88 <__b2d>
   13208:	8a000417 	ldw	r8,16(r17)
   1320c:	99000417 	ldw	r4,16(r19)
   13210:	d9400117 	ldw	r5,4(sp)
   13214:	2209c83a 	sub	r4,r4,r8
   13218:	2010917a 	slli	r8,r4,5
   1321c:	d9000017 	ldw	r4,0(sp)
   13220:	2909c83a 	sub	r4,r5,r4
   13224:	4109883a 	add	r4,r8,r4
   13228:	0100030e 	bge	zero,r4,13238 <__ratio+0x6c>
   1322c:	2008953a 	slli	r4,r4,20
   13230:	2421883a 	add	r16,r4,r16
   13234:	00000206 	br	13240 <__ratio+0x74>
   13238:	2008953a 	slli	r4,r4,20
   1323c:	1907c83a 	sub	r3,r3,r4
   13240:	100d883a 	mov	r6,r2
   13244:	180f883a 	mov	r7,r3
   13248:	9009883a 	mov	r4,r18
   1324c:	800b883a 	mov	r5,r16
   13250:	00157b80 	call	157b8 <__divdf3>
   13254:	dfc00617 	ldw	ra,24(sp)
   13258:	dcc00517 	ldw	r19,20(sp)
   1325c:	dc800417 	ldw	r18,16(sp)
   13260:	dc400317 	ldw	r17,12(sp)
   13264:	dc000217 	ldw	r16,8(sp)
   13268:	dec00704 	addi	sp,sp,28
   1326c:	f800283a 	ret

00013270 <_mprec_log10>:
   13270:	defffe04 	addi	sp,sp,-8
   13274:	dc000015 	stw	r16,0(sp)
   13278:	dfc00115 	stw	ra,4(sp)
   1327c:	008005c4 	movi	r2,23
   13280:	2021883a 	mov	r16,r4
   13284:	11000716 	blt	r2,r4,132a4 <_mprec_log10+0x34>
   13288:	202090fa 	slli	r16,r4,3
   1328c:	008000b4 	movhi	r2,2
   13290:	10a46c04 	addi	r2,r2,-28240
   13294:	1421883a 	add	r16,r2,r16
   13298:	80800017 	ldw	r2,0(r16)
   1329c:	80c00117 	ldw	r3,4(r16)
   132a0:	00000906 	br	132c8 <_mprec_log10+0x58>
   132a4:	0005883a 	mov	r2,zero
   132a8:	00cffc34 	movhi	r3,16368
   132ac:	000d883a 	mov	r6,zero
   132b0:	01d00934 	movhi	r7,16420
   132b4:	1009883a 	mov	r4,r2
   132b8:	180b883a 	mov	r5,r3
   132bc:	843fffc4 	addi	r16,r16,-1
   132c0:	00163e00 	call	163e0 <__muldf3>
   132c4:	803ff91e 	bne	r16,zero,132ac <_gp+0xffff1d40>
   132c8:	dfc00117 	ldw	ra,4(sp)
   132cc:	dc000017 	ldw	r16,0(sp)
   132d0:	dec00204 	addi	sp,sp,8
   132d4:	f800283a 	ret

000132d8 <__copybits>:
   132d8:	297fffc4 	addi	r5,r5,-1
   132dc:	280bd17a 	srai	r5,r5,5
   132e0:	30800417 	ldw	r2,16(r6)
   132e4:	30c00504 	addi	r3,r6,20
   132e8:	29400044 	addi	r5,r5,1
   132ec:	294b883a 	add	r5,r5,r5
   132f0:	1085883a 	add	r2,r2,r2
   132f4:	294b883a 	add	r5,r5,r5
   132f8:	1085883a 	add	r2,r2,r2
   132fc:	214b883a 	add	r5,r4,r5
   13300:	1885883a 	add	r2,r3,r2
   13304:	1880052e 	bgeu	r3,r2,1331c <__copybits+0x44>
   13308:	19800017 	ldw	r6,0(r3)
   1330c:	21000104 	addi	r4,r4,4
   13310:	18c00104 	addi	r3,r3,4
   13314:	21bfff15 	stw	r6,-4(r4)
   13318:	003ffa06 	br	13304 <_gp+0xffff1d98>
   1331c:	2140032e 	bgeu	r4,r5,1332c <__copybits+0x54>
   13320:	20000015 	stw	zero,0(r4)
   13324:	21000104 	addi	r4,r4,4
   13328:	003ffc06 	br	1331c <_gp+0xffff1db0>
   1332c:	f800283a 	ret

00013330 <__any_on>:
   13330:	20c00417 	ldw	r3,16(r4)
   13334:	2805d17a 	srai	r2,r5,5
   13338:	21800504 	addi	r6,r4,20
   1333c:	18800b16 	blt	r3,r2,1336c <__any_on+0x3c>
   13340:	10c00b0e 	bge	r2,r3,13370 <__any_on+0x40>
   13344:	294007cc 	andi	r5,r5,31
   13348:	28000926 	beq	r5,zero,13370 <__any_on+0x40>
   1334c:	1087883a 	add	r3,r2,r2
   13350:	18c7883a 	add	r3,r3,r3
   13354:	30c7883a 	add	r3,r6,r3
   13358:	19000017 	ldw	r4,0(r3)
   1335c:	2146d83a 	srl	r3,r4,r5
   13360:	194a983a 	sll	r5,r3,r5
   13364:	21400c1e 	bne	r4,r5,13398 <__any_on+0x68>
   13368:	00000106 	br	13370 <__any_on+0x40>
   1336c:	1805883a 	mov	r2,r3
   13370:	1085883a 	add	r2,r2,r2
   13374:	1085883a 	add	r2,r2,r2
   13378:	3085883a 	add	r2,r6,r2
   1337c:	3080042e 	bgeu	r6,r2,13390 <__any_on+0x60>
   13380:	10bfff04 	addi	r2,r2,-4
   13384:	10c00017 	ldw	r3,0(r2)
   13388:	183ffc26 	beq	r3,zero,1337c <_gp+0xffff1e10>
   1338c:	00000206 	br	13398 <__any_on+0x68>
   13390:	0005883a 	mov	r2,zero
   13394:	f800283a 	ret
   13398:	00800044 	movi	r2,1
   1339c:	f800283a 	ret

000133a0 <_calloc_r>:
   133a0:	defffd04 	addi	sp,sp,-12
   133a4:	dc000015 	stw	r16,0(sp)
   133a8:	2021883a 	mov	r16,r4
   133ac:	2809883a 	mov	r4,r5
   133b0:	300b883a 	mov	r5,r6
   133b4:	dfc00215 	stw	ra,8(sp)
   133b8:	dc400115 	stw	r17,4(sp)
   133bc:	00110380 	call	11038 <__mulsi3>
   133c0:	8009883a 	mov	r4,r16
   133c4:	100b883a 	mov	r5,r2
   133c8:	1023883a 	mov	r17,r2
   133cc:	00134000 	call	13400 <_malloc_r>
   133d0:	1021883a 	mov	r16,r2
   133d4:	10000426 	beq	r2,zero,133e8 <_calloc_r+0x48>
   133d8:	880d883a 	mov	r6,r17
   133dc:	000b883a 	mov	r5,zero
   133e0:	1009883a 	mov	r4,r2
   133e4:	0014c380 	call	14c38 <memset>
   133e8:	8005883a 	mov	r2,r16
   133ec:	dfc00217 	ldw	ra,8(sp)
   133f0:	dc400117 	ldw	r17,4(sp)
   133f4:	dc000017 	ldw	r16,0(sp)
   133f8:	dec00304 	addi	sp,sp,12
   133fc:	f800283a 	ret

00013400 <_malloc_r>:
   13400:	defffb04 	addi	sp,sp,-20
   13404:	00bfff04 	movi	r2,-4
   13408:	dc400115 	stw	r17,4(sp)
   1340c:	2c4000c4 	addi	r17,r5,3
   13410:	88a2703a 	and	r17,r17,r2
   13414:	dc800215 	stw	r18,8(sp)
   13418:	dfc00415 	stw	ra,16(sp)
   1341c:	dcc00315 	stw	r19,12(sp)
   13420:	dc000015 	stw	r16,0(sp)
   13424:	8c400204 	addi	r17,r17,8
   13428:	00800304 	movi	r2,12
   1342c:	2025883a 	mov	r18,r4
   13430:	8880022e 	bgeu	r17,r2,1343c <_malloc_r+0x3c>
   13434:	1023883a 	mov	r17,r2
   13438:	00000506 	br	13450 <_malloc_r+0x50>
   1343c:	8800040e 	bge	r17,zero,13450 <_malloc_r+0x50>
   13440:	00800304 	movi	r2,12
   13444:	90800015 	stw	r2,0(r18)
   13448:	0005883a 	mov	r2,zero
   1344c:	00003b06 	br	1353c <_malloc_r+0x13c>
   13450:	897ffb36 	bltu	r17,r5,13440 <_gp+0xffff1ed4>
   13454:	008000b4 	movhi	r2,2
   13458:	10a62104 	addi	r2,r2,-26492
   1345c:	10c00017 	ldw	r3,0(r2)
   13460:	1009883a 	mov	r4,r2
   13464:	1821883a 	mov	r16,r3
   13468:	80000926 	beq	r16,zero,13490 <_malloc_r+0x90>
   1346c:	80800017 	ldw	r2,0(r16)
   13470:	1445c83a 	sub	r2,r2,r17
   13474:	10001516 	blt	r2,zero,134cc <_malloc_r+0xcc>
   13478:	014002c4 	movi	r5,11
   1347c:	28800d2e 	bgeu	r5,r2,134b4 <_malloc_r+0xb4>
   13480:	80800015 	stw	r2,0(r16)
   13484:	80a1883a 	add	r16,r16,r2
   13488:	84400015 	stw	r17,0(r16)
   1348c:	8000221e 	bne	r16,zero,13518 <_malloc_r+0x118>
   13490:	040000b4 	movhi	r16,2
   13494:	84262004 	addi	r16,r16,-26496
   13498:	80800017 	ldw	r2,0(r16)
   1349c:	10000e1e 	bne	r2,zero,134d8 <_malloc_r+0xd8>
   134a0:	000b883a 	mov	r5,zero
   134a4:	9009883a 	mov	r4,r18
   134a8:	00135fc0 	call	135fc <_sbrk_r>
   134ac:	80800015 	stw	r2,0(r16)
   134b0:	00000906 	br	134d8 <_malloc_r+0xd8>
   134b4:	80800117 	ldw	r2,4(r16)
   134b8:	1c00021e 	bne	r3,r16,134c4 <_malloc_r+0xc4>
   134bc:	20800015 	stw	r2,0(r4)
   134c0:	00001506 	br	13518 <_malloc_r+0x118>
   134c4:	18800115 	stw	r2,4(r3)
   134c8:	00001306 	br	13518 <_malloc_r+0x118>
   134cc:	8007883a 	mov	r3,r16
   134d0:	84000117 	ldw	r16,4(r16)
   134d4:	003fe406 	br	13468 <_gp+0xffff1efc>
   134d8:	880b883a 	mov	r5,r17
   134dc:	9009883a 	mov	r4,r18
   134e0:	00135fc0 	call	135fc <_sbrk_r>
   134e4:	04ffffc4 	movi	r19,-1
   134e8:	14ffd526 	beq	r2,r19,13440 <_gp+0xffff1ed4>
   134ec:	140000c4 	addi	r16,r2,3
   134f0:	00ffff04 	movi	r3,-4
   134f4:	80e0703a 	and	r16,r16,r3
   134f8:	1400021e 	bne	r2,r16,13504 <_malloc_r+0x104>
   134fc:	84400015 	stw	r17,0(r16)
   13500:	00000506 	br	13518 <_malloc_r+0x118>
   13504:	808bc83a 	sub	r5,r16,r2
   13508:	9009883a 	mov	r4,r18
   1350c:	00135fc0 	call	135fc <_sbrk_r>
   13510:	14fffa1e 	bne	r2,r19,134fc <_gp+0xffff1f90>
   13514:	003fca06 	br	13440 <_gp+0xffff1ed4>
   13518:	810002c4 	addi	r4,r16,11
   1351c:	00bffe04 	movi	r2,-8
   13520:	80c00104 	addi	r3,r16,4
   13524:	2084703a 	and	r2,r4,r2
   13528:	10c7c83a 	sub	r3,r2,r3
   1352c:	18000326 	beq	r3,zero,1353c <_malloc_r+0x13c>
   13530:	80e1883a 	add	r16,r16,r3
   13534:	00c7c83a 	sub	r3,zero,r3
   13538:	80c00015 	stw	r3,0(r16)
   1353c:	dfc00417 	ldw	ra,16(sp)
   13540:	dcc00317 	ldw	r19,12(sp)
   13544:	dc800217 	ldw	r18,8(sp)
   13548:	dc400117 	ldw	r17,4(sp)
   1354c:	dc000017 	ldw	r16,0(sp)
   13550:	dec00504 	addi	sp,sp,20
   13554:	f800283a 	ret

00013558 <_realloc_r>:
   13558:	2800021e 	bne	r5,zero,13564 <_realloc_r+0xc>
   1355c:	300b883a 	mov	r5,r6
   13560:	00134001 	jmpi	13400 <_malloc_r>
   13564:	defffb04 	addi	sp,sp,-20
   13568:	dc400115 	stw	r17,4(sp)
   1356c:	dc000015 	stw	r16,0(sp)
   13570:	dfc00415 	stw	ra,16(sp)
   13574:	dcc00315 	stw	r19,12(sp)
   13578:	dc800215 	stw	r18,8(sp)
   1357c:	3023883a 	mov	r17,r6
   13580:	2821883a 	mov	r16,r5
   13584:	3000021e 	bne	r6,zero,13590 <_realloc_r+0x38>
   13588:	0014c580 	call	14c58 <_free_r>
   1358c:	00001306 	br	135dc <_realloc_r+0x84>
   13590:	2025883a 	mov	r18,r4
   13594:	0014d3c0 	call	14d3c <_malloc_usable_size_r>
   13598:	14400e2e 	bgeu	r2,r17,135d4 <_realloc_r+0x7c>
   1359c:	880b883a 	mov	r5,r17
   135a0:	9009883a 	mov	r4,r18
   135a4:	00134000 	call	13400 <_malloc_r>
   135a8:	1027883a 	mov	r19,r2
   135ac:	10000b26 	beq	r2,zero,135dc <_realloc_r+0x84>
   135b0:	880d883a 	mov	r6,r17
   135b4:	800b883a 	mov	r5,r16
   135b8:	1009883a 	mov	r4,r2
   135bc:	0014c100 	call	14c10 <memcpy>
   135c0:	800b883a 	mov	r5,r16
   135c4:	9009883a 	mov	r4,r18
   135c8:	0014c580 	call	14c58 <_free_r>
   135cc:	9805883a 	mov	r2,r19
   135d0:	00000306 	br	135e0 <_realloc_r+0x88>
   135d4:	8005883a 	mov	r2,r16
   135d8:	00000106 	br	135e0 <_realloc_r+0x88>
   135dc:	0005883a 	mov	r2,zero
   135e0:	dfc00417 	ldw	ra,16(sp)
   135e4:	dcc00317 	ldw	r19,12(sp)
   135e8:	dc800217 	ldw	r18,8(sp)
   135ec:	dc400117 	ldw	r17,4(sp)
   135f0:	dc000017 	ldw	r16,0(sp)
   135f4:	dec00504 	addi	sp,sp,20
   135f8:	f800283a 	ret

000135fc <_sbrk_r>:
   135fc:	defffd04 	addi	sp,sp,-12
   13600:	dc000015 	stw	r16,0(sp)
   13604:	040000b4 	movhi	r16,2
   13608:	dc400115 	stw	r17,4(sp)
   1360c:	84262204 	addi	r16,r16,-26488
   13610:	2023883a 	mov	r17,r4
   13614:	2809883a 	mov	r4,r5
   13618:	dfc00215 	stw	ra,8(sp)
   1361c:	80000015 	stw	zero,0(r16)
   13620:	00178380 	call	17838 <sbrk>
   13624:	00ffffc4 	movi	r3,-1
   13628:	10c0031e 	bne	r2,r3,13638 <_sbrk_r+0x3c>
   1362c:	80c00017 	ldw	r3,0(r16)
   13630:	18000126 	beq	r3,zero,13638 <_sbrk_r+0x3c>
   13634:	88c00015 	stw	r3,0(r17)
   13638:	dfc00217 	ldw	ra,8(sp)
   1363c:	dc400117 	ldw	r17,4(sp)
   13640:	dc000017 	ldw	r16,0(sp)
   13644:	dec00304 	addi	sp,sp,12
   13648:	f800283a 	ret

0001364c <strcpy>:
   1364c:	2005883a 	mov	r2,r4
   13650:	200d883a 	mov	r6,r4
   13654:	28c00003 	ldbu	r3,0(r5)
   13658:	31800044 	addi	r6,r6,1
   1365c:	29400044 	addi	r5,r5,1
   13660:	30ffffc5 	stb	r3,-1(r6)
   13664:	18c03fcc 	andi	r3,r3,255
   13668:	18c0201c 	xori	r3,r3,128
   1366c:	18ffe004 	addi	r3,r3,-128
   13670:	183ff81e 	bne	r3,zero,13654 <_gp+0xffff20e8>
   13674:	f800283a 	ret

00013678 <_write_r>:
   13678:	defffd04 	addi	sp,sp,-12
   1367c:	dc000015 	stw	r16,0(sp)
   13680:	040000b4 	movhi	r16,2
   13684:	dc400115 	stw	r17,4(sp)
   13688:	84262204 	addi	r16,r16,-26488
   1368c:	2023883a 	mov	r17,r4
   13690:	2809883a 	mov	r4,r5
   13694:	300b883a 	mov	r5,r6
   13698:	380d883a 	mov	r6,r7
   1369c:	dfc00215 	stw	ra,8(sp)
   136a0:	80000015 	stw	zero,0(r16)
   136a4:	00179d80 	call	179d8 <write>
   136a8:	00ffffc4 	movi	r3,-1
   136ac:	10c0031e 	bne	r2,r3,136bc <_write_r+0x44>
   136b0:	80c00017 	ldw	r3,0(r16)
   136b4:	18000126 	beq	r3,zero,136bc <_write_r+0x44>
   136b8:	88c00015 	stw	r3,0(r17)
   136bc:	dfc00217 	ldw	ra,8(sp)
   136c0:	dc400117 	ldw	r17,4(sp)
   136c4:	dc000017 	ldw	r16,0(sp)
   136c8:	dec00304 	addi	sp,sp,12
   136cc:	f800283a 	ret

000136d0 <quorem>:
   136d0:	defff204 	addi	sp,sp,-56
   136d4:	dc000415 	stw	r16,16(sp)
   136d8:	20800417 	ldw	r2,16(r4)
   136dc:	2c000417 	ldw	r16,16(r5)
   136e0:	dfc00d15 	stw	ra,52(sp)
   136e4:	df000c15 	stw	fp,48(sp)
   136e8:	ddc00b15 	stw	r23,44(sp)
   136ec:	dd800a15 	stw	r22,40(sp)
   136f0:	dd400915 	stw	r21,36(sp)
   136f4:	dd000815 	stw	r20,32(sp)
   136f8:	dcc00715 	stw	r19,28(sp)
   136fc:	dc800615 	stw	r18,24(sp)
   13700:	dc400515 	stw	r17,20(sp)
   13704:	14006d16 	blt	r2,r16,138bc <quorem+0x1ec>
   13708:	843fffc4 	addi	r16,r16,-1
   1370c:	8423883a 	add	r17,r16,r16
   13710:	2cc00504 	addi	r19,r5,20
   13714:	8c63883a 	add	r17,r17,r17
   13718:	9c6b883a 	add	r21,r19,r17
   1371c:	25c00504 	addi	r23,r4,20
   13720:	2829883a 	mov	r20,r5
   13724:	bc63883a 	add	r17,r23,r17
   13728:	a9400017 	ldw	r5,0(r21)
   1372c:	2025883a 	mov	r18,r4
   13730:	89000017 	ldw	r4,0(r17)
   13734:	29400044 	addi	r5,r5,1
   13738:	0014e500 	call	14e50 <__udivsi3>
   1373c:	102d883a 	mov	r22,r2
   13740:	10003526 	beq	r2,zero,13818 <quorem+0x148>
   13744:	b80d883a 	mov	r6,r23
   13748:	9839883a 	mov	fp,r19
   1374c:	000f883a 	mov	r7,zero
   13750:	0011883a 	mov	r8,zero
   13754:	e2400017 	ldw	r9,0(fp)
   13758:	b00b883a 	mov	r5,r22
   1375c:	d9800315 	stw	r6,12(sp)
   13760:	493fffcc 	andi	r4,r9,65535
   13764:	da000215 	stw	r8,8(sp)
   13768:	d9c00015 	stw	r7,0(sp)
   1376c:	da400115 	stw	r9,4(sp)
   13770:	00110380 	call	11038 <__mulsi3>
   13774:	da400117 	ldw	r9,4(sp)
   13778:	d9c00017 	ldw	r7,0(sp)
   1377c:	b00b883a 	mov	r5,r22
   13780:	4808d43a 	srli	r4,r9,16
   13784:	11c7883a 	add	r3,r2,r7
   13788:	d8c00015 	stw	r3,0(sp)
   1378c:	00110380 	call	11038 <__mulsi3>
   13790:	d8c00017 	ldw	r3,0(sp)
   13794:	d9800317 	ldw	r6,12(sp)
   13798:	da000217 	ldw	r8,8(sp)
   1379c:	180ad43a 	srli	r5,r3,16
   137a0:	18ffffcc 	andi	r3,r3,65535
   137a4:	e7000104 	addi	fp,fp,4
   137a8:	1145883a 	add	r2,r2,r5
   137ac:	31400017 	ldw	r5,0(r6)
   137b0:	100ed43a 	srli	r7,r2,16
   137b4:	10bfffcc 	andi	r2,r2,65535
   137b8:	293fffcc 	andi	r4,r5,65535
   137bc:	2209883a 	add	r4,r4,r8
   137c0:	20c7c83a 	sub	r3,r4,r3
   137c4:	280ad43a 	srli	r5,r5,16
   137c8:	1809d43a 	srai	r4,r3,16
   137cc:	18ffffcc 	andi	r3,r3,65535
   137d0:	2885c83a 	sub	r2,r5,r2
   137d4:	1105883a 	add	r2,r2,r4
   137d8:	1011d43a 	srai	r8,r2,16
   137dc:	1004943a 	slli	r2,r2,16
   137e0:	31800104 	addi	r6,r6,4
   137e4:	10c6b03a 	or	r3,r2,r3
   137e8:	30ffff15 	stw	r3,-4(r6)
   137ec:	af3fd92e 	bgeu	r21,fp,13754 <_gp+0xffff21e8>
   137f0:	88800017 	ldw	r2,0(r17)
   137f4:	1000081e 	bne	r2,zero,13818 <quorem+0x148>
   137f8:	8c7fff04 	addi	r17,r17,-4
   137fc:	bc400236 	bltu	r23,r17,13808 <quorem+0x138>
   13800:	94000415 	stw	r16,16(r18)
   13804:	00000406 	br	13818 <quorem+0x148>
   13808:	88800017 	ldw	r2,0(r17)
   1380c:	103ffc1e 	bne	r2,zero,13800 <_gp+0xffff2294>
   13810:	843fffc4 	addi	r16,r16,-1
   13814:	003ff806 	br	137f8 <_gp+0xffff228c>
   13818:	a00b883a 	mov	r5,r20
   1381c:	9009883a 	mov	r4,r18
   13820:	0012d640 	call	12d64 <__mcmp>
   13824:	10002316 	blt	r2,zero,138b4 <quorem+0x1e4>
   13828:	b5800044 	addi	r22,r22,1
   1382c:	b80b883a 	mov	r5,r23
   13830:	000d883a 	mov	r6,zero
   13834:	28c00017 	ldw	r3,0(r5)
   13838:	99000017 	ldw	r4,0(r19)
   1383c:	9cc00104 	addi	r19,r19,4
   13840:	18bfffcc 	andi	r2,r3,65535
   13844:	118d883a 	add	r6,r2,r6
   13848:	1806d43a 	srli	r3,r3,16
   1384c:	20bfffcc 	andi	r2,r4,65535
   13850:	2008d43a 	srli	r4,r4,16
   13854:	3085c83a 	sub	r2,r6,r2
   13858:	29400104 	addi	r5,r5,4
   1385c:	1909c83a 	sub	r4,r3,r4
   13860:	1007d43a 	srai	r3,r2,16
   13864:	10bfffcc 	andi	r2,r2,65535
   13868:	20c7883a 	add	r3,r4,r3
   1386c:	180dd43a 	srai	r6,r3,16
   13870:	1806943a 	slli	r3,r3,16
   13874:	1884b03a 	or	r2,r3,r2
   13878:	28bfff15 	stw	r2,-4(r5)
   1387c:	acffed2e 	bgeu	r21,r19,13834 <_gp+0xffff22c8>
   13880:	8407883a 	add	r3,r16,r16
   13884:	18c7883a 	add	r3,r3,r3
   13888:	b8c7883a 	add	r3,r23,r3
   1388c:	18800017 	ldw	r2,0(r3)
   13890:	1000081e 	bne	r2,zero,138b4 <quorem+0x1e4>
   13894:	18ffff04 	addi	r3,r3,-4
   13898:	b8c00236 	bltu	r23,r3,138a4 <quorem+0x1d4>
   1389c:	94000415 	stw	r16,16(r18)
   138a0:	00000406 	br	138b4 <quorem+0x1e4>
   138a4:	18800017 	ldw	r2,0(r3)
   138a8:	103ffc1e 	bne	r2,zero,1389c <_gp+0xffff2330>
   138ac:	843fffc4 	addi	r16,r16,-1
   138b0:	003ff806 	br	13894 <_gp+0xffff2328>
   138b4:	b005883a 	mov	r2,r22
   138b8:	00000106 	br	138c0 <quorem+0x1f0>
   138bc:	0005883a 	mov	r2,zero
   138c0:	dfc00d17 	ldw	ra,52(sp)
   138c4:	df000c17 	ldw	fp,48(sp)
   138c8:	ddc00b17 	ldw	r23,44(sp)
   138cc:	dd800a17 	ldw	r22,40(sp)
   138d0:	dd400917 	ldw	r21,36(sp)
   138d4:	dd000817 	ldw	r20,32(sp)
   138d8:	dcc00717 	ldw	r19,28(sp)
   138dc:	dc800617 	ldw	r18,24(sp)
   138e0:	dc400517 	ldw	r17,20(sp)
   138e4:	dc000417 	ldw	r16,16(sp)
   138e8:	dec00e04 	addi	sp,sp,56
   138ec:	f800283a 	ret

000138f0 <_dtoa_r>:
   138f0:	20800417 	ldw	r2,16(r4)
   138f4:	deffe004 	addi	sp,sp,-128
   138f8:	dd001a15 	stw	r20,104(sp)
   138fc:	dcc01915 	stw	r19,100(sp)
   13900:	dc801815 	stw	r18,96(sp)
   13904:	dc401715 	stw	r17,92(sp)
   13908:	dc001615 	stw	r16,88(sp)
   1390c:	dfc01f15 	stw	ra,124(sp)
   13910:	df001e15 	stw	fp,120(sp)
   13914:	ddc01d15 	stw	r23,116(sp)
   13918:	dd801c15 	stw	r22,112(sp)
   1391c:	dd401b15 	stw	r21,108(sp)
   13920:	d9400915 	stw	r5,36(sp)
   13924:	d9c00815 	stw	r7,32(sp)
   13928:	2021883a 	mov	r16,r4
   1392c:	3029883a 	mov	r20,r6
   13930:	dc802217 	ldw	r18,136(sp)
   13934:	2823883a 	mov	r17,r5
   13938:	3027883a 	mov	r19,r6
   1393c:	1000071e 	bne	r2,zero,1395c <_dtoa_r+0x6c>
   13940:	01000404 	movi	r4,16
   13944:	0014be80 	call	14be8 <malloc>
   13948:	80800415 	stw	r2,16(r16)
   1394c:	10000115 	stw	zero,4(r2)
   13950:	10000215 	stw	zero,8(r2)
   13954:	10000015 	stw	zero,0(r2)
   13958:	10000315 	stw	zero,12(r2)
   1395c:	80800417 	ldw	r2,16(r16)
   13960:	11400017 	ldw	r5,0(r2)
   13964:	28000926 	beq	r5,zero,1398c <_dtoa_r+0x9c>
   13968:	10c00117 	ldw	r3,4(r2)
   1396c:	00800044 	movi	r2,1
   13970:	8009883a 	mov	r4,r16
   13974:	10c4983a 	sll	r2,r2,r3
   13978:	28c00115 	stw	r3,4(r5)
   1397c:	28800215 	stw	r2,8(r5)
   13980:	00124740 	call	12474 <_Bfree>
   13984:	80800417 	ldw	r2,16(r16)
   13988:	10000015 	stw	zero,0(r2)
   1398c:	a000060e 	bge	r20,zero,139a8 <_dtoa_r+0xb8>
   13990:	04e00034 	movhi	r19,32768
   13994:	00800044 	movi	r2,1
   13998:	9cffffc4 	addi	r19,r19,-1
   1399c:	90800015 	stw	r2,0(r18)
   139a0:	a4e6703a 	and	r19,r20,r19
   139a4:	00000106 	br	139ac <_dtoa_r+0xbc>
   139a8:	90000015 	stw	zero,0(r18)
   139ac:	989ffc2c 	andhi	r2,r19,32752
   139b0:	00dffc34 	movhi	r3,32752
   139b4:	10c0181e 	bne	r2,r3,13a18 <_dtoa_r+0x128>
   139b8:	d8c02117 	ldw	r3,132(sp)
   139bc:	d9000917 	ldw	r4,36(sp)
   139c0:	0089c3c4 	movi	r2,9999
   139c4:	18800015 	stw	r2,0(r3)
   139c8:	2000071e 	bne	r4,zero,139e8 <_dtoa_r+0xf8>
   139cc:	00800434 	movhi	r2,16
   139d0:	10bfffc4 	addi	r2,r2,-1
   139d4:	98a6703a 	and	r19,r19,r2
   139d8:	9800031e 	bne	r19,zero,139e8 <_dtoa_r+0xf8>
   139dc:	008000b4 	movhi	r2,2
   139e0:	10a49e04 	addi	r2,r2,-28040
   139e4:	00000206 	br	139f0 <_dtoa_r+0x100>
   139e8:	008000b4 	movhi	r2,2
   139ec:	10a4a104 	addi	r2,r2,-28028
   139f0:	d8c02317 	ldw	r3,140(sp)
   139f4:	18047026 	beq	r3,zero,14bb8 <_dtoa_r+0x12c8>
   139f8:	10c000c7 	ldb	r3,3(r2)
   139fc:	18000226 	beq	r3,zero,13a08 <_dtoa_r+0x118>
   13a00:	10c00204 	addi	r3,r2,8
   13a04:	00000106 	br	13a0c <_dtoa_r+0x11c>
   13a08:	10c000c4 	addi	r3,r2,3
   13a0c:	d9002317 	ldw	r4,140(sp)
   13a10:	20c00015 	stw	r3,0(r4)
   13a14:	00046806 	br	14bb8 <_dtoa_r+0x12c8>
   13a18:	d9000917 	ldw	r4,36(sp)
   13a1c:	000d883a 	mov	r6,zero
   13a20:	000f883a 	mov	r7,zero
   13a24:	980b883a 	mov	r5,r19
   13a28:	00161880 	call	16188 <__eqdf2>
   13a2c:	10000a1e 	bne	r2,zero,13a58 <_dtoa_r+0x168>
   13a30:	d8c02117 	ldw	r3,132(sp)
   13a34:	d9002317 	ldw	r4,140(sp)
   13a38:	00800044 	movi	r2,1
   13a3c:	18800015 	stw	r2,0(r3)
   13a40:	20044926 	beq	r4,zero,14b68 <_dtoa_r+0x1278>
   13a44:	008000b4 	movhi	r2,2
   13a48:	10a4a244 	addi	r2,r2,-28023
   13a4c:	20800015 	stw	r2,0(r4)
   13a50:	10bfffc4 	addi	r2,r2,-1
   13a54:	00045806 	br	14bb8 <_dtoa_r+0x12c8>
   13a58:	d9400917 	ldw	r5,36(sp)
   13a5c:	d8800204 	addi	r2,sp,8
   13a60:	9824d53a 	srli	r18,r19,20
   13a64:	d8800015 	stw	r2,0(sp)
   13a68:	d9c00104 	addi	r7,sp,4
   13a6c:	980d883a 	mov	r6,r19
   13a70:	8009883a 	mov	r4,r16
   13a74:	001308c0 	call	1308c <__d2b>
   13a78:	d8800315 	stw	r2,12(sp)
   13a7c:	9481ffcc 	andi	r18,r18,2047
   13a80:	dd000217 	ldw	r20,8(sp)
   13a84:	90000826 	beq	r18,zero,13aa8 <_dtoa_r+0x1b8>
   13a88:	01400434 	movhi	r5,16
   13a8c:	297fffc4 	addi	r5,r5,-1
   13a90:	994a703a 	and	r5,r19,r5
   13a94:	d8800917 	ldw	r2,36(sp)
   13a98:	294ffc34 	orhi	r5,r5,16368
   13a9c:	94bf0044 	addi	r18,r18,-1023
   13aa0:	d8001015 	stw	zero,64(sp)
   13aa4:	00001606 	br	13b00 <_dtoa_r+0x210>
   13aa8:	dc800117 	ldw	r18,4(sp)
   13aac:	00800804 	movi	r2,32
   13ab0:	a4a5883a 	add	r18,r20,r18
   13ab4:	91010c84 	addi	r4,r18,1074
   13ab8:	1100080e 	bge	r2,r4,13adc <_dtoa_r+0x1ec>
   13abc:	d8800917 	ldw	r2,36(sp)
   13ac0:	91410484 	addi	r5,r18,1042
   13ac4:	00c01004 	movi	r3,64
   13ac8:	114ad83a 	srl	r5,r2,r5
   13acc:	1905c83a 	sub	r2,r3,r4
   13ad0:	9884983a 	sll	r2,r19,r2
   13ad4:	2888b03a 	or	r4,r5,r2
   13ad8:	00000306 	br	13ae8 <_dtoa_r+0x1f8>
   13adc:	d8c00917 	ldw	r3,36(sp)
   13ae0:	1109c83a 	sub	r4,r2,r4
   13ae4:	1908983a 	sll	r4,r3,r4
   13ae8:	0010e1c0 	call	10e1c <__floatunsidf>
   13aec:	017f8434 	movhi	r5,65040
   13af0:	01000044 	movi	r4,1
   13af4:	194b883a 	add	r5,r3,r5
   13af8:	94bfffc4 	addi	r18,r18,-1
   13afc:	d9001015 	stw	r4,64(sp)
   13b00:	000d883a 	mov	r6,zero
   13b04:	01cffe34 	movhi	r7,16376
   13b08:	1009883a 	mov	r4,r2
   13b0c:	0016c4c0 	call	16c4c <__subdf3>
   13b10:	0198dbf4 	movhi	r6,25455
   13b14:	01cff4f4 	movhi	r7,16339
   13b18:	3190d844 	addi	r6,r6,17249
   13b1c:	39e1e9c4 	addi	r7,r7,-30809
   13b20:	1009883a 	mov	r4,r2
   13b24:	180b883a 	mov	r5,r3
   13b28:	00163e00 	call	163e0 <__muldf3>
   13b2c:	01a2d874 	movhi	r6,35681
   13b30:	01cff1f4 	movhi	r7,16327
   13b34:	31b22cc4 	addi	r6,r6,-14157
   13b38:	39e28a04 	addi	r7,r7,-30168
   13b3c:	180b883a 	mov	r5,r3
   13b40:	1009883a 	mov	r4,r2
   13b44:	0014f0c0 	call	14f0c <__adddf3>
   13b48:	9009883a 	mov	r4,r18
   13b4c:	102d883a 	mov	r22,r2
   13b50:	182b883a 	mov	r21,r3
   13b54:	00175c80 	call	175c8 <__floatsidf>
   13b58:	019427f4 	movhi	r6,20639
   13b5c:	01cff4f4 	movhi	r7,16339
   13b60:	319e7ec4 	addi	r6,r6,31227
   13b64:	39d104c4 	addi	r7,r7,17427
   13b68:	1009883a 	mov	r4,r2
   13b6c:	180b883a 	mov	r5,r3
   13b70:	00163e00 	call	163e0 <__muldf3>
   13b74:	100d883a 	mov	r6,r2
   13b78:	180f883a 	mov	r7,r3
   13b7c:	b009883a 	mov	r4,r22
   13b80:	a80b883a 	mov	r5,r21
   13b84:	0014f0c0 	call	14f0c <__adddf3>
   13b88:	1009883a 	mov	r4,r2
   13b8c:	180b883a 	mov	r5,r3
   13b90:	102d883a 	mov	r22,r2
   13b94:	182b883a 	mov	r21,r3
   13b98:	00175480 	call	17548 <__fixdfsi>
   13b9c:	000d883a 	mov	r6,zero
   13ba0:	000f883a 	mov	r7,zero
   13ba4:	b009883a 	mov	r4,r22
   13ba8:	a80b883a 	mov	r5,r21
   13bac:	1039883a 	mov	fp,r2
   13bb0:	00162ec0 	call	162ec <__ledf2>
   13bb4:	1000090e 	bge	r2,zero,13bdc <_dtoa_r+0x2ec>
   13bb8:	e009883a 	mov	r4,fp
   13bbc:	00175c80 	call	175c8 <__floatsidf>
   13bc0:	100d883a 	mov	r6,r2
   13bc4:	180f883a 	mov	r7,r3
   13bc8:	b009883a 	mov	r4,r22
   13bcc:	a80b883a 	mov	r5,r21
   13bd0:	00161880 	call	16188 <__eqdf2>
   13bd4:	10000126 	beq	r2,zero,13bdc <_dtoa_r+0x2ec>
   13bd8:	e73fffc4 	addi	fp,fp,-1
   13bdc:	00800584 	movi	r2,22
   13be0:	17000c36 	bltu	r2,fp,13c14 <_dtoa_r+0x324>
   13be4:	e00490fa 	slli	r2,fp,3
   13be8:	00c000b4 	movhi	r3,2
   13bec:	18e46c04 	addi	r3,r3,-28240
   13bf0:	1885883a 	add	r2,r3,r2
   13bf4:	d9800917 	ldw	r6,36(sp)
   13bf8:	11000017 	ldw	r4,0(r2)
   13bfc:	11400117 	ldw	r5,4(r2)
   13c00:	980f883a 	mov	r7,r19
   13c04:	00162100 	call	16210 <__gedf2>
   13c08:	0080050e 	bge	zero,r2,13c20 <_dtoa_r+0x330>
   13c0c:	e73fffc4 	addi	fp,fp,-1
   13c10:	00000306 	br	13c20 <_dtoa_r+0x330>
   13c14:	00800044 	movi	r2,1
   13c18:	d8800f15 	stw	r2,60(sp)
   13c1c:	00000106 	br	13c24 <_dtoa_r+0x334>
   13c20:	d8000f15 	stw	zero,60(sp)
   13c24:	a4afc83a 	sub	r23,r20,r18
   13c28:	bdffffc4 	addi	r23,r23,-1
   13c2c:	b800040e 	bge	r23,zero,13c40 <_dtoa_r+0x350>
   13c30:	05efc83a 	sub	r23,zero,r23
   13c34:	ddc00615 	stw	r23,24(sp)
   13c38:	002f883a 	mov	r23,zero
   13c3c:	00000106 	br	13c44 <_dtoa_r+0x354>
   13c40:	d8000615 	stw	zero,24(sp)
   13c44:	e0000416 	blt	fp,zero,13c58 <_dtoa_r+0x368>
   13c48:	bf2f883a 	add	r23,r23,fp
   13c4c:	df000d15 	stw	fp,52(sp)
   13c50:	d8000a15 	stw	zero,40(sp)
   13c54:	00000606 	br	13c70 <_dtoa_r+0x380>
   13c58:	d8c00617 	ldw	r3,24(sp)
   13c5c:	0709c83a 	sub	r4,zero,fp
   13c60:	d9000a15 	stw	r4,40(sp)
   13c64:	1f07c83a 	sub	r3,r3,fp
   13c68:	d8c00615 	stw	r3,24(sp)
   13c6c:	d8000d15 	stw	zero,52(sp)
   13c70:	d8c00817 	ldw	r3,32(sp)
   13c74:	00800244 	movi	r2,9
   13c78:	10c02736 	bltu	r2,r3,13d18 <_dtoa_r+0x428>
   13c7c:	00800144 	movi	r2,5
   13c80:	10c0040e 	bge	r2,r3,13c94 <_dtoa_r+0x3a4>
   13c84:	18ffff04 	addi	r3,r3,-4
   13c88:	d8c00815 	stw	r3,32(sp)
   13c8c:	0025883a 	mov	r18,zero
   13c90:	00000106 	br	13c98 <_dtoa_r+0x3a8>
   13c94:	04800044 	movi	r18,1
   13c98:	d9000817 	ldw	r4,32(sp)
   13c9c:	00c000c4 	movi	r3,3
   13ca0:	20c01426 	beq	r4,r3,13cf4 <_dtoa_r+0x404>
   13ca4:	19000416 	blt	r3,r4,13cb8 <_dtoa_r+0x3c8>
   13ca8:	00800084 	movi	r2,2
   13cac:	2080211e 	bne	r4,r2,13d34 <_dtoa_r+0x444>
   13cb0:	d8000b15 	stw	zero,44(sp)
   13cb4:	00000906 	br	13cdc <_dtoa_r+0x3ec>
   13cb8:	d9000817 	ldw	r4,32(sp)
   13cbc:	00c00104 	movi	r3,4
   13cc0:	20c00426 	beq	r4,r3,13cd4 <_dtoa_r+0x3e4>
   13cc4:	20801b1e 	bne	r4,r2,13d34 <_dtoa_r+0x444>
   13cc8:	00c00044 	movi	r3,1
   13ccc:	d8c00b15 	stw	r3,44(sp)
   13cd0:	00000906 	br	13cf8 <_dtoa_r+0x408>
   13cd4:	00800044 	movi	r2,1
   13cd8:	d8800b15 	stw	r2,44(sp)
   13cdc:	d9002017 	ldw	r4,128(sp)
   13ce0:	01001c0e 	bge	zero,r4,13d54 <_dtoa_r+0x464>
   13ce4:	d9000515 	stw	r4,20(sp)
   13ce8:	d9000415 	stw	r4,16(sp)
   13cec:	2005883a 	mov	r2,r4
   13cf0:	00001f06 	br	13d70 <_dtoa_r+0x480>
   13cf4:	d8000b15 	stw	zero,44(sp)
   13cf8:	d8802017 	ldw	r2,128(sp)
   13cfc:	e085883a 	add	r2,fp,r2
   13d00:	10c00044 	addi	r3,r2,1
   13d04:	d8800515 	stw	r2,20(sp)
   13d08:	d8c00415 	stw	r3,16(sp)
   13d0c:	00c0170e 	bge	zero,r3,13d6c <_dtoa_r+0x47c>
   13d10:	1805883a 	mov	r2,r3
   13d14:	00001606 	br	13d70 <_dtoa_r+0x480>
   13d18:	013fffc4 	movi	r4,-1
   13d1c:	04800044 	movi	r18,1
   13d20:	d8000815 	stw	zero,32(sp)
   13d24:	dc800b15 	stw	r18,44(sp)
   13d28:	d9000515 	stw	r4,20(sp)
   13d2c:	d9000415 	stw	r4,16(sp)
   13d30:	00000506 	br	13d48 <_dtoa_r+0x458>
   13d34:	00ffffc4 	movi	r3,-1
   13d38:	00800044 	movi	r2,1
   13d3c:	d8800b15 	stw	r2,44(sp)
   13d40:	d8c00515 	stw	r3,20(sp)
   13d44:	d8c00415 	stw	r3,16(sp)
   13d48:	00800484 	movi	r2,18
   13d4c:	d8002015 	stw	zero,128(sp)
   13d50:	00000706 	br	13d70 <_dtoa_r+0x480>
   13d54:	01000044 	movi	r4,1
   13d58:	d9000515 	stw	r4,20(sp)
   13d5c:	d9000415 	stw	r4,16(sp)
   13d60:	2005883a 	mov	r2,r4
   13d64:	d9002015 	stw	r4,128(sp)
   13d68:	00000106 	br	13d70 <_dtoa_r+0x480>
   13d6c:	00800044 	movi	r2,1
   13d70:	85000417 	ldw	r20,16(r16)
   13d74:	00c00104 	movi	r3,4
   13d78:	a0000115 	stw	zero,4(r20)
   13d7c:	19000504 	addi	r4,r3,20
   13d80:	a1400117 	ldw	r5,4(r20)
   13d84:	11000436 	bltu	r2,r4,13d98 <_dtoa_r+0x4a8>
   13d88:	29400044 	addi	r5,r5,1
   13d8c:	a1400115 	stw	r5,4(r20)
   13d90:	18c7883a 	add	r3,r3,r3
   13d94:	003ff906 	br	13d7c <_gp+0xffff2810>
   13d98:	8009883a 	mov	r4,r16
   13d9c:	00123900 	call	12390 <_Balloc>
   13da0:	a0800015 	stw	r2,0(r20)
   13da4:	80800417 	ldw	r2,16(r16)
   13da8:	d8c00417 	ldw	r3,16(sp)
   13dac:	10800017 	ldw	r2,0(r2)
   13db0:	d8800715 	stw	r2,28(sp)
   13db4:	00800384 	movi	r2,14
   13db8:	10c13436 	bltu	r2,r3,1428c <_dtoa_r+0x99c>
   13dbc:	90013326 	beq	r18,zero,1428c <_dtoa_r+0x99c>
   13dc0:	dcc01315 	stw	r19,76(sp)
   13dc4:	0700330e 	bge	zero,fp,13e94 <_dtoa_r+0x5a4>
   13dc8:	e08003cc 	andi	r2,fp,15
   13dcc:	100490fa 	slli	r2,r2,3
   13dd0:	00c000b4 	movhi	r3,2
   13dd4:	e029d13a 	srai	r20,fp,4
   13dd8:	18e46c04 	addi	r3,r3,-28240
   13ddc:	1885883a 	add	r2,r3,r2
   13de0:	15800017 	ldw	r22,0(r2)
   13de4:	15400117 	ldw	r21,4(r2)
   13de8:	a080040c 	andi	r2,r20,16
   13dec:	10000c26 	beq	r2,zero,13e20 <_dtoa_r+0x530>
   13df0:	008000b4 	movhi	r2,2
   13df4:	10a46204 	addi	r2,r2,-28280
   13df8:	11800817 	ldw	r6,32(r2)
   13dfc:	11c00917 	ldw	r7,36(r2)
   13e00:	d9000917 	ldw	r4,36(sp)
   13e04:	980b883a 	mov	r5,r19
   13e08:	a50003cc 	andi	r20,r20,15
   13e0c:	00157b80 	call	157b8 <__divdf3>
   13e10:	1023883a 	mov	r17,r2
   13e14:	1827883a 	mov	r19,r3
   13e18:	048000c4 	movi	r18,3
   13e1c:	00000106 	br	13e24 <_dtoa_r+0x534>
   13e20:	04800084 	movi	r18,2
   13e24:	024000b4 	movhi	r9,2
   13e28:	0011883a 	mov	r8,zero
   13e2c:	4a646204 	addi	r9,r9,-28280
   13e30:	a0001226 	beq	r20,zero,13e7c <_dtoa_r+0x58c>
   13e34:	a080004c 	andi	r2,r20,1
   13e38:	10000d26 	beq	r2,zero,13e70 <_dtoa_r+0x580>
   13e3c:	4245883a 	add	r2,r8,r9
   13e40:	11800017 	ldw	r6,0(r2)
   13e44:	11c00117 	ldw	r7,4(r2)
   13e48:	b009883a 	mov	r4,r22
   13e4c:	a80b883a 	mov	r5,r21
   13e50:	da001415 	stw	r8,80(sp)
   13e54:	da401515 	stw	r9,84(sp)
   13e58:	00163e00 	call	163e0 <__muldf3>
   13e5c:	da401517 	ldw	r9,84(sp)
   13e60:	da001417 	ldw	r8,80(sp)
   13e64:	94800044 	addi	r18,r18,1
   13e68:	102d883a 	mov	r22,r2
   13e6c:	182b883a 	mov	r21,r3
   13e70:	a029d07a 	srai	r20,r20,1
   13e74:	42000204 	addi	r8,r8,8
   13e78:	003fed06 	br	13e30 <_gp+0xffff28c4>
   13e7c:	b00d883a 	mov	r6,r22
   13e80:	a80f883a 	mov	r7,r21
   13e84:	8809883a 	mov	r4,r17
   13e88:	980b883a 	mov	r5,r19
   13e8c:	00157b80 	call	157b8 <__divdf3>
   13e90:	00002406 	br	13f24 <_dtoa_r+0x634>
   13e94:	0729c83a 	sub	r20,zero,fp
   13e98:	a0002526 	beq	r20,zero,13f30 <_dtoa_r+0x640>
   13e9c:	a08003cc 	andi	r2,r20,15
   13ea0:	100490fa 	slli	r2,r2,3
   13ea4:	00c000b4 	movhi	r3,2
   13ea8:	18e46c04 	addi	r3,r3,-28240
   13eac:	1885883a 	add	r2,r3,r2
   13eb0:	d9000917 	ldw	r4,36(sp)
   13eb4:	11800017 	ldw	r6,0(r2)
   13eb8:	11c00117 	ldw	r7,4(r2)
   13ebc:	980b883a 	mov	r5,r19
   13ec0:	a029d13a 	srai	r20,r20,4
   13ec4:	00163e00 	call	163e0 <__muldf3>
   13ec8:	058000b4 	movhi	r22,2
   13ecc:	1023883a 	mov	r17,r2
   13ed0:	1827883a 	mov	r19,r3
   13ed4:	002b883a 	mov	r21,zero
   13ed8:	0009883a 	mov	r4,zero
   13edc:	04800084 	movi	r18,2
   13ee0:	b5a46204 	addi	r22,r22,-28280
   13ee4:	a0000d26 	beq	r20,zero,13f1c <_dtoa_r+0x62c>
   13ee8:	a140004c 	andi	r5,r20,1
   13eec:	28000826 	beq	r5,zero,13f10 <_dtoa_r+0x620>
   13ef0:	ad89883a 	add	r4,r21,r22
   13ef4:	21800017 	ldw	r6,0(r4)
   13ef8:	21c00117 	ldw	r7,4(r4)
   13efc:	180b883a 	mov	r5,r3
   13f00:	1009883a 	mov	r4,r2
   13f04:	00163e00 	call	163e0 <__muldf3>
   13f08:	94800044 	addi	r18,r18,1
   13f0c:	01000044 	movi	r4,1
   13f10:	a029d07a 	srai	r20,r20,1
   13f14:	ad400204 	addi	r21,r21,8
   13f18:	003ff206 	br	13ee4 <_gp+0xffff2978>
   13f1c:	21003fcc 	andi	r4,r4,255
   13f20:	20000426 	beq	r4,zero,13f34 <_dtoa_r+0x644>
   13f24:	1023883a 	mov	r17,r2
   13f28:	1827883a 	mov	r19,r3
   13f2c:	00000106 	br	13f34 <_dtoa_r+0x644>
   13f30:	04800084 	movi	r18,2
   13f34:	d9000f17 	ldw	r4,60(sp)
   13f38:	20001626 	beq	r4,zero,13f94 <_dtoa_r+0x6a4>
   13f3c:	000d883a 	mov	r6,zero
   13f40:	01cffc34 	movhi	r7,16368
   13f44:	8809883a 	mov	r4,r17
   13f48:	980b883a 	mov	r5,r19
   13f4c:	00162ec0 	call	162ec <__ledf2>
   13f50:	1000140e 	bge	r2,zero,13fa4 <_dtoa_r+0x6b4>
   13f54:	d8800417 	ldw	r2,16(sp)
   13f58:	10001626 	beq	r2,zero,13fb4 <_dtoa_r+0x6c4>
   13f5c:	d8c00517 	ldw	r3,20(sp)
   13f60:	00c0c90e 	bge	zero,r3,14288 <_dtoa_r+0x998>
   13f64:	8809883a 	mov	r4,r17
   13f68:	980b883a 	mov	r5,r19
   13f6c:	000d883a 	mov	r6,zero
   13f70:	01d00934 	movhi	r7,16420
   13f74:	00163e00 	call	163e0 <__muldf3>
   13f78:	d9000517 	ldw	r4,20(sp)
   13f7c:	e57fffc4 	addi	r21,fp,-1
   13f80:	1023883a 	mov	r17,r2
   13f84:	1827883a 	mov	r19,r3
   13f88:	94800044 	addi	r18,r18,1
   13f8c:	d9000c15 	stw	r4,48(sp)
   13f90:	00000a06 	br	13fbc <_dtoa_r+0x6cc>
   13f94:	d8800417 	ldw	r2,16(sp)
   13f98:	e02b883a 	mov	r21,fp
   13f9c:	d8800c15 	stw	r2,48(sp)
   13fa0:	00000606 	br	13fbc <_dtoa_r+0x6cc>
   13fa4:	d8c00417 	ldw	r3,16(sp)
   13fa8:	e02b883a 	mov	r21,fp
   13fac:	d8c00c15 	stw	r3,48(sp)
   13fb0:	00000206 	br	13fbc <_dtoa_r+0x6cc>
   13fb4:	e02b883a 	mov	r21,fp
   13fb8:	d8000c15 	stw	zero,48(sp)
   13fbc:	9009883a 	mov	r4,r18
   13fc0:	dc400e15 	stw	r17,56(sp)
   13fc4:	00175c80 	call	175c8 <__floatsidf>
   13fc8:	880d883a 	mov	r6,r17
   13fcc:	980f883a 	mov	r7,r19
   13fd0:	1009883a 	mov	r4,r2
   13fd4:	180b883a 	mov	r5,r3
   13fd8:	00163e00 	call	163e0 <__muldf3>
   13fdc:	1009883a 	mov	r4,r2
   13fe0:	000d883a 	mov	r6,zero
   13fe4:	01d00734 	movhi	r7,16412
   13fe8:	180b883a 	mov	r5,r3
   13fec:	0014f0c0 	call	14f0c <__adddf3>
   13ff0:	d9000c17 	ldw	r4,48(sp)
   13ff4:	04bf3034 	movhi	r18,64704
   13ff8:	9829883a 	mov	r20,r19
   13ffc:	102d883a 	mov	r22,r2
   14000:	1ca5883a 	add	r18,r3,r18
   14004:	2000141e 	bne	r4,zero,14058 <_dtoa_r+0x768>
   14008:	8809883a 	mov	r4,r17
   1400c:	980b883a 	mov	r5,r19
   14010:	000d883a 	mov	r6,zero
   14014:	01d00534 	movhi	r7,16404
   14018:	0016c4c0 	call	16c4c <__subdf3>
   1401c:	b00d883a 	mov	r6,r22
   14020:	900f883a 	mov	r7,r18
   14024:	1009883a 	mov	r4,r2
   14028:	180b883a 	mov	r5,r3
   1402c:	1027883a 	mov	r19,r2
   14030:	1823883a 	mov	r17,r3
   14034:	00162100 	call	16210 <__gedf2>
   14038:	0081dc16 	blt	zero,r2,147ac <_dtoa_r+0xebc>
   1403c:	91e0003c 	xorhi	r7,r18,32768
   14040:	b00d883a 	mov	r6,r22
   14044:	9809883a 	mov	r4,r19
   14048:	880b883a 	mov	r5,r17
   1404c:	00162ec0 	call	162ec <__ledf2>
   14050:	1001d016 	blt	r2,zero,14794 <_dtoa_r+0xea4>
   14054:	00008c06 	br	14288 <_dtoa_r+0x998>
   14058:	d9000c17 	ldw	r4,48(sp)
   1405c:	008000b4 	movhi	r2,2
   14060:	10a46c04 	addi	r2,r2,-28240
   14064:	20ffffc4 	addi	r3,r4,-1
   14068:	180690fa 	slli	r3,r3,3
   1406c:	d9000b17 	ldw	r4,44(sp)
   14070:	10c5883a 	add	r2,r2,r3
   14074:	20004526 	beq	r4,zero,1418c <_dtoa_r+0x89c>
   14078:	11800017 	ldw	r6,0(r2)
   1407c:	11c00117 	ldw	r7,4(r2)
   14080:	0009883a 	mov	r4,zero
   14084:	014ff834 	movhi	r5,16352
   14088:	00157b80 	call	157b8 <__divdf3>
   1408c:	900f883a 	mov	r7,r18
   14090:	b00d883a 	mov	r6,r22
   14094:	1009883a 	mov	r4,r2
   14098:	180b883a 	mov	r5,r3
   1409c:	0016c4c0 	call	16c4c <__subdf3>
   140a0:	da400717 	ldw	r9,28(sp)
   140a4:	1025883a 	mov	r18,r2
   140a8:	1823883a 	mov	r17,r3
   140ac:	d9000e17 	ldw	r4,56(sp)
   140b0:	a00b883a 	mov	r5,r20
   140b4:	da401515 	stw	r9,84(sp)
   140b8:	00175480 	call	17548 <__fixdfsi>
   140bc:	1009883a 	mov	r4,r2
   140c0:	d8801415 	stw	r2,80(sp)
   140c4:	00175c80 	call	175c8 <__floatsidf>
   140c8:	d9000e17 	ldw	r4,56(sp)
   140cc:	a00b883a 	mov	r5,r20
   140d0:	100d883a 	mov	r6,r2
   140d4:	180f883a 	mov	r7,r3
   140d8:	0016c4c0 	call	16c4c <__subdf3>
   140dc:	da001417 	ldw	r8,80(sp)
   140e0:	da401517 	ldw	r9,84(sp)
   140e4:	900d883a 	mov	r6,r18
   140e8:	42000c04 	addi	r8,r8,48
   140ec:	4a000005 	stb	r8,0(r9)
   140f0:	880f883a 	mov	r7,r17
   140f4:	1009883a 	mov	r4,r2
   140f8:	180b883a 	mov	r5,r3
   140fc:	1029883a 	mov	r20,r2
   14100:	1827883a 	mov	r19,r3
   14104:	4d800044 	addi	r22,r9,1
   14108:	00162ec0 	call	162ec <__ledf2>
   1410c:	10028a16 	blt	r2,zero,14b38 <_dtoa_r+0x1248>
   14110:	a00d883a 	mov	r6,r20
   14114:	980f883a 	mov	r7,r19
   14118:	0009883a 	mov	r4,zero
   1411c:	014ffc34 	movhi	r5,16368
   14120:	0016c4c0 	call	16c4c <__subdf3>
   14124:	900d883a 	mov	r6,r18
   14128:	880f883a 	mov	r7,r17
   1412c:	1009883a 	mov	r4,r2
   14130:	180b883a 	mov	r5,r3
   14134:	00162ec0 	call	162ec <__ledf2>
   14138:	1000a716 	blt	r2,zero,143d8 <_dtoa_r+0xae8>
   1413c:	d8c00717 	ldw	r3,28(sp)
   14140:	d9000c17 	ldw	r4,48(sp)
   14144:	b0c5c83a 	sub	r2,r22,r3
   14148:	11004f0e 	bge	r2,r4,14288 <_dtoa_r+0x998>
   1414c:	9009883a 	mov	r4,r18
   14150:	880b883a 	mov	r5,r17
   14154:	000d883a 	mov	r6,zero
   14158:	01d00934 	movhi	r7,16420
   1415c:	00163e00 	call	163e0 <__muldf3>
   14160:	a009883a 	mov	r4,r20
   14164:	000d883a 	mov	r6,zero
   14168:	01d00934 	movhi	r7,16420
   1416c:	980b883a 	mov	r5,r19
   14170:	1025883a 	mov	r18,r2
   14174:	1823883a 	mov	r17,r3
   14178:	00163e00 	call	163e0 <__muldf3>
   1417c:	d8800e15 	stw	r2,56(sp)
   14180:	1829883a 	mov	r20,r3
   14184:	b013883a 	mov	r9,r22
   14188:	003fc806 	br	140ac <_gp+0xffff2b40>
   1418c:	11000017 	ldw	r4,0(r2)
   14190:	11400117 	ldw	r5,4(r2)
   14194:	b00d883a 	mov	r6,r22
   14198:	900f883a 	mov	r7,r18
   1419c:	00163e00 	call	163e0 <__muldf3>
   141a0:	d8801115 	stw	r2,68(sp)
   141a4:	dcc00717 	ldw	r19,28(sp)
   141a8:	d8800c17 	ldw	r2,48(sp)
   141ac:	d8c01215 	stw	r3,72(sp)
   141b0:	98ad883a 	add	r22,r19,r2
   141b4:	d9000e17 	ldw	r4,56(sp)
   141b8:	a00b883a 	mov	r5,r20
   141bc:	9cc00044 	addi	r19,r19,1
   141c0:	00175480 	call	17548 <__fixdfsi>
   141c4:	1009883a 	mov	r4,r2
   141c8:	d8801515 	stw	r2,84(sp)
   141cc:	00175c80 	call	175c8 <__floatsidf>
   141d0:	d9000e17 	ldw	r4,56(sp)
   141d4:	100d883a 	mov	r6,r2
   141d8:	180f883a 	mov	r7,r3
   141dc:	a00b883a 	mov	r5,r20
   141e0:	0016c4c0 	call	16c4c <__subdf3>
   141e4:	da401517 	ldw	r9,84(sp)
   141e8:	1025883a 	mov	r18,r2
   141ec:	1823883a 	mov	r17,r3
   141f0:	4a400c04 	addi	r9,r9,48
   141f4:	9a7fffc5 	stb	r9,-1(r19)
   141f8:	000d883a 	mov	r6,zero
   141fc:	b4c01b1e 	bne	r22,r19,1426c <_dtoa_r+0x97c>
   14200:	d9001117 	ldw	r4,68(sp)
   14204:	d9401217 	ldw	r5,72(sp)
   14208:	01cff834 	movhi	r7,16352
   1420c:	0014f0c0 	call	14f0c <__adddf3>
   14210:	100d883a 	mov	r6,r2
   14214:	180f883a 	mov	r7,r3
   14218:	9009883a 	mov	r4,r18
   1421c:	880b883a 	mov	r5,r17
   14220:	00162100 	call	16210 <__gedf2>
   14224:	00806c16 	blt	zero,r2,143d8 <_dtoa_r+0xae8>
   14228:	d9801117 	ldw	r6,68(sp)
   1422c:	d9c01217 	ldw	r7,72(sp)
   14230:	0009883a 	mov	r4,zero
   14234:	014ff834 	movhi	r5,16352
   14238:	0016c4c0 	call	16c4c <__subdf3>
   1423c:	100d883a 	mov	r6,r2
   14240:	180f883a 	mov	r7,r3
   14244:	9009883a 	mov	r4,r18
   14248:	880b883a 	mov	r5,r17
   1424c:	00162ec0 	call	162ec <__ledf2>
   14250:	10000d0e 	bge	r2,zero,14288 <_dtoa_r+0x998>
   14254:	00c00c04 	movi	r3,48
   14258:	b0bfffc4 	addi	r2,r22,-1
   1425c:	11000007 	ldb	r4,0(r2)
   14260:	20c2351e 	bne	r4,r3,14b38 <_dtoa_r+0x1248>
   14264:	102d883a 	mov	r22,r2
   14268:	003ffb06 	br	14258 <_gp+0xffff2cec>
   1426c:	01d00934 	movhi	r7,16420
   14270:	1009883a 	mov	r4,r2
   14274:	180b883a 	mov	r5,r3
   14278:	00163e00 	call	163e0 <__muldf3>
   1427c:	d8800e15 	stw	r2,56(sp)
   14280:	1829883a 	mov	r20,r3
   14284:	003fcb06 	br	141b4 <_gp+0xffff2c48>
   14288:	dcc01317 	ldw	r19,76(sp)
   1428c:	d8800117 	ldw	r2,4(sp)
   14290:	10007116 	blt	r2,zero,14458 <_dtoa_r+0xb68>
   14294:	00c00384 	movi	r3,14
   14298:	1f006f16 	blt	r3,fp,14458 <_dtoa_r+0xb68>
   1429c:	e00490fa 	slli	r2,fp,3
   142a0:	00c000b4 	movhi	r3,2
   142a4:	18e46c04 	addi	r3,r3,-28240
   142a8:	1885883a 	add	r2,r3,r2
   142ac:	d8c02017 	ldw	r3,128(sp)
   142b0:	14400017 	ldw	r17,0(r2)
   142b4:	14800117 	ldw	r18,4(r2)
   142b8:	1800110e 	bge	r3,zero,14300 <_dtoa_r+0xa10>
   142bc:	d9000417 	ldw	r4,16(sp)
   142c0:	01000f16 	blt	zero,r4,14300 <_dtoa_r+0xa10>
   142c4:	2001331e 	bne	r4,zero,14794 <_dtoa_r+0xea4>
   142c8:	8809883a 	mov	r4,r17
   142cc:	900b883a 	mov	r5,r18
   142d0:	000d883a 	mov	r6,zero
   142d4:	01d00534 	movhi	r7,16404
   142d8:	00163e00 	call	163e0 <__muldf3>
   142dc:	d9800917 	ldw	r6,36(sp)
   142e0:	980f883a 	mov	r7,r19
   142e4:	1009883a 	mov	r4,r2
   142e8:	180b883a 	mov	r5,r3
   142ec:	00162100 	call	16210 <__gedf2>
   142f0:	0025883a 	mov	r18,zero
   142f4:	0023883a 	mov	r17,zero
   142f8:	1001280e 	bge	r2,zero,1479c <_dtoa_r+0xeac>
   142fc:	00012e06 	br	147b8 <_dtoa_r+0xec8>
   14300:	d8c00417 	ldw	r3,16(sp)
   14304:	dd400717 	ldw	r21,28(sp)
   14308:	ddc00917 	ldw	r23,36(sp)
   1430c:	18bfffc4 	addi	r2,r3,-1
   14310:	a885883a 	add	r2,r21,r2
   14314:	d8800415 	stw	r2,16(sp)
   14318:	880d883a 	mov	r6,r17
   1431c:	900f883a 	mov	r7,r18
   14320:	b809883a 	mov	r4,r23
   14324:	980b883a 	mov	r5,r19
   14328:	00157b80 	call	157b8 <__divdf3>
   1432c:	180b883a 	mov	r5,r3
   14330:	1009883a 	mov	r4,r2
   14334:	00175480 	call	17548 <__fixdfsi>
   14338:	1009883a 	mov	r4,r2
   1433c:	1029883a 	mov	r20,r2
   14340:	00175c80 	call	175c8 <__floatsidf>
   14344:	880d883a 	mov	r6,r17
   14348:	900f883a 	mov	r7,r18
   1434c:	1009883a 	mov	r4,r2
   14350:	180b883a 	mov	r5,r3
   14354:	00163e00 	call	163e0 <__muldf3>
   14358:	b809883a 	mov	r4,r23
   1435c:	100d883a 	mov	r6,r2
   14360:	180f883a 	mov	r7,r3
   14364:	980b883a 	mov	r5,r19
   14368:	0016c4c0 	call	16c4c <__subdf3>
   1436c:	a1000c04 	addi	r4,r20,48
   14370:	a9000005 	stb	r4,0(r21)
   14374:	d9000417 	ldw	r4,16(sp)
   14378:	ad800044 	addi	r22,r21,1
   1437c:	a900271e 	bne	r21,r4,1441c <_dtoa_r+0xb2c>
   14380:	100d883a 	mov	r6,r2
   14384:	180f883a 	mov	r7,r3
   14388:	1009883a 	mov	r4,r2
   1438c:	180b883a 	mov	r5,r3
   14390:	0014f0c0 	call	14f0c <__adddf3>
   14394:	100d883a 	mov	r6,r2
   14398:	180f883a 	mov	r7,r3
   1439c:	8809883a 	mov	r4,r17
   143a0:	900b883a 	mov	r5,r18
   143a4:	102b883a 	mov	r21,r2
   143a8:	1827883a 	mov	r19,r3
   143ac:	00162ec0 	call	162ec <__ledf2>
   143b0:	10000a16 	blt	r2,zero,143dc <_dtoa_r+0xaec>
   143b4:	a80d883a 	mov	r6,r21
   143b8:	980f883a 	mov	r7,r19
   143bc:	8809883a 	mov	r4,r17
   143c0:	900b883a 	mov	r5,r18
   143c4:	00161880 	call	16188 <__eqdf2>
   143c8:	1001dc1e 	bne	r2,zero,14b3c <_dtoa_r+0x124c>
   143cc:	a500004c 	andi	r20,r20,1
   143d0:	a000021e 	bne	r20,zero,143dc <_dtoa_r+0xaec>
   143d4:	0001d906 	br	14b3c <_dtoa_r+0x124c>
   143d8:	a839883a 	mov	fp,r21
   143dc:	00c00e44 	movi	r3,57
   143e0:	b0bfffc4 	addi	r2,r22,-1
   143e4:	11000007 	ldb	r4,0(r2)
   143e8:	20c0081e 	bne	r4,r3,1440c <_dtoa_r+0xb1c>
   143ec:	d9000717 	ldw	r4,28(sp)
   143f0:	2080041e 	bne	r4,r2,14404 <_dtoa_r+0xb14>
   143f4:	00c00c04 	movi	r3,48
   143f8:	e7000044 	addi	fp,fp,1
   143fc:	20c00005 	stb	r3,0(r4)
   14400:	00000206 	br	1440c <_dtoa_r+0xb1c>
   14404:	102d883a 	mov	r22,r2
   14408:	003ff506 	br	143e0 <_gp+0xffff2e74>
   1440c:	10c00003 	ldbu	r3,0(r2)
   14410:	18c00044 	addi	r3,r3,1
   14414:	10c00005 	stb	r3,0(r2)
   14418:	0001c806 	br	14b3c <_dtoa_r+0x124c>
   1441c:	000d883a 	mov	r6,zero
   14420:	01d00934 	movhi	r7,16420
   14424:	1009883a 	mov	r4,r2
   14428:	180b883a 	mov	r5,r3
   1442c:	00163e00 	call	163e0 <__muldf3>
   14430:	000d883a 	mov	r6,zero
   14434:	000f883a 	mov	r7,zero
   14438:	1009883a 	mov	r4,r2
   1443c:	180b883a 	mov	r5,r3
   14440:	102f883a 	mov	r23,r2
   14444:	1827883a 	mov	r19,r3
   14448:	b02b883a 	mov	r21,r22
   1444c:	00161880 	call	16188 <__eqdf2>
   14450:	103fb11e 	bne	r2,zero,14318 <_gp+0xffff2dac>
   14454:	0001b906 	br	14b3c <_dtoa_r+0x124c>
   14458:	d8c00b17 	ldw	r3,44(sp)
   1445c:	18002b26 	beq	r3,zero,1450c <_dtoa_r+0xc1c>
   14460:	d9000817 	ldw	r4,32(sp)
   14464:	00c00044 	movi	r3,1
   14468:	19000a16 	blt	r3,r4,14494 <_dtoa_r+0xba4>
   1446c:	d8c01017 	ldw	r3,64(sp)
   14470:	18000226 	beq	r3,zero,1447c <_dtoa_r+0xb8c>
   14474:	10810cc4 	addi	r2,r2,1075
   14478:	00000306 	br	14488 <_dtoa_r+0xb98>
   1447c:	d8c00217 	ldw	r3,8(sp)
   14480:	00800d84 	movi	r2,54
   14484:	10c5c83a 	sub	r2,r2,r3
   14488:	dc800a17 	ldw	r18,40(sp)
   1448c:	dd000617 	ldw	r20,24(sp)
   14490:	00001506 	br	144e8 <_dtoa_r+0xbf8>
   14494:	d9000417 	ldw	r4,16(sp)
   14498:	d8800a17 	ldw	r2,40(sp)
   1449c:	24bfffc4 	addi	r18,r4,-1
   144a0:	14800216 	blt	r2,r18,144ac <_dtoa_r+0xbbc>
   144a4:	14a5c83a 	sub	r18,r2,r18
   144a8:	00000706 	br	144c8 <_dtoa_r+0xbd8>
   144ac:	d8c00a17 	ldw	r3,40(sp)
   144b0:	d9000d17 	ldw	r4,52(sp)
   144b4:	dc800a15 	stw	r18,40(sp)
   144b8:	90cdc83a 	sub	r6,r18,r3
   144bc:	2189883a 	add	r4,r4,r6
   144c0:	d9000d15 	stw	r4,52(sp)
   144c4:	0025883a 	mov	r18,zero
   144c8:	d8800417 	ldw	r2,16(sp)
   144cc:	1000040e 	bge	r2,zero,144e0 <_dtoa_r+0xbf0>
   144d0:	d8c00617 	ldw	r3,24(sp)
   144d4:	18a9c83a 	sub	r20,r3,r2
   144d8:	0005883a 	mov	r2,zero
   144dc:	00000206 	br	144e8 <_dtoa_r+0xbf8>
   144e0:	dd000617 	ldw	r20,24(sp)
   144e4:	d8800417 	ldw	r2,16(sp)
   144e8:	d9000617 	ldw	r4,24(sp)
   144ec:	01400044 	movi	r5,1
   144f0:	b8af883a 	add	r23,r23,r2
   144f4:	2089883a 	add	r4,r4,r2
   144f8:	d9000615 	stw	r4,24(sp)
   144fc:	8009883a 	mov	r4,r16
   14500:	00128340 	call	12834 <__i2b>
   14504:	1023883a 	mov	r17,r2
   14508:	00000306 	br	14518 <_dtoa_r+0xc28>
   1450c:	dc800a17 	ldw	r18,40(sp)
   14510:	dd000617 	ldw	r20,24(sp)
   14514:	0023883a 	mov	r17,zero
   14518:	a0000926 	beq	r20,zero,14540 <_dtoa_r+0xc50>
   1451c:	05c0080e 	bge	zero,r23,14540 <_dtoa_r+0xc50>
   14520:	a005883a 	mov	r2,r20
   14524:	bd00010e 	bge	r23,r20,1452c <_dtoa_r+0xc3c>
   14528:	b805883a 	mov	r2,r23
   1452c:	d8c00617 	ldw	r3,24(sp)
   14530:	a0a9c83a 	sub	r20,r20,r2
   14534:	b8afc83a 	sub	r23,r23,r2
   14538:	1887c83a 	sub	r3,r3,r2
   1453c:	d8c00615 	stw	r3,24(sp)
   14540:	d9000a17 	ldw	r4,40(sp)
   14544:	01001a0e 	bge	zero,r4,145b0 <_dtoa_r+0xcc0>
   14548:	d8800b17 	ldw	r2,44(sp)
   1454c:	10001326 	beq	r2,zero,1459c <_dtoa_r+0xcac>
   14550:	90000e26 	beq	r18,zero,1458c <_dtoa_r+0xc9c>
   14554:	880b883a 	mov	r5,r17
   14558:	900d883a 	mov	r6,r18
   1455c:	8009883a 	mov	r4,r16
   14560:	0012ae80 	call	12ae8 <__pow5mult>
   14564:	d9800317 	ldw	r6,12(sp)
   14568:	100b883a 	mov	r5,r2
   1456c:	8009883a 	mov	r4,r16
   14570:	1023883a 	mov	r17,r2
   14574:	00128700 	call	12870 <__multiply>
   14578:	d9400317 	ldw	r5,12(sp)
   1457c:	102b883a 	mov	r21,r2
   14580:	8009883a 	mov	r4,r16
   14584:	00124740 	call	12474 <_Bfree>
   14588:	dd400315 	stw	r21,12(sp)
   1458c:	d8c00a17 	ldw	r3,40(sp)
   14590:	1c8dc83a 	sub	r6,r3,r18
   14594:	30000626 	beq	r6,zero,145b0 <_dtoa_r+0xcc0>
   14598:	00000106 	br	145a0 <_dtoa_r+0xcb0>
   1459c:	d9800a17 	ldw	r6,40(sp)
   145a0:	d9400317 	ldw	r5,12(sp)
   145a4:	8009883a 	mov	r4,r16
   145a8:	0012ae80 	call	12ae8 <__pow5mult>
   145ac:	d8800315 	stw	r2,12(sp)
   145b0:	05400044 	movi	r21,1
   145b4:	8009883a 	mov	r4,r16
   145b8:	a80b883a 	mov	r5,r21
   145bc:	00128340 	call	12834 <__i2b>
   145c0:	d9000d17 	ldw	r4,52(sp)
   145c4:	1025883a 	mov	r18,r2
   145c8:	20016c26 	beq	r4,zero,14b7c <_dtoa_r+0x128c>
   145cc:	200d883a 	mov	r6,r4
   145d0:	100b883a 	mov	r5,r2
   145d4:	8009883a 	mov	r4,r16
   145d8:	0012ae80 	call	12ae8 <__pow5mult>
   145dc:	1025883a 	mov	r18,r2
   145e0:	d8800817 	ldw	r2,32(sp)
   145e4:	a8801216 	blt	r21,r2,14630 <_dtoa_r+0xd40>
   145e8:	d8c00917 	ldw	r3,36(sp)
   145ec:	18000c1e 	bne	r3,zero,14620 <_dtoa_r+0xd30>
   145f0:	00800434 	movhi	r2,16
   145f4:	10bfffc4 	addi	r2,r2,-1
   145f8:	9884703a 	and	r2,r19,r2
   145fc:	1000081e 	bne	r2,zero,14620 <_dtoa_r+0xd30>
   14600:	9cdffc2c 	andhi	r19,r19,32752
   14604:	98000626 	beq	r19,zero,14620 <_dtoa_r+0xd30>
   14608:	d9000617 	ldw	r4,24(sp)
   1460c:	bdc00044 	addi	r23,r23,1
   14610:	04c00044 	movi	r19,1
   14614:	21000044 	addi	r4,r4,1
   14618:	d9000615 	stw	r4,24(sp)
   1461c:	00000106 	br	14624 <_dtoa_r+0xd34>
   14620:	0027883a 	mov	r19,zero
   14624:	d8800d17 	ldw	r2,52(sp)
   14628:	10000c26 	beq	r2,zero,1465c <_dtoa_r+0xd6c>
   1462c:	00000106 	br	14634 <_dtoa_r+0xd44>
   14630:	0027883a 	mov	r19,zero
   14634:	90800417 	ldw	r2,16(r18)
   14638:	05400804 	movi	r21,32
   1463c:	10800104 	addi	r2,r2,4
   14640:	1085883a 	add	r2,r2,r2
   14644:	1085883a 	add	r2,r2,r2
   14648:	9085883a 	add	r2,r18,r2
   1464c:	11000017 	ldw	r4,0(r2)
   14650:	001271c0 	call	1271c <__hi0bits>
   14654:	a885c83a 	sub	r2,r21,r2
   14658:	00000106 	br	14660 <_dtoa_r+0xd70>
   1465c:	00800044 	movi	r2,1
   14660:	15eb883a 	add	r21,r2,r23
   14664:	a88007cc 	andi	r2,r21,31
   14668:	10000c26 	beq	r2,zero,1469c <_dtoa_r+0xdac>
   1466c:	00c00804 	movi	r3,32
   14670:	1887c83a 	sub	r3,r3,r2
   14674:	01000104 	movi	r4,4
   14678:	20c0060e 	bge	r4,r3,14694 <_dtoa_r+0xda4>
   1467c:	00c00704 	movi	r3,28
   14680:	1885c83a 	sub	r2,r3,r2
   14684:	d8c00617 	ldw	r3,24(sp)
   14688:	1887883a 	add	r3,r3,r2
   1468c:	d8c00615 	stw	r3,24(sp)
   14690:	00000606 	br	146ac <_dtoa_r+0xdbc>
   14694:	19000726 	beq	r3,r4,146b4 <_dtoa_r+0xdc4>
   14698:	1805883a 	mov	r2,r3
   1469c:	d9000617 	ldw	r4,24(sp)
   146a0:	10800704 	addi	r2,r2,28
   146a4:	2089883a 	add	r4,r4,r2
   146a8:	d9000615 	stw	r4,24(sp)
   146ac:	a0a9883a 	add	r20,r20,r2
   146b0:	b8af883a 	add	r23,r23,r2
   146b4:	d8800617 	ldw	r2,24(sp)
   146b8:	0080050e 	bge	zero,r2,146d0 <_dtoa_r+0xde0>
   146bc:	d9400317 	ldw	r5,12(sp)
   146c0:	100d883a 	mov	r6,r2
   146c4:	8009883a 	mov	r4,r16
   146c8:	0012c1c0 	call	12c1c <__lshift>
   146cc:	d8800315 	stw	r2,12(sp)
   146d0:	05c0050e 	bge	zero,r23,146e8 <_dtoa_r+0xdf8>
   146d4:	900b883a 	mov	r5,r18
   146d8:	b80d883a 	mov	r6,r23
   146dc:	8009883a 	mov	r4,r16
   146e0:	0012c1c0 	call	12c1c <__lshift>
   146e4:	1025883a 	mov	r18,r2
   146e8:	d8c00f17 	ldw	r3,60(sp)
   146ec:	18001626 	beq	r3,zero,14748 <_dtoa_r+0xe58>
   146f0:	d9000317 	ldw	r4,12(sp)
   146f4:	900b883a 	mov	r5,r18
   146f8:	0012d640 	call	12d64 <__mcmp>
   146fc:	1000120e 	bge	r2,zero,14748 <_dtoa_r+0xe58>
   14700:	d9400317 	ldw	r5,12(sp)
   14704:	8009883a 	mov	r4,r16
   14708:	000f883a 	mov	r7,zero
   1470c:	01800284 	movi	r6,10
   14710:	00124ec0 	call	124ec <__multadd>
   14714:	d9000b17 	ldw	r4,44(sp)
   14718:	d8800315 	stw	r2,12(sp)
   1471c:	e73fffc4 	addi	fp,fp,-1
   14720:	20011b26 	beq	r4,zero,14b90 <_dtoa_r+0x12a0>
   14724:	880b883a 	mov	r5,r17
   14728:	000f883a 	mov	r7,zero
   1472c:	01800284 	movi	r6,10
   14730:	8009883a 	mov	r4,r16
   14734:	00124ec0 	call	124ec <__multadd>
   14738:	1023883a 	mov	r17,r2
   1473c:	d8800517 	ldw	r2,20(sp)
   14740:	00802d16 	blt	zero,r2,147f8 <_dtoa_r+0xf08>
   14744:	00011806 	br	14ba8 <_dtoa_r+0x12b8>
   14748:	d8c00417 	ldw	r3,16(sp)
   1474c:	00c02216 	blt	zero,r3,147d8 <_dtoa_r+0xee8>
   14750:	d9000817 	ldw	r4,32(sp)
   14754:	00800084 	movi	r2,2
   14758:	11001f0e 	bge	r2,r4,147d8 <_dtoa_r+0xee8>
   1475c:	d8c00515 	stw	r3,20(sp)
   14760:	d8800517 	ldw	r2,20(sp)
   14764:	10000d1e 	bne	r2,zero,1479c <_dtoa_r+0xeac>
   14768:	900b883a 	mov	r5,r18
   1476c:	8009883a 	mov	r4,r16
   14770:	000f883a 	mov	r7,zero
   14774:	01800144 	movi	r6,5
   14778:	00124ec0 	call	124ec <__multadd>
   1477c:	d9000317 	ldw	r4,12(sp)
   14780:	100b883a 	mov	r5,r2
   14784:	1025883a 	mov	r18,r2
   14788:	0012d640 	call	12d64 <__mcmp>
   1478c:	00800a16 	blt	zero,r2,147b8 <_dtoa_r+0xec8>
   14790:	00000206 	br	1479c <_dtoa_r+0xeac>
   14794:	0025883a 	mov	r18,zero
   14798:	0023883a 	mov	r17,zero
   1479c:	d8c02017 	ldw	r3,128(sp)
   147a0:	dd800717 	ldw	r22,28(sp)
   147a4:	00f8303a 	nor	fp,zero,r3
   147a8:	00000806 	br	147cc <_dtoa_r+0xedc>
   147ac:	a839883a 	mov	fp,r21
   147b0:	0025883a 	mov	r18,zero
   147b4:	0023883a 	mov	r17,zero
   147b8:	d9000717 	ldw	r4,28(sp)
   147bc:	00800c44 	movi	r2,49
   147c0:	e7000044 	addi	fp,fp,1
   147c4:	25800044 	addi	r22,r4,1
   147c8:	20800005 	stb	r2,0(r4)
   147cc:	8827883a 	mov	r19,r17
   147d0:	0023883a 	mov	r17,zero
   147d4:	0000cb06 	br	14b04 <_dtoa_r+0x1214>
   147d8:	d8800b17 	ldw	r2,44(sp)
   147dc:	1000041e 	bne	r2,zero,147f0 <_dtoa_r+0xf00>
   147e0:	d8c00417 	ldw	r3,16(sp)
   147e4:	d8c00515 	stw	r3,20(sp)
   147e8:	dcc00717 	ldw	r19,28(sp)
   147ec:	00009006 	br	14a30 <_dtoa_r+0x1140>
   147f0:	d9000417 	ldw	r4,16(sp)
   147f4:	d9000515 	stw	r4,20(sp)
   147f8:	0500050e 	bge	zero,r20,14810 <_dtoa_r+0xf20>
   147fc:	880b883a 	mov	r5,r17
   14800:	a00d883a 	mov	r6,r20
   14804:	8009883a 	mov	r4,r16
   14808:	0012c1c0 	call	12c1c <__lshift>
   1480c:	1023883a 	mov	r17,r2
   14810:	98001126 	beq	r19,zero,14858 <_dtoa_r+0xf68>
   14814:	89400117 	ldw	r5,4(r17)
   14818:	8009883a 	mov	r4,r16
   1481c:	00123900 	call	12390 <_Balloc>
   14820:	89800417 	ldw	r6,16(r17)
   14824:	89400304 	addi	r5,r17,12
   14828:	11000304 	addi	r4,r2,12
   1482c:	31800084 	addi	r6,r6,2
   14830:	318d883a 	add	r6,r6,r6
   14834:	318d883a 	add	r6,r6,r6
   14838:	1027883a 	mov	r19,r2
   1483c:	0014c100 	call	14c10 <memcpy>
   14840:	980b883a 	mov	r5,r19
   14844:	01800044 	movi	r6,1
   14848:	8009883a 	mov	r4,r16
   1484c:	0012c1c0 	call	12c1c <__lshift>
   14850:	1027883a 	mov	r19,r2
   14854:	00000106 	br	1485c <_dtoa_r+0xf6c>
   14858:	8827883a 	mov	r19,r17
   1485c:	d8800517 	ldw	r2,20(sp)
   14860:	ddc00717 	ldw	r23,28(sp)
   14864:	d8c00917 	ldw	r3,36(sp)
   14868:	157fffc4 	addi	r21,r2,-1
   1486c:	bd6b883a 	add	r21,r23,r21
   14870:	18c0004c 	andi	r3,r3,1
   14874:	dd400615 	stw	r21,24(sp)
   14878:	d8c00515 	stw	r3,20(sp)
   1487c:	d9000317 	ldw	r4,12(sp)
   14880:	900b883a 	mov	r5,r18
   14884:	00136d00 	call	136d0 <quorem>
   14888:	d9000317 	ldw	r4,12(sp)
   1488c:	880b883a 	mov	r5,r17
   14890:	102d883a 	mov	r22,r2
   14894:	15400c04 	addi	r21,r2,48
   14898:	0012d640 	call	12d64 <__mcmp>
   1489c:	980d883a 	mov	r6,r19
   148a0:	900b883a 	mov	r5,r18
   148a4:	8009883a 	mov	r4,r16
   148a8:	d8800415 	stw	r2,16(sp)
   148ac:	0012dc00 	call	12dc0 <__mdiff>
   148b0:	1029883a 	mov	r20,r2
   148b4:	10800317 	ldw	r2,12(r2)
   148b8:	1000041e 	bne	r2,zero,148cc <_dtoa_r+0xfdc>
   148bc:	d9000317 	ldw	r4,12(sp)
   148c0:	a00b883a 	mov	r5,r20
   148c4:	0012d640 	call	12d64 <__mcmp>
   148c8:	00000106 	br	148d0 <_dtoa_r+0xfe0>
   148cc:	00800044 	movi	r2,1
   148d0:	a00b883a 	mov	r5,r20
   148d4:	8009883a 	mov	r4,r16
   148d8:	d8801415 	stw	r2,80(sp)
   148dc:	00124740 	call	12474 <_Bfree>
   148e0:	d8801417 	ldw	r2,80(sp)
   148e4:	bd000044 	addi	r20,r23,1
   148e8:	1000091e 	bne	r2,zero,14910 <_dtoa_r+0x1020>
   148ec:	d9000817 	ldw	r4,32(sp)
   148f0:	2000071e 	bne	r4,zero,14910 <_dtoa_r+0x1020>
   148f4:	d8c00517 	ldw	r3,20(sp)
   148f8:	1800051e 	bne	r3,zero,14910 <_dtoa_r+0x1020>
   148fc:	00800e44 	movi	r2,57
   14900:	a8802026 	beq	r21,r2,14984 <_dtoa_r+0x1094>
   14904:	d8c00417 	ldw	r3,16(sp)
   14908:	00c01716 	blt	zero,r3,14968 <_dtoa_r+0x1078>
   1490c:	00001706 	br	1496c <_dtoa_r+0x107c>
   14910:	d8c00417 	ldw	r3,16(sp)
   14914:	18000516 	blt	r3,zero,1492c <_dtoa_r+0x103c>
   14918:	1800171e 	bne	r3,zero,14978 <_dtoa_r+0x1088>
   1491c:	d9000817 	ldw	r4,32(sp)
   14920:	2000151e 	bne	r4,zero,14978 <_dtoa_r+0x1088>
   14924:	d8c00517 	ldw	r3,20(sp)
   14928:	1800131e 	bne	r3,zero,14978 <_dtoa_r+0x1088>
   1492c:	00800f0e 	bge	zero,r2,1496c <_dtoa_r+0x107c>
   14930:	d9400317 	ldw	r5,12(sp)
   14934:	8009883a 	mov	r4,r16
   14938:	01800044 	movi	r6,1
   1493c:	0012c1c0 	call	12c1c <__lshift>
   14940:	900b883a 	mov	r5,r18
   14944:	1009883a 	mov	r4,r2
   14948:	d8800315 	stw	r2,12(sp)
   1494c:	0012d640 	call	12d64 <__mcmp>
   14950:	00800316 	blt	zero,r2,14960 <_dtoa_r+0x1070>
   14954:	1000051e 	bne	r2,zero,1496c <_dtoa_r+0x107c>
   14958:	a880004c 	andi	r2,r21,1
   1495c:	10000326 	beq	r2,zero,1496c <_dtoa_r+0x107c>
   14960:	00800e44 	movi	r2,57
   14964:	a8800726 	beq	r21,r2,14984 <_dtoa_r+0x1094>
   14968:	b5400c44 	addi	r21,r22,49
   1496c:	a02d883a 	mov	r22,r20
   14970:	bd400005 	stb	r21,0(r23)
   14974:	00006306 	br	14b04 <_dtoa_r+0x1214>
   14978:	00800a0e 	bge	zero,r2,149a4 <_dtoa_r+0x10b4>
   1497c:	00800e44 	movi	r2,57
   14980:	a880041e 	bne	r21,r2,14994 <_dtoa_r+0x10a4>
   14984:	00800e44 	movi	r2,57
   14988:	a02d883a 	mov	r22,r20
   1498c:	b8800005 	stb	r2,0(r23)
   14990:	00004406 	br	14aa4 <_dtoa_r+0x11b4>
   14994:	a8c00044 	addi	r3,r21,1
   14998:	a02d883a 	mov	r22,r20
   1499c:	b8c00005 	stb	r3,0(r23)
   149a0:	00005806 	br	14b04 <_dtoa_r+0x1214>
   149a4:	d8c00617 	ldw	r3,24(sp)
   149a8:	bd400005 	stb	r21,0(r23)
   149ac:	a02d883a 	mov	r22,r20
   149b0:	b8c03026 	beq	r23,r3,14a74 <_dtoa_r+0x1184>
   149b4:	d9400317 	ldw	r5,12(sp)
   149b8:	000f883a 	mov	r7,zero
   149bc:	01800284 	movi	r6,10
   149c0:	8009883a 	mov	r4,r16
   149c4:	00124ec0 	call	124ec <__multadd>
   149c8:	d8800315 	stw	r2,12(sp)
   149cc:	000f883a 	mov	r7,zero
   149d0:	01800284 	movi	r6,10
   149d4:	880b883a 	mov	r5,r17
   149d8:	8009883a 	mov	r4,r16
   149dc:	8cc0041e 	bne	r17,r19,149f0 <_dtoa_r+0x1100>
   149e0:	00124ec0 	call	124ec <__multadd>
   149e4:	1023883a 	mov	r17,r2
   149e8:	1027883a 	mov	r19,r2
   149ec:	00000806 	br	14a10 <_dtoa_r+0x1120>
   149f0:	00124ec0 	call	124ec <__multadd>
   149f4:	980b883a 	mov	r5,r19
   149f8:	000f883a 	mov	r7,zero
   149fc:	01800284 	movi	r6,10
   14a00:	8009883a 	mov	r4,r16
   14a04:	1023883a 	mov	r17,r2
   14a08:	00124ec0 	call	124ec <__multadd>
   14a0c:	1027883a 	mov	r19,r2
   14a10:	a02f883a 	mov	r23,r20
   14a14:	003f9906 	br	1487c <_gp+0xffff3310>
   14a18:	d9400317 	ldw	r5,12(sp)
   14a1c:	000f883a 	mov	r7,zero
   14a20:	01800284 	movi	r6,10
   14a24:	8009883a 	mov	r4,r16
   14a28:	00124ec0 	call	124ec <__multadd>
   14a2c:	d8800315 	stw	r2,12(sp)
   14a30:	d9000317 	ldw	r4,12(sp)
   14a34:	900b883a 	mov	r5,r18
   14a38:	9cc00044 	addi	r19,r19,1
   14a3c:	00136d00 	call	136d0 <quorem>
   14a40:	d9000717 	ldw	r4,28(sp)
   14a44:	15400c04 	addi	r21,r2,48
   14a48:	d8c00517 	ldw	r3,20(sp)
   14a4c:	9d7fffc5 	stb	r21,-1(r19)
   14a50:	9905c83a 	sub	r2,r19,r4
   14a54:	10fff016 	blt	r2,r3,14a18 <_gp+0xffff34ac>
   14a58:	182d883a 	mov	r22,r3
   14a5c:	00c00116 	blt	zero,r3,14a64 <_dtoa_r+0x1174>
   14a60:	05800044 	movi	r22,1
   14a64:	d9000717 	ldw	r4,28(sp)
   14a68:	8827883a 	mov	r19,r17
   14a6c:	0023883a 	mov	r17,zero
   14a70:	25ad883a 	add	r22,r4,r22
   14a74:	d9400317 	ldw	r5,12(sp)
   14a78:	8009883a 	mov	r4,r16
   14a7c:	01800044 	movi	r6,1
   14a80:	0012c1c0 	call	12c1c <__lshift>
   14a84:	900b883a 	mov	r5,r18
   14a88:	1009883a 	mov	r4,r2
   14a8c:	d8800315 	stw	r2,12(sp)
   14a90:	0012d640 	call	12d64 <__mcmp>
   14a94:	00800316 	blt	zero,r2,14aa4 <_dtoa_r+0x11b4>
   14a98:	1000141e 	bne	r2,zero,14aec <_dtoa_r+0x11fc>
   14a9c:	a8c0004c 	andi	r3,r21,1
   14aa0:	18001226 	beq	r3,zero,14aec <_dtoa_r+0x11fc>
   14aa4:	01000e44 	movi	r4,57
   14aa8:	b0bfffc4 	addi	r2,r22,-1
   14aac:	10c00003 	ldbu	r3,0(r2)
   14ab0:	19403fcc 	andi	r5,r3,255
   14ab4:	2940201c 	xori	r5,r5,128
   14ab8:	297fe004 	addi	r5,r5,-128
   14abc:	2900081e 	bne	r5,r4,14ae0 <_dtoa_r+0x11f0>
   14ac0:	d8c00717 	ldw	r3,28(sp)
   14ac4:	1880041e 	bne	r3,r2,14ad8 <_dtoa_r+0x11e8>
   14ac8:	00800c44 	movi	r2,49
   14acc:	e7000044 	addi	fp,fp,1
   14ad0:	18800005 	stb	r2,0(r3)
   14ad4:	00000b06 	br	14b04 <_dtoa_r+0x1214>
   14ad8:	102d883a 	mov	r22,r2
   14adc:	003ff206 	br	14aa8 <_gp+0xffff353c>
   14ae0:	18c00044 	addi	r3,r3,1
   14ae4:	10c00005 	stb	r3,0(r2)
   14ae8:	00000606 	br	14b04 <_dtoa_r+0x1214>
   14aec:	00c00c04 	movi	r3,48
   14af0:	b0bfffc4 	addi	r2,r22,-1
   14af4:	11000007 	ldb	r4,0(r2)
   14af8:	20c0021e 	bne	r4,r3,14b04 <_dtoa_r+0x1214>
   14afc:	102d883a 	mov	r22,r2
   14b00:	003ffb06 	br	14af0 <_gp+0xffff3584>
   14b04:	900b883a 	mov	r5,r18
   14b08:	8009883a 	mov	r4,r16
   14b0c:	00124740 	call	12474 <_Bfree>
   14b10:	98000a26 	beq	r19,zero,14b3c <_dtoa_r+0x124c>
   14b14:	88000426 	beq	r17,zero,14b28 <_dtoa_r+0x1238>
   14b18:	8cc00326 	beq	r17,r19,14b28 <_dtoa_r+0x1238>
   14b1c:	880b883a 	mov	r5,r17
   14b20:	8009883a 	mov	r4,r16
   14b24:	00124740 	call	12474 <_Bfree>
   14b28:	980b883a 	mov	r5,r19
   14b2c:	8009883a 	mov	r4,r16
   14b30:	00124740 	call	12474 <_Bfree>
   14b34:	00000106 	br	14b3c <_dtoa_r+0x124c>
   14b38:	a839883a 	mov	fp,r21
   14b3c:	d9400317 	ldw	r5,12(sp)
   14b40:	8009883a 	mov	r4,r16
   14b44:	00124740 	call	12474 <_Bfree>
   14b48:	d9002117 	ldw	r4,132(sp)
   14b4c:	e0800044 	addi	r2,fp,1
   14b50:	b0000005 	stb	zero,0(r22)
   14b54:	20800015 	stw	r2,0(r4)
   14b58:	d8802317 	ldw	r2,140(sp)
   14b5c:	10000526 	beq	r2,zero,14b74 <_dtoa_r+0x1284>
   14b60:	15800015 	stw	r22,0(r2)
   14b64:	00000306 	br	14b74 <_dtoa_r+0x1284>
   14b68:	008000b4 	movhi	r2,2
   14b6c:	10a4a204 	addi	r2,r2,-28024
   14b70:	00001106 	br	14bb8 <_dtoa_r+0x12c8>
   14b74:	d8800717 	ldw	r2,28(sp)
   14b78:	00000f06 	br	14bb8 <_dtoa_r+0x12c8>
   14b7c:	d8c00817 	ldw	r3,32(sp)
   14b80:	a8fe990e 	bge	r21,r3,145e8 <_gp+0xffff307c>
   14b84:	0027883a 	mov	r19,zero
   14b88:	a805883a 	mov	r2,r21
   14b8c:	003eb406 	br	14660 <_gp+0xffff30f4>
   14b90:	d9000517 	ldw	r4,20(sp)
   14b94:	013f1416 	blt	zero,r4,147e8 <_gp+0xffff327c>
   14b98:	d8c00817 	ldw	r3,32(sp)
   14b9c:	00800084 	movi	r2,2
   14ba0:	10ff110e 	bge	r2,r3,147e8 <_gp+0xffff327c>
   14ba4:	003eee06 	br	14760 <_gp+0xffff31f4>
   14ba8:	d9000817 	ldw	r4,32(sp)
   14bac:	00800084 	movi	r2,2
   14bb0:	113f110e 	bge	r2,r4,147f8 <_gp+0xffff328c>
   14bb4:	003eea06 	br	14760 <_gp+0xffff31f4>
   14bb8:	dfc01f17 	ldw	ra,124(sp)
   14bbc:	df001e17 	ldw	fp,120(sp)
   14bc0:	ddc01d17 	ldw	r23,116(sp)
   14bc4:	dd801c17 	ldw	r22,112(sp)
   14bc8:	dd401b17 	ldw	r21,108(sp)
   14bcc:	dd001a17 	ldw	r20,104(sp)
   14bd0:	dcc01917 	ldw	r19,100(sp)
   14bd4:	dc801817 	ldw	r18,96(sp)
   14bd8:	dc401717 	ldw	r17,92(sp)
   14bdc:	dc001617 	ldw	r16,88(sp)
   14be0:	dec02004 	addi	sp,sp,128
   14be4:	f800283a 	ret

00014be8 <malloc>:
   14be8:	008000b4 	movhi	r2,2
   14bec:	10a55c04 	addi	r2,r2,-27280
   14bf0:	200b883a 	mov	r5,r4
   14bf4:	11000017 	ldw	r4,0(r2)
   14bf8:	00134001 	jmpi	13400 <_malloc_r>

00014bfc <free>:
   14bfc:	008000b4 	movhi	r2,2
   14c00:	10a55c04 	addi	r2,r2,-27280
   14c04:	200b883a 	mov	r5,r4
   14c08:	11000017 	ldw	r4,0(r2)
   14c0c:	0014c581 	jmpi	14c58 <_free_r>

00014c10 <memcpy>:
   14c10:	2005883a 	mov	r2,r4
   14c14:	2007883a 	mov	r3,r4
   14c18:	218d883a 	add	r6,r4,r6
   14c1c:	19800526 	beq	r3,r6,14c34 <memcpy+0x24>
   14c20:	29000003 	ldbu	r4,0(r5)
   14c24:	18c00044 	addi	r3,r3,1
   14c28:	29400044 	addi	r5,r5,1
   14c2c:	193fffc5 	stb	r4,-1(r3)
   14c30:	003ffa06 	br	14c1c <_gp+0xffff36b0>
   14c34:	f800283a 	ret

00014c38 <memset>:
   14c38:	2005883a 	mov	r2,r4
   14c3c:	2007883a 	mov	r3,r4
   14c40:	218d883a 	add	r6,r4,r6
   14c44:	19800326 	beq	r3,r6,14c54 <memset+0x1c>
   14c48:	19400005 	stb	r5,0(r3)
   14c4c:	18c00044 	addi	r3,r3,1
   14c50:	003ffc06 	br	14c44 <_gp+0xffff36d8>
   14c54:	f800283a 	ret

00014c58 <_free_r>:
   14c58:	28003726 	beq	r5,zero,14d38 <_free_r+0xe0>
   14c5c:	28ffff17 	ldw	r3,-4(r5)
   14c60:	28bfff04 	addi	r2,r5,-4
   14c64:	1800010e 	bge	r3,zero,14c6c <_free_r+0x14>
   14c68:	10c5883a 	add	r2,r2,r3
   14c6c:	014000b4 	movhi	r5,2
   14c70:	29662104 	addi	r5,r5,-26492
   14c74:	28c00017 	ldw	r3,0(r5)
   14c78:	280d883a 	mov	r6,r5
   14c7c:	1800031e 	bne	r3,zero,14c8c <_free_r+0x34>
   14c80:	10000115 	stw	zero,4(r2)
   14c84:	28800015 	stw	r2,0(r5)
   14c88:	f800283a 	ret
   14c8c:	10c00c2e 	bgeu	r2,r3,14cc0 <_free_r+0x68>
   14c90:	11000017 	ldw	r4,0(r2)
   14c94:	110b883a 	add	r5,r2,r4
   14c98:	1940041e 	bne	r3,r5,14cac <_free_r+0x54>
   14c9c:	19400017 	ldw	r5,0(r3)
   14ca0:	18c00117 	ldw	r3,4(r3)
   14ca4:	2909883a 	add	r4,r5,r4
   14ca8:	11000015 	stw	r4,0(r2)
   14cac:	10c00115 	stw	r3,4(r2)
   14cb0:	30800015 	stw	r2,0(r6)
   14cb4:	f800283a 	ret
   14cb8:	11400336 	bltu	r2,r5,14cc8 <_free_r+0x70>
   14cbc:	2807883a 	mov	r3,r5
   14cc0:	19400117 	ldw	r5,4(r3)
   14cc4:	283ffc1e 	bne	r5,zero,14cb8 <_gp+0xffff374c>
   14cc8:	19c00017 	ldw	r7,0(r3)
   14ccc:	19cd883a 	add	r6,r3,r7
   14cd0:	30800a1e 	bne	r6,r2,14cfc <_free_r+0xa4>
   14cd4:	10800017 	ldw	r2,0(r2)
   14cd8:	3885883a 	add	r2,r7,r2
   14cdc:	18800015 	stw	r2,0(r3)
   14ce0:	1889883a 	add	r4,r3,r2
   14ce4:	2900141e 	bne	r5,r4,14d38 <_free_r+0xe0>
   14ce8:	29000017 	ldw	r4,0(r5)
   14cec:	2085883a 	add	r2,r4,r2
   14cf0:	18800015 	stw	r2,0(r3)
   14cf4:	28800117 	ldw	r2,4(r5)
   14cf8:	00000e06 	br	14d34 <_free_r+0xdc>
   14cfc:	1180032e 	bgeu	r2,r6,14d0c <_free_r+0xb4>
   14d00:	00800304 	movi	r2,12
   14d04:	20800015 	stw	r2,0(r4)
   14d08:	f800283a 	ret
   14d0c:	11000017 	ldw	r4,0(r2)
   14d10:	110d883a 	add	r6,r2,r4
   14d14:	2980061e 	bne	r5,r6,14d30 <_free_r+0xd8>
   14d18:	29800017 	ldw	r6,0(r5)
   14d1c:	3109883a 	add	r4,r6,r4
   14d20:	11000015 	stw	r4,0(r2)
   14d24:	29000117 	ldw	r4,4(r5)
   14d28:	11000115 	stw	r4,4(r2)
   14d2c:	00000106 	br	14d34 <_free_r+0xdc>
   14d30:	11400115 	stw	r5,4(r2)
   14d34:	18800115 	stw	r2,4(r3)
   14d38:	f800283a 	ret

00014d3c <_malloc_usable_size_r>:
   14d3c:	28bfff17 	ldw	r2,-4(r5)
   14d40:	1000030e 	bge	r2,zero,14d50 <_malloc_usable_size_r+0x14>
   14d44:	288b883a 	add	r5,r5,r2
   14d48:	28ffff17 	ldw	r3,-4(r5)
   14d4c:	10c5883a 	add	r2,r2,r3
   14d50:	10bfff04 	addi	r2,r2,-4
   14d54:	f800283a 	ret

00014d58 <__divsi3>:
   14d58:	20001b16 	blt	r4,zero,14dc8 <__divsi3+0x70>
   14d5c:	000f883a 	mov	r7,zero
   14d60:	28001616 	blt	r5,zero,14dbc <__divsi3+0x64>
   14d64:	200d883a 	mov	r6,r4
   14d68:	29001a2e 	bgeu	r5,r4,14dd4 <__divsi3+0x7c>
   14d6c:	00800804 	movi	r2,32
   14d70:	00c00044 	movi	r3,1
   14d74:	00000106 	br	14d7c <__divsi3+0x24>
   14d78:	10000d26 	beq	r2,zero,14db0 <__divsi3+0x58>
   14d7c:	294b883a 	add	r5,r5,r5
   14d80:	10bfffc4 	addi	r2,r2,-1
   14d84:	18c7883a 	add	r3,r3,r3
   14d88:	293ffb36 	bltu	r5,r4,14d78 <_gp+0xffff380c>
   14d8c:	0005883a 	mov	r2,zero
   14d90:	18000726 	beq	r3,zero,14db0 <__divsi3+0x58>
   14d94:	0005883a 	mov	r2,zero
   14d98:	31400236 	bltu	r6,r5,14da4 <__divsi3+0x4c>
   14d9c:	314dc83a 	sub	r6,r6,r5
   14da0:	10c4b03a 	or	r2,r2,r3
   14da4:	1806d07a 	srli	r3,r3,1
   14da8:	280ad07a 	srli	r5,r5,1
   14dac:	183ffa1e 	bne	r3,zero,14d98 <_gp+0xffff382c>
   14db0:	38000126 	beq	r7,zero,14db8 <__divsi3+0x60>
   14db4:	0085c83a 	sub	r2,zero,r2
   14db8:	f800283a 	ret
   14dbc:	014bc83a 	sub	r5,zero,r5
   14dc0:	39c0005c 	xori	r7,r7,1
   14dc4:	003fe706 	br	14d64 <_gp+0xffff37f8>
   14dc8:	0109c83a 	sub	r4,zero,r4
   14dcc:	01c00044 	movi	r7,1
   14dd0:	003fe306 	br	14d60 <_gp+0xffff37f4>
   14dd4:	00c00044 	movi	r3,1
   14dd8:	003fee06 	br	14d94 <_gp+0xffff3828>

00014ddc <__modsi3>:
   14ddc:	20001716 	blt	r4,zero,14e3c <__modsi3+0x60>
   14de0:	000f883a 	mov	r7,zero
   14de4:	2005883a 	mov	r2,r4
   14de8:	28001216 	blt	r5,zero,14e34 <__modsi3+0x58>
   14dec:	2900162e 	bgeu	r5,r4,14e48 <__modsi3+0x6c>
   14df0:	01800804 	movi	r6,32
   14df4:	00c00044 	movi	r3,1
   14df8:	00000106 	br	14e00 <__modsi3+0x24>
   14dfc:	30000a26 	beq	r6,zero,14e28 <__modsi3+0x4c>
   14e00:	294b883a 	add	r5,r5,r5
   14e04:	31bfffc4 	addi	r6,r6,-1
   14e08:	18c7883a 	add	r3,r3,r3
   14e0c:	293ffb36 	bltu	r5,r4,14dfc <_gp+0xffff3890>
   14e10:	18000526 	beq	r3,zero,14e28 <__modsi3+0x4c>
   14e14:	1806d07a 	srli	r3,r3,1
   14e18:	11400136 	bltu	r2,r5,14e20 <__modsi3+0x44>
   14e1c:	1145c83a 	sub	r2,r2,r5
   14e20:	280ad07a 	srli	r5,r5,1
   14e24:	183ffb1e 	bne	r3,zero,14e14 <_gp+0xffff38a8>
   14e28:	38000126 	beq	r7,zero,14e30 <__modsi3+0x54>
   14e2c:	0085c83a 	sub	r2,zero,r2
   14e30:	f800283a 	ret
   14e34:	014bc83a 	sub	r5,zero,r5
   14e38:	003fec06 	br	14dec <_gp+0xffff3880>
   14e3c:	0109c83a 	sub	r4,zero,r4
   14e40:	01c00044 	movi	r7,1
   14e44:	003fe706 	br	14de4 <_gp+0xffff3878>
   14e48:	00c00044 	movi	r3,1
   14e4c:	003ff106 	br	14e14 <_gp+0xffff38a8>

00014e50 <__udivsi3>:
   14e50:	200d883a 	mov	r6,r4
   14e54:	2900152e 	bgeu	r5,r4,14eac <__udivsi3+0x5c>
   14e58:	28001416 	blt	r5,zero,14eac <__udivsi3+0x5c>
   14e5c:	00800804 	movi	r2,32
   14e60:	00c00044 	movi	r3,1
   14e64:	00000206 	br	14e70 <__udivsi3+0x20>
   14e68:	10000e26 	beq	r2,zero,14ea4 <__udivsi3+0x54>
   14e6c:	28000516 	blt	r5,zero,14e84 <__udivsi3+0x34>
   14e70:	294b883a 	add	r5,r5,r5
   14e74:	10bfffc4 	addi	r2,r2,-1
   14e78:	18c7883a 	add	r3,r3,r3
   14e7c:	293ffa36 	bltu	r5,r4,14e68 <_gp+0xffff38fc>
   14e80:	18000826 	beq	r3,zero,14ea4 <__udivsi3+0x54>
   14e84:	0005883a 	mov	r2,zero
   14e88:	31400236 	bltu	r6,r5,14e94 <__udivsi3+0x44>
   14e8c:	314dc83a 	sub	r6,r6,r5
   14e90:	10c4b03a 	or	r2,r2,r3
   14e94:	1806d07a 	srli	r3,r3,1
   14e98:	280ad07a 	srli	r5,r5,1
   14e9c:	183ffa1e 	bne	r3,zero,14e88 <_gp+0xffff391c>
   14ea0:	f800283a 	ret
   14ea4:	0005883a 	mov	r2,zero
   14ea8:	f800283a 	ret
   14eac:	00c00044 	movi	r3,1
   14eb0:	003ff406 	br	14e84 <_gp+0xffff3918>

00014eb4 <__umodsi3>:
   14eb4:	2005883a 	mov	r2,r4
   14eb8:	2900122e 	bgeu	r5,r4,14f04 <__umodsi3+0x50>
   14ebc:	28001116 	blt	r5,zero,14f04 <__umodsi3+0x50>
   14ec0:	01800804 	movi	r6,32
   14ec4:	00c00044 	movi	r3,1
   14ec8:	00000206 	br	14ed4 <__umodsi3+0x20>
   14ecc:	30000c26 	beq	r6,zero,14f00 <__umodsi3+0x4c>
   14ed0:	28000516 	blt	r5,zero,14ee8 <__umodsi3+0x34>
   14ed4:	294b883a 	add	r5,r5,r5
   14ed8:	31bfffc4 	addi	r6,r6,-1
   14edc:	18c7883a 	add	r3,r3,r3
   14ee0:	293ffa36 	bltu	r5,r4,14ecc <_gp+0xffff3960>
   14ee4:	18000626 	beq	r3,zero,14f00 <__umodsi3+0x4c>
   14ee8:	1806d07a 	srli	r3,r3,1
   14eec:	11400136 	bltu	r2,r5,14ef4 <__umodsi3+0x40>
   14ef0:	1145c83a 	sub	r2,r2,r5
   14ef4:	280ad07a 	srli	r5,r5,1
   14ef8:	183ffb1e 	bne	r3,zero,14ee8 <_gp+0xffff397c>
   14efc:	f800283a 	ret
   14f00:	f800283a 	ret
   14f04:	00c00044 	movi	r3,1
   14f08:	003ff706 	br	14ee8 <_gp+0xffff397c>

00014f0c <__adddf3>:
   14f0c:	02c00434 	movhi	r11,16
   14f10:	5affffc4 	addi	r11,r11,-1
   14f14:	2806d7fa 	srli	r3,r5,31
   14f18:	2ad4703a 	and	r10,r5,r11
   14f1c:	3ad2703a 	and	r9,r7,r11
   14f20:	3804d53a 	srli	r2,r7,20
   14f24:	3018d77a 	srli	r12,r6,29
   14f28:	280ad53a 	srli	r5,r5,20
   14f2c:	501490fa 	slli	r10,r10,3
   14f30:	2010d77a 	srli	r8,r4,29
   14f34:	481290fa 	slli	r9,r9,3
   14f38:	380ed7fa 	srli	r7,r7,31
   14f3c:	defffb04 	addi	sp,sp,-20
   14f40:	dc800215 	stw	r18,8(sp)
   14f44:	dc400115 	stw	r17,4(sp)
   14f48:	dc000015 	stw	r16,0(sp)
   14f4c:	dfc00415 	stw	ra,16(sp)
   14f50:	dcc00315 	stw	r19,12(sp)
   14f54:	1c803fcc 	andi	r18,r3,255
   14f58:	2c01ffcc 	andi	r16,r5,2047
   14f5c:	5210b03a 	or	r8,r10,r8
   14f60:	202290fa 	slli	r17,r4,3
   14f64:	1081ffcc 	andi	r2,r2,2047
   14f68:	4b12b03a 	or	r9,r9,r12
   14f6c:	300c90fa 	slli	r6,r6,3
   14f70:	91c07526 	beq	r18,r7,15148 <__adddf3+0x23c>
   14f74:	8087c83a 	sub	r3,r16,r2
   14f78:	00c0ab0e 	bge	zero,r3,15228 <__adddf3+0x31c>
   14f7c:	10002a1e 	bne	r2,zero,15028 <__adddf3+0x11c>
   14f80:	4984b03a 	or	r2,r9,r6
   14f84:	1000961e 	bne	r2,zero,151e0 <__adddf3+0x2d4>
   14f88:	888001cc 	andi	r2,r17,7
   14f8c:	10000726 	beq	r2,zero,14fac <__adddf3+0xa0>
   14f90:	888003cc 	andi	r2,r17,15
   14f94:	00c00104 	movi	r3,4
   14f98:	10c00426 	beq	r2,r3,14fac <__adddf3+0xa0>
   14f9c:	88c7883a 	add	r3,r17,r3
   14fa0:	1c63803a 	cmpltu	r17,r3,r17
   14fa4:	4451883a 	add	r8,r8,r17
   14fa8:	1823883a 	mov	r17,r3
   14fac:	4080202c 	andhi	r2,r8,128
   14fb0:	10005926 	beq	r2,zero,15118 <__adddf3+0x20c>
   14fb4:	84000044 	addi	r16,r16,1
   14fb8:	0081ffc4 	movi	r2,2047
   14fbc:	8080ba26 	beq	r16,r2,152a8 <__adddf3+0x39c>
   14fc0:	00bfe034 	movhi	r2,65408
   14fc4:	10bfffc4 	addi	r2,r2,-1
   14fc8:	4090703a 	and	r8,r8,r2
   14fcc:	4004977a 	slli	r2,r8,29
   14fd0:	4010927a 	slli	r8,r8,9
   14fd4:	8822d0fa 	srli	r17,r17,3
   14fd8:	8401ffcc 	andi	r16,r16,2047
   14fdc:	4010d33a 	srli	r8,r8,12
   14fe0:	9007883a 	mov	r3,r18
   14fe4:	1444b03a 	or	r2,r2,r17
   14fe8:	8401ffcc 	andi	r16,r16,2047
   14fec:	8020953a 	slli	r16,r16,20
   14ff0:	18c03fcc 	andi	r3,r3,255
   14ff4:	01000434 	movhi	r4,16
   14ff8:	213fffc4 	addi	r4,r4,-1
   14ffc:	180697fa 	slli	r3,r3,31
   15000:	4110703a 	and	r8,r8,r4
   15004:	4410b03a 	or	r8,r8,r16
   15008:	40c6b03a 	or	r3,r8,r3
   1500c:	dfc00417 	ldw	ra,16(sp)
   15010:	dcc00317 	ldw	r19,12(sp)
   15014:	dc800217 	ldw	r18,8(sp)
   15018:	dc400117 	ldw	r17,4(sp)
   1501c:	dc000017 	ldw	r16,0(sp)
   15020:	dec00504 	addi	sp,sp,20
   15024:	f800283a 	ret
   15028:	0081ffc4 	movi	r2,2047
   1502c:	80bfd626 	beq	r16,r2,14f88 <_gp+0xffff3a1c>
   15030:	4a402034 	orhi	r9,r9,128
   15034:	00800e04 	movi	r2,56
   15038:	10c09f16 	blt	r2,r3,152b8 <__adddf3+0x3ac>
   1503c:	008007c4 	movi	r2,31
   15040:	10c0c216 	blt	r2,r3,1534c <__adddf3+0x440>
   15044:	00800804 	movi	r2,32
   15048:	10c5c83a 	sub	r2,r2,r3
   1504c:	488a983a 	sll	r5,r9,r2
   15050:	30c8d83a 	srl	r4,r6,r3
   15054:	3084983a 	sll	r2,r6,r2
   15058:	48c6d83a 	srl	r3,r9,r3
   1505c:	290cb03a 	or	r6,r5,r4
   15060:	1004c03a 	cmpne	r2,r2,zero
   15064:	308cb03a 	or	r6,r6,r2
   15068:	898dc83a 	sub	r6,r17,r6
   1506c:	89a3803a 	cmpltu	r17,r17,r6
   15070:	40d1c83a 	sub	r8,r8,r3
   15074:	4451c83a 	sub	r8,r8,r17
   15078:	3023883a 	mov	r17,r6
   1507c:	4080202c 	andhi	r2,r8,128
   15080:	10002326 	beq	r2,zero,15110 <__adddf3+0x204>
   15084:	04c02034 	movhi	r19,128
   15088:	9cffffc4 	addi	r19,r19,-1
   1508c:	44e6703a 	and	r19,r8,r19
   15090:	98007626 	beq	r19,zero,1526c <__adddf3+0x360>
   15094:	9809883a 	mov	r4,r19
   15098:	0010fd40 	call	10fd4 <__clzsi2>
   1509c:	10fffe04 	addi	r3,r2,-8
   150a0:	010007c4 	movi	r4,31
   150a4:	20c07716 	blt	r4,r3,15284 <__adddf3+0x378>
   150a8:	00800804 	movi	r2,32
   150ac:	10c5c83a 	sub	r2,r2,r3
   150b0:	8884d83a 	srl	r2,r17,r2
   150b4:	98d0983a 	sll	r8,r19,r3
   150b8:	88e2983a 	sll	r17,r17,r3
   150bc:	1204b03a 	or	r2,r2,r8
   150c0:	1c007416 	blt	r3,r16,15294 <__adddf3+0x388>
   150c4:	1c21c83a 	sub	r16,r3,r16
   150c8:	82000044 	addi	r8,r16,1
   150cc:	00c007c4 	movi	r3,31
   150d0:	1a009116 	blt	r3,r8,15318 <__adddf3+0x40c>
   150d4:	00c00804 	movi	r3,32
   150d8:	1a07c83a 	sub	r3,r3,r8
   150dc:	8a08d83a 	srl	r4,r17,r8
   150e0:	88e2983a 	sll	r17,r17,r3
   150e4:	10c6983a 	sll	r3,r2,r3
   150e8:	1210d83a 	srl	r8,r2,r8
   150ec:	8804c03a 	cmpne	r2,r17,zero
   150f0:	1906b03a 	or	r3,r3,r4
   150f4:	18a2b03a 	or	r17,r3,r2
   150f8:	0021883a 	mov	r16,zero
   150fc:	003fa206 	br	14f88 <_gp+0xffff3a1c>
   15100:	1890b03a 	or	r8,r3,r2
   15104:	40017d26 	beq	r8,zero,156fc <__adddf3+0x7f0>
   15108:	1011883a 	mov	r8,r2
   1510c:	1823883a 	mov	r17,r3
   15110:	888001cc 	andi	r2,r17,7
   15114:	103f9e1e 	bne	r2,zero,14f90 <_gp+0xffff3a24>
   15118:	4004977a 	slli	r2,r8,29
   1511c:	8822d0fa 	srli	r17,r17,3
   15120:	4010d0fa 	srli	r8,r8,3
   15124:	9007883a 	mov	r3,r18
   15128:	1444b03a 	or	r2,r2,r17
   1512c:	0101ffc4 	movi	r4,2047
   15130:	81002426 	beq	r16,r4,151c4 <__adddf3+0x2b8>
   15134:	8120703a 	and	r16,r16,r4
   15138:	01000434 	movhi	r4,16
   1513c:	213fffc4 	addi	r4,r4,-1
   15140:	4110703a 	and	r8,r8,r4
   15144:	003fa806 	br	14fe8 <_gp+0xffff3a7c>
   15148:	8089c83a 	sub	r4,r16,r2
   1514c:	01005e0e 	bge	zero,r4,152c8 <__adddf3+0x3bc>
   15150:	10002b26 	beq	r2,zero,15200 <__adddf3+0x2f4>
   15154:	0081ffc4 	movi	r2,2047
   15158:	80bf8b26 	beq	r16,r2,14f88 <_gp+0xffff3a1c>
   1515c:	4a402034 	orhi	r9,r9,128
   15160:	00800e04 	movi	r2,56
   15164:	1100a40e 	bge	r2,r4,153f8 <__adddf3+0x4ec>
   15168:	498cb03a 	or	r6,r9,r6
   1516c:	300ac03a 	cmpne	r5,r6,zero
   15170:	0013883a 	mov	r9,zero
   15174:	2c4b883a 	add	r5,r5,r17
   15178:	2c63803a 	cmpltu	r17,r5,r17
   1517c:	4a11883a 	add	r8,r9,r8
   15180:	8a11883a 	add	r8,r17,r8
   15184:	2823883a 	mov	r17,r5
   15188:	4080202c 	andhi	r2,r8,128
   1518c:	103fe026 	beq	r2,zero,15110 <_gp+0xffff3ba4>
   15190:	84000044 	addi	r16,r16,1
   15194:	0081ffc4 	movi	r2,2047
   15198:	8080d226 	beq	r16,r2,154e4 <__adddf3+0x5d8>
   1519c:	00bfe034 	movhi	r2,65408
   151a0:	10bfffc4 	addi	r2,r2,-1
   151a4:	4090703a 	and	r8,r8,r2
   151a8:	880ad07a 	srli	r5,r17,1
   151ac:	400897fa 	slli	r4,r8,31
   151b0:	88c0004c 	andi	r3,r17,1
   151b4:	28e2b03a 	or	r17,r5,r3
   151b8:	4010d07a 	srli	r8,r8,1
   151bc:	2462b03a 	or	r17,r4,r17
   151c0:	003f7106 	br	14f88 <_gp+0xffff3a1c>
   151c4:	4088b03a 	or	r4,r8,r2
   151c8:	20014526 	beq	r4,zero,156e0 <__adddf3+0x7d4>
   151cc:	01000434 	movhi	r4,16
   151d0:	42000234 	orhi	r8,r8,8
   151d4:	213fffc4 	addi	r4,r4,-1
   151d8:	4110703a 	and	r8,r8,r4
   151dc:	003f8206 	br	14fe8 <_gp+0xffff3a7c>
   151e0:	18ffffc4 	addi	r3,r3,-1
   151e4:	1800491e 	bne	r3,zero,1530c <__adddf3+0x400>
   151e8:	898bc83a 	sub	r5,r17,r6
   151ec:	8963803a 	cmpltu	r17,r17,r5
   151f0:	4251c83a 	sub	r8,r8,r9
   151f4:	4451c83a 	sub	r8,r8,r17
   151f8:	2823883a 	mov	r17,r5
   151fc:	003f9f06 	br	1507c <_gp+0xffff3b10>
   15200:	4984b03a 	or	r2,r9,r6
   15204:	103f6026 	beq	r2,zero,14f88 <_gp+0xffff3a1c>
   15208:	213fffc4 	addi	r4,r4,-1
   1520c:	2000931e 	bne	r4,zero,1545c <__adddf3+0x550>
   15210:	898d883a 	add	r6,r17,r6
   15214:	3463803a 	cmpltu	r17,r6,r17
   15218:	4251883a 	add	r8,r8,r9
   1521c:	8a11883a 	add	r8,r17,r8
   15220:	3023883a 	mov	r17,r6
   15224:	003fd806 	br	15188 <_gp+0xffff3c1c>
   15228:	1800541e 	bne	r3,zero,1537c <__adddf3+0x470>
   1522c:	80800044 	addi	r2,r16,1
   15230:	1081ffcc 	andi	r2,r2,2047
   15234:	00c00044 	movi	r3,1
   15238:	1880a00e 	bge	r3,r2,154bc <__adddf3+0x5b0>
   1523c:	8989c83a 	sub	r4,r17,r6
   15240:	8905803a 	cmpltu	r2,r17,r4
   15244:	4267c83a 	sub	r19,r8,r9
   15248:	98a7c83a 	sub	r19,r19,r2
   1524c:	9880202c 	andhi	r2,r19,128
   15250:	10006326 	beq	r2,zero,153e0 <__adddf3+0x4d4>
   15254:	3463c83a 	sub	r17,r6,r17
   15258:	4a07c83a 	sub	r3,r9,r8
   1525c:	344d803a 	cmpltu	r6,r6,r17
   15260:	19a7c83a 	sub	r19,r3,r6
   15264:	3825883a 	mov	r18,r7
   15268:	983f8a1e 	bne	r19,zero,15094 <_gp+0xffff3b28>
   1526c:	8809883a 	mov	r4,r17
   15270:	0010fd40 	call	10fd4 <__clzsi2>
   15274:	10800804 	addi	r2,r2,32
   15278:	10fffe04 	addi	r3,r2,-8
   1527c:	010007c4 	movi	r4,31
   15280:	20ff890e 	bge	r4,r3,150a8 <_gp+0xffff3b3c>
   15284:	10bff604 	addi	r2,r2,-40
   15288:	8884983a 	sll	r2,r17,r2
   1528c:	0023883a 	mov	r17,zero
   15290:	1c3f8c0e 	bge	r3,r16,150c4 <_gp+0xffff3b58>
   15294:	023fe034 	movhi	r8,65408
   15298:	423fffc4 	addi	r8,r8,-1
   1529c:	80e1c83a 	sub	r16,r16,r3
   152a0:	1210703a 	and	r8,r2,r8
   152a4:	003f3806 	br	14f88 <_gp+0xffff3a1c>
   152a8:	9007883a 	mov	r3,r18
   152ac:	0011883a 	mov	r8,zero
   152b0:	0005883a 	mov	r2,zero
   152b4:	003f4c06 	br	14fe8 <_gp+0xffff3a7c>
   152b8:	498cb03a 	or	r6,r9,r6
   152bc:	300cc03a 	cmpne	r6,r6,zero
   152c0:	0007883a 	mov	r3,zero
   152c4:	003f6806 	br	15068 <_gp+0xffff3afc>
   152c8:	20009c1e 	bne	r4,zero,1553c <__adddf3+0x630>
   152cc:	80800044 	addi	r2,r16,1
   152d0:	1141ffcc 	andi	r5,r2,2047
   152d4:	01000044 	movi	r4,1
   152d8:	2140670e 	bge	r4,r5,15478 <__adddf3+0x56c>
   152dc:	0101ffc4 	movi	r4,2047
   152e0:	11007f26 	beq	r2,r4,154e0 <__adddf3+0x5d4>
   152e4:	898d883a 	add	r6,r17,r6
   152e8:	4247883a 	add	r3,r8,r9
   152ec:	3451803a 	cmpltu	r8,r6,r17
   152f0:	40d1883a 	add	r8,r8,r3
   152f4:	402297fa 	slli	r17,r8,31
   152f8:	300cd07a 	srli	r6,r6,1
   152fc:	4010d07a 	srli	r8,r8,1
   15300:	1021883a 	mov	r16,r2
   15304:	89a2b03a 	or	r17,r17,r6
   15308:	003f1f06 	br	14f88 <_gp+0xffff3a1c>
   1530c:	0081ffc4 	movi	r2,2047
   15310:	80bf481e 	bne	r16,r2,15034 <_gp+0xffff3ac8>
   15314:	003f1c06 	br	14f88 <_gp+0xffff3a1c>
   15318:	843ff844 	addi	r16,r16,-31
   1531c:	01000804 	movi	r4,32
   15320:	1406d83a 	srl	r3,r2,r16
   15324:	41005026 	beq	r8,r4,15468 <__adddf3+0x55c>
   15328:	01001004 	movi	r4,64
   1532c:	2211c83a 	sub	r8,r4,r8
   15330:	1204983a 	sll	r2,r2,r8
   15334:	88a2b03a 	or	r17,r17,r2
   15338:	8822c03a 	cmpne	r17,r17,zero
   1533c:	1c62b03a 	or	r17,r3,r17
   15340:	0011883a 	mov	r8,zero
   15344:	0021883a 	mov	r16,zero
   15348:	003f7106 	br	15110 <_gp+0xffff3ba4>
   1534c:	193ff804 	addi	r4,r3,-32
   15350:	00800804 	movi	r2,32
   15354:	4908d83a 	srl	r4,r9,r4
   15358:	18804526 	beq	r3,r2,15470 <__adddf3+0x564>
   1535c:	00801004 	movi	r2,64
   15360:	10c5c83a 	sub	r2,r2,r3
   15364:	4886983a 	sll	r3,r9,r2
   15368:	198cb03a 	or	r6,r3,r6
   1536c:	300cc03a 	cmpne	r6,r6,zero
   15370:	218cb03a 	or	r6,r4,r6
   15374:	0007883a 	mov	r3,zero
   15378:	003f3b06 	br	15068 <_gp+0xffff3afc>
   1537c:	80002a26 	beq	r16,zero,15428 <__adddf3+0x51c>
   15380:	0101ffc4 	movi	r4,2047
   15384:	11006826 	beq	r2,r4,15528 <__adddf3+0x61c>
   15388:	00c7c83a 	sub	r3,zero,r3
   1538c:	42002034 	orhi	r8,r8,128
   15390:	01000e04 	movi	r4,56
   15394:	20c07c16 	blt	r4,r3,15588 <__adddf3+0x67c>
   15398:	010007c4 	movi	r4,31
   1539c:	20c0da16 	blt	r4,r3,15708 <__adddf3+0x7fc>
   153a0:	01000804 	movi	r4,32
   153a4:	20c9c83a 	sub	r4,r4,r3
   153a8:	4114983a 	sll	r10,r8,r4
   153ac:	88cad83a 	srl	r5,r17,r3
   153b0:	8908983a 	sll	r4,r17,r4
   153b4:	40c6d83a 	srl	r3,r8,r3
   153b8:	5162b03a 	or	r17,r10,r5
   153bc:	2008c03a 	cmpne	r4,r4,zero
   153c0:	8922b03a 	or	r17,r17,r4
   153c4:	3463c83a 	sub	r17,r6,r17
   153c8:	48c7c83a 	sub	r3,r9,r3
   153cc:	344d803a 	cmpltu	r6,r6,r17
   153d0:	1991c83a 	sub	r8,r3,r6
   153d4:	1021883a 	mov	r16,r2
   153d8:	3825883a 	mov	r18,r7
   153dc:	003f2706 	br	1507c <_gp+0xffff3b10>
   153e0:	24d0b03a 	or	r8,r4,r19
   153e4:	40001b1e 	bne	r8,zero,15454 <__adddf3+0x548>
   153e8:	0005883a 	mov	r2,zero
   153ec:	0007883a 	mov	r3,zero
   153f0:	0021883a 	mov	r16,zero
   153f4:	003f4d06 	br	1512c <_gp+0xffff3bc0>
   153f8:	008007c4 	movi	r2,31
   153fc:	11003c16 	blt	r2,r4,154f0 <__adddf3+0x5e4>
   15400:	00800804 	movi	r2,32
   15404:	1105c83a 	sub	r2,r2,r4
   15408:	488e983a 	sll	r7,r9,r2
   1540c:	310ad83a 	srl	r5,r6,r4
   15410:	3084983a 	sll	r2,r6,r2
   15414:	4912d83a 	srl	r9,r9,r4
   15418:	394ab03a 	or	r5,r7,r5
   1541c:	1004c03a 	cmpne	r2,r2,zero
   15420:	288ab03a 	or	r5,r5,r2
   15424:	003f5306 	br	15174 <_gp+0xffff3c08>
   15428:	4448b03a 	or	r4,r8,r17
   1542c:	20003e26 	beq	r4,zero,15528 <__adddf3+0x61c>
   15430:	00c6303a 	nor	r3,zero,r3
   15434:	18003a1e 	bne	r3,zero,15520 <__adddf3+0x614>
   15438:	3463c83a 	sub	r17,r6,r17
   1543c:	4a07c83a 	sub	r3,r9,r8
   15440:	344d803a 	cmpltu	r6,r6,r17
   15444:	1991c83a 	sub	r8,r3,r6
   15448:	1021883a 	mov	r16,r2
   1544c:	3825883a 	mov	r18,r7
   15450:	003f0a06 	br	1507c <_gp+0xffff3b10>
   15454:	2023883a 	mov	r17,r4
   15458:	003f0d06 	br	15090 <_gp+0xffff3b24>
   1545c:	0081ffc4 	movi	r2,2047
   15460:	80bf3f1e 	bne	r16,r2,15160 <_gp+0xffff3bf4>
   15464:	003ec806 	br	14f88 <_gp+0xffff3a1c>
   15468:	0005883a 	mov	r2,zero
   1546c:	003fb106 	br	15334 <_gp+0xffff3dc8>
   15470:	0007883a 	mov	r3,zero
   15474:	003fbc06 	br	15368 <_gp+0xffff3dfc>
   15478:	4444b03a 	or	r2,r8,r17
   1547c:	8000871e 	bne	r16,zero,1569c <__adddf3+0x790>
   15480:	1000ba26 	beq	r2,zero,1576c <__adddf3+0x860>
   15484:	4984b03a 	or	r2,r9,r6
   15488:	103ebf26 	beq	r2,zero,14f88 <_gp+0xffff3a1c>
   1548c:	8985883a 	add	r2,r17,r6
   15490:	4247883a 	add	r3,r8,r9
   15494:	1451803a 	cmpltu	r8,r2,r17
   15498:	40d1883a 	add	r8,r8,r3
   1549c:	40c0202c 	andhi	r3,r8,128
   154a0:	1023883a 	mov	r17,r2
   154a4:	183f1a26 	beq	r3,zero,15110 <_gp+0xffff3ba4>
   154a8:	00bfe034 	movhi	r2,65408
   154ac:	10bfffc4 	addi	r2,r2,-1
   154b0:	2021883a 	mov	r16,r4
   154b4:	4090703a 	and	r8,r8,r2
   154b8:	003eb306 	br	14f88 <_gp+0xffff3a1c>
   154bc:	4444b03a 	or	r2,r8,r17
   154c0:	8000291e 	bne	r16,zero,15568 <__adddf3+0x65c>
   154c4:	10004b1e 	bne	r2,zero,155f4 <__adddf3+0x6e8>
   154c8:	4990b03a 	or	r8,r9,r6
   154cc:	40008b26 	beq	r8,zero,156fc <__adddf3+0x7f0>
   154d0:	4811883a 	mov	r8,r9
   154d4:	3023883a 	mov	r17,r6
   154d8:	3825883a 	mov	r18,r7
   154dc:	003eaa06 	br	14f88 <_gp+0xffff3a1c>
   154e0:	1021883a 	mov	r16,r2
   154e4:	0011883a 	mov	r8,zero
   154e8:	0005883a 	mov	r2,zero
   154ec:	003f0f06 	br	1512c <_gp+0xffff3bc0>
   154f0:	217ff804 	addi	r5,r4,-32
   154f4:	00800804 	movi	r2,32
   154f8:	494ad83a 	srl	r5,r9,r5
   154fc:	20807d26 	beq	r4,r2,156f4 <__adddf3+0x7e8>
   15500:	00801004 	movi	r2,64
   15504:	1109c83a 	sub	r4,r2,r4
   15508:	4912983a 	sll	r9,r9,r4
   1550c:	498cb03a 	or	r6,r9,r6
   15510:	300cc03a 	cmpne	r6,r6,zero
   15514:	298ab03a 	or	r5,r5,r6
   15518:	0013883a 	mov	r9,zero
   1551c:	003f1506 	br	15174 <_gp+0xffff3c08>
   15520:	0101ffc4 	movi	r4,2047
   15524:	113f9a1e 	bne	r2,r4,15390 <_gp+0xffff3e24>
   15528:	4811883a 	mov	r8,r9
   1552c:	3023883a 	mov	r17,r6
   15530:	1021883a 	mov	r16,r2
   15534:	3825883a 	mov	r18,r7
   15538:	003e9306 	br	14f88 <_gp+0xffff3a1c>
   1553c:	8000161e 	bne	r16,zero,15598 <__adddf3+0x68c>
   15540:	444ab03a 	or	r5,r8,r17
   15544:	28005126 	beq	r5,zero,1568c <__adddf3+0x780>
   15548:	0108303a 	nor	r4,zero,r4
   1554c:	20004d1e 	bne	r4,zero,15684 <__adddf3+0x778>
   15550:	89a3883a 	add	r17,r17,r6
   15554:	4253883a 	add	r9,r8,r9
   15558:	898d803a 	cmpltu	r6,r17,r6
   1555c:	3251883a 	add	r8,r6,r9
   15560:	1021883a 	mov	r16,r2
   15564:	003f0806 	br	15188 <_gp+0xffff3c1c>
   15568:	1000301e 	bne	r2,zero,1562c <__adddf3+0x720>
   1556c:	4984b03a 	or	r2,r9,r6
   15570:	10007126 	beq	r2,zero,15738 <__adddf3+0x82c>
   15574:	4811883a 	mov	r8,r9
   15578:	3023883a 	mov	r17,r6
   1557c:	3825883a 	mov	r18,r7
   15580:	0401ffc4 	movi	r16,2047
   15584:	003e8006 	br	14f88 <_gp+0xffff3a1c>
   15588:	4462b03a 	or	r17,r8,r17
   1558c:	8822c03a 	cmpne	r17,r17,zero
   15590:	0007883a 	mov	r3,zero
   15594:	003f8b06 	br	153c4 <_gp+0xffff3e58>
   15598:	0141ffc4 	movi	r5,2047
   1559c:	11403b26 	beq	r2,r5,1568c <__adddf3+0x780>
   155a0:	0109c83a 	sub	r4,zero,r4
   155a4:	42002034 	orhi	r8,r8,128
   155a8:	01400e04 	movi	r5,56
   155ac:	29006716 	blt	r5,r4,1574c <__adddf3+0x840>
   155b0:	014007c4 	movi	r5,31
   155b4:	29007016 	blt	r5,r4,15778 <__adddf3+0x86c>
   155b8:	01400804 	movi	r5,32
   155bc:	290bc83a 	sub	r5,r5,r4
   155c0:	4154983a 	sll	r10,r8,r5
   155c4:	890ed83a 	srl	r7,r17,r4
   155c8:	894a983a 	sll	r5,r17,r5
   155cc:	4108d83a 	srl	r4,r8,r4
   155d0:	51e2b03a 	or	r17,r10,r7
   155d4:	280ac03a 	cmpne	r5,r5,zero
   155d8:	8962b03a 	or	r17,r17,r5
   155dc:	89a3883a 	add	r17,r17,r6
   155e0:	2253883a 	add	r9,r4,r9
   155e4:	898d803a 	cmpltu	r6,r17,r6
   155e8:	3251883a 	add	r8,r6,r9
   155ec:	1021883a 	mov	r16,r2
   155f0:	003ee506 	br	15188 <_gp+0xffff3c1c>
   155f4:	4984b03a 	or	r2,r9,r6
   155f8:	103e6326 	beq	r2,zero,14f88 <_gp+0xffff3a1c>
   155fc:	8987c83a 	sub	r3,r17,r6
   15600:	88c9803a 	cmpltu	r4,r17,r3
   15604:	4245c83a 	sub	r2,r8,r9
   15608:	1105c83a 	sub	r2,r2,r4
   1560c:	1100202c 	andhi	r4,r2,128
   15610:	203ebb26 	beq	r4,zero,15100 <_gp+0xffff3b94>
   15614:	3463c83a 	sub	r17,r6,r17
   15618:	4a07c83a 	sub	r3,r9,r8
   1561c:	344d803a 	cmpltu	r6,r6,r17
   15620:	1991c83a 	sub	r8,r3,r6
   15624:	3825883a 	mov	r18,r7
   15628:	003e5706 	br	14f88 <_gp+0xffff3a1c>
   1562c:	4984b03a 	or	r2,r9,r6
   15630:	10002e26 	beq	r2,zero,156ec <__adddf3+0x7e0>
   15634:	4004d0fa 	srli	r2,r8,3
   15638:	8822d0fa 	srli	r17,r17,3
   1563c:	4010977a 	slli	r8,r8,29
   15640:	10c0022c 	andhi	r3,r2,8
   15644:	4462b03a 	or	r17,r8,r17
   15648:	18000826 	beq	r3,zero,1566c <__adddf3+0x760>
   1564c:	4808d0fa 	srli	r4,r9,3
   15650:	20c0022c 	andhi	r3,r4,8
   15654:	1800051e 	bne	r3,zero,1566c <__adddf3+0x760>
   15658:	300cd0fa 	srli	r6,r6,3
   1565c:	4806977a 	slli	r3,r9,29
   15660:	2005883a 	mov	r2,r4
   15664:	3825883a 	mov	r18,r7
   15668:	19a2b03a 	or	r17,r3,r6
   1566c:	8810d77a 	srli	r8,r17,29
   15670:	100490fa 	slli	r2,r2,3
   15674:	882290fa 	slli	r17,r17,3
   15678:	0401ffc4 	movi	r16,2047
   1567c:	4090b03a 	or	r8,r8,r2
   15680:	003e4106 	br	14f88 <_gp+0xffff3a1c>
   15684:	0141ffc4 	movi	r5,2047
   15688:	117fc71e 	bne	r2,r5,155a8 <_gp+0xffff403c>
   1568c:	4811883a 	mov	r8,r9
   15690:	3023883a 	mov	r17,r6
   15694:	1021883a 	mov	r16,r2
   15698:	003e3b06 	br	14f88 <_gp+0xffff3a1c>
   1569c:	10002f26 	beq	r2,zero,1575c <__adddf3+0x850>
   156a0:	4984b03a 	or	r2,r9,r6
   156a4:	10001126 	beq	r2,zero,156ec <__adddf3+0x7e0>
   156a8:	4004d0fa 	srli	r2,r8,3
   156ac:	8822d0fa 	srli	r17,r17,3
   156b0:	4010977a 	slli	r8,r8,29
   156b4:	10c0022c 	andhi	r3,r2,8
   156b8:	4462b03a 	or	r17,r8,r17
   156bc:	183feb26 	beq	r3,zero,1566c <_gp+0xffff4100>
   156c0:	4808d0fa 	srli	r4,r9,3
   156c4:	20c0022c 	andhi	r3,r4,8
   156c8:	183fe81e 	bne	r3,zero,1566c <_gp+0xffff4100>
   156cc:	300cd0fa 	srli	r6,r6,3
   156d0:	4806977a 	slli	r3,r9,29
   156d4:	2005883a 	mov	r2,r4
   156d8:	19a2b03a 	or	r17,r3,r6
   156dc:	003fe306 	br	1566c <_gp+0xffff4100>
   156e0:	0011883a 	mov	r8,zero
   156e4:	0005883a 	mov	r2,zero
   156e8:	003e3f06 	br	14fe8 <_gp+0xffff3a7c>
   156ec:	0401ffc4 	movi	r16,2047
   156f0:	003e2506 	br	14f88 <_gp+0xffff3a1c>
   156f4:	0013883a 	mov	r9,zero
   156f8:	003f8406 	br	1550c <_gp+0xffff3fa0>
   156fc:	0005883a 	mov	r2,zero
   15700:	0007883a 	mov	r3,zero
   15704:	003e8906 	br	1512c <_gp+0xffff3bc0>
   15708:	197ff804 	addi	r5,r3,-32
   1570c:	01000804 	movi	r4,32
   15710:	414ad83a 	srl	r5,r8,r5
   15714:	19002426 	beq	r3,r4,157a8 <__adddf3+0x89c>
   15718:	01001004 	movi	r4,64
   1571c:	20c7c83a 	sub	r3,r4,r3
   15720:	40c6983a 	sll	r3,r8,r3
   15724:	1c46b03a 	or	r3,r3,r17
   15728:	1806c03a 	cmpne	r3,r3,zero
   1572c:	28e2b03a 	or	r17,r5,r3
   15730:	0007883a 	mov	r3,zero
   15734:	003f2306 	br	153c4 <_gp+0xffff3e58>
   15738:	0007883a 	mov	r3,zero
   1573c:	5811883a 	mov	r8,r11
   15740:	00bfffc4 	movi	r2,-1
   15744:	0401ffc4 	movi	r16,2047
   15748:	003e7806 	br	1512c <_gp+0xffff3bc0>
   1574c:	4462b03a 	or	r17,r8,r17
   15750:	8822c03a 	cmpne	r17,r17,zero
   15754:	0009883a 	mov	r4,zero
   15758:	003fa006 	br	155dc <_gp+0xffff4070>
   1575c:	4811883a 	mov	r8,r9
   15760:	3023883a 	mov	r17,r6
   15764:	0401ffc4 	movi	r16,2047
   15768:	003e0706 	br	14f88 <_gp+0xffff3a1c>
   1576c:	4811883a 	mov	r8,r9
   15770:	3023883a 	mov	r17,r6
   15774:	003e0406 	br	14f88 <_gp+0xffff3a1c>
   15778:	21fff804 	addi	r7,r4,-32
   1577c:	01400804 	movi	r5,32
   15780:	41ced83a 	srl	r7,r8,r7
   15784:	21400a26 	beq	r4,r5,157b0 <__adddf3+0x8a4>
   15788:	01401004 	movi	r5,64
   1578c:	2909c83a 	sub	r4,r5,r4
   15790:	4108983a 	sll	r4,r8,r4
   15794:	2448b03a 	or	r4,r4,r17
   15798:	2008c03a 	cmpne	r4,r4,zero
   1579c:	3922b03a 	or	r17,r7,r4
   157a0:	0009883a 	mov	r4,zero
   157a4:	003f8d06 	br	155dc <_gp+0xffff4070>
   157a8:	0007883a 	mov	r3,zero
   157ac:	003fdd06 	br	15724 <_gp+0xffff41b8>
   157b0:	0009883a 	mov	r4,zero
   157b4:	003ff706 	br	15794 <_gp+0xffff4228>

000157b8 <__divdf3>:
   157b8:	defff004 	addi	sp,sp,-64
   157bc:	dc800815 	stw	r18,32(sp)
   157c0:	2824d53a 	srli	r18,r5,20
   157c4:	dd800c15 	stw	r22,48(sp)
   157c8:	282cd7fa 	srli	r22,r5,31
   157cc:	dc000615 	stw	r16,24(sp)
   157d0:	04000434 	movhi	r16,16
   157d4:	843fffc4 	addi	r16,r16,-1
   157d8:	dfc00f15 	stw	ra,60(sp)
   157dc:	df000e15 	stw	fp,56(sp)
   157e0:	ddc00d15 	stw	r23,52(sp)
   157e4:	dd400b15 	stw	r21,44(sp)
   157e8:	dd000a15 	stw	r20,40(sp)
   157ec:	dcc00915 	stw	r19,36(sp)
   157f0:	dc400715 	stw	r17,28(sp)
   157f4:	9481ffcc 	andi	r18,r18,2047
   157f8:	2c20703a 	and	r16,r5,r16
   157fc:	b2003fcc 	andi	r8,r22,255
   15800:	90006126 	beq	r18,zero,15988 <__divdf3+0x1d0>
   15804:	0081ffc4 	movi	r2,2047
   15808:	202b883a 	mov	r21,r4
   1580c:	90803726 	beq	r18,r2,158ec <__divdf3+0x134>
   15810:	80800434 	orhi	r2,r16,16
   15814:	100490fa 	slli	r2,r2,3
   15818:	2020d77a 	srli	r16,r4,29
   1581c:	202a90fa 	slli	r21,r4,3
   15820:	94bf0044 	addi	r18,r18,-1023
   15824:	80a0b03a 	or	r16,r16,r2
   15828:	0013883a 	mov	r9,zero
   1582c:	000b883a 	mov	r5,zero
   15830:	3806d53a 	srli	r3,r7,20
   15834:	382ed7fa 	srli	r23,r7,31
   15838:	04400434 	movhi	r17,16
   1583c:	8c7fffc4 	addi	r17,r17,-1
   15840:	18c1ffcc 	andi	r3,r3,2047
   15844:	3029883a 	mov	r20,r6
   15848:	3c62703a 	and	r17,r7,r17
   1584c:	bf003fcc 	andi	fp,r23,255
   15850:	18006e26 	beq	r3,zero,15a0c <__divdf3+0x254>
   15854:	0081ffc4 	movi	r2,2047
   15858:	18806626 	beq	r3,r2,159f4 <__divdf3+0x23c>
   1585c:	88800434 	orhi	r2,r17,16
   15860:	100490fa 	slli	r2,r2,3
   15864:	3022d77a 	srli	r17,r6,29
   15868:	302890fa 	slli	r20,r6,3
   1586c:	18ff0044 	addi	r3,r3,-1023
   15870:	88a2b03a 	or	r17,r17,r2
   15874:	000f883a 	mov	r7,zero
   15878:	b5e6f03a 	xor	r19,r22,r23
   1587c:	3a4cb03a 	or	r6,r7,r9
   15880:	008003c4 	movi	r2,15
   15884:	9809883a 	mov	r4,r19
   15888:	90c7c83a 	sub	r3,r18,r3
   1588c:	9cc03fcc 	andi	r19,r19,255
   15890:	11809636 	bltu	r2,r6,15aec <__divdf3+0x334>
   15894:	300c90ba 	slli	r6,r6,2
   15898:	00800074 	movhi	r2,1
   1589c:	10962b04 	addi	r2,r2,22700
   158a0:	308d883a 	add	r6,r6,r2
   158a4:	30800017 	ldw	r2,0(r6)
   158a8:	1000683a 	jmp	r2
   158ac:	00015aec 	andhi	zero,zero,1387
   158b0:	00015924 	muli	zero,zero,1380
   158b4:	00015adc 	xori	zero,zero,1387
   158b8:	00015918 	cmpnei	zero,zero,1380
   158bc:	00015adc 	xori	zero,zero,1387
   158c0:	00015ab0 	cmpltui	zero,zero,1386
   158c4:	00015adc 	xori	zero,zero,1387
   158c8:	00015918 	cmpnei	zero,zero,1380
   158cc:	00015924 	muli	zero,zero,1380
   158d0:	00015924 	muli	zero,zero,1380
   158d4:	00015ab0 	cmpltui	zero,zero,1386
   158d8:	00015918 	cmpnei	zero,zero,1380
   158dc:	00015908 	cmpgei	zero,zero,1380
   158e0:	00015908 	cmpgei	zero,zero,1380
   158e4:	00015908 	cmpgei	zero,zero,1380
   158e8:	00015e74 	movhi	zero,1401
   158ec:	2404b03a 	or	r2,r4,r16
   158f0:	10006c1e 	bne	r2,zero,15aa4 <__divdf3+0x2ec>
   158f4:	02400204 	movi	r9,8
   158f8:	0021883a 	mov	r16,zero
   158fc:	002b883a 	mov	r21,zero
   15900:	01400084 	movi	r5,2
   15904:	003fca06 	br	15830 <_gp+0xffff42c4>
   15908:	8023883a 	mov	r17,r16
   1590c:	a829883a 	mov	r20,r21
   15910:	4039883a 	mov	fp,r8
   15914:	280f883a 	mov	r7,r5
   15918:	00800084 	movi	r2,2
   1591c:	3881601e 	bne	r7,r2,15ea0 <__divdf3+0x6e8>
   15920:	e027883a 	mov	r19,fp
   15924:	9900004c 	andi	r4,r19,1
   15928:	0081ffc4 	movi	r2,2047
   1592c:	0021883a 	mov	r16,zero
   15930:	002b883a 	mov	r21,zero
   15934:	1004953a 	slli	r2,r2,20
   15938:	20c03fcc 	andi	r3,r4,255
   1593c:	01400434 	movhi	r5,16
   15940:	297fffc4 	addi	r5,r5,-1
   15944:	180697fa 	slli	r3,r3,31
   15948:	8160703a 	and	r16,r16,r5
   1594c:	80a0b03a 	or	r16,r16,r2
   15950:	80c6b03a 	or	r3,r16,r3
   15954:	a805883a 	mov	r2,r21
   15958:	dfc00f17 	ldw	ra,60(sp)
   1595c:	df000e17 	ldw	fp,56(sp)
   15960:	ddc00d17 	ldw	r23,52(sp)
   15964:	dd800c17 	ldw	r22,48(sp)
   15968:	dd400b17 	ldw	r21,44(sp)
   1596c:	dd000a17 	ldw	r20,40(sp)
   15970:	dcc00917 	ldw	r19,36(sp)
   15974:	dc800817 	ldw	r18,32(sp)
   15978:	dc400717 	ldw	r17,28(sp)
   1597c:	dc000617 	ldw	r16,24(sp)
   15980:	dec01004 	addi	sp,sp,64
   15984:	f800283a 	ret
   15988:	2404b03a 	or	r2,r4,r16
   1598c:	2023883a 	mov	r17,r4
   15990:	10003f26 	beq	r2,zero,15a90 <__divdf3+0x2d8>
   15994:	80015e26 	beq	r16,zero,15f10 <__divdf3+0x758>
   15998:	8009883a 	mov	r4,r16
   1599c:	d9800215 	stw	r6,8(sp)
   159a0:	d9c00515 	stw	r7,20(sp)
   159a4:	da000415 	stw	r8,16(sp)
   159a8:	0010fd40 	call	10fd4 <__clzsi2>
   159ac:	d9800217 	ldw	r6,8(sp)
   159b0:	d9c00517 	ldw	r7,20(sp)
   159b4:	da000417 	ldw	r8,16(sp)
   159b8:	113ffd44 	addi	r4,r2,-11
   159bc:	00c00704 	movi	r3,28
   159c0:	19014f16 	blt	r3,r4,15f00 <__divdf3+0x748>
   159c4:	00c00744 	movi	r3,29
   159c8:	157ffe04 	addi	r21,r2,-8
   159cc:	1907c83a 	sub	r3,r3,r4
   159d0:	8560983a 	sll	r16,r16,r21
   159d4:	88c6d83a 	srl	r3,r17,r3
   159d8:	8d6a983a 	sll	r21,r17,r21
   159dc:	1c20b03a 	or	r16,r3,r16
   159e0:	1080fcc4 	addi	r2,r2,1011
   159e4:	00a5c83a 	sub	r18,zero,r2
   159e8:	0013883a 	mov	r9,zero
   159ec:	000b883a 	mov	r5,zero
   159f0:	003f8f06 	br	15830 <_gp+0xffff42c4>
   159f4:	3444b03a 	or	r2,r6,r17
   159f8:	1000231e 	bne	r2,zero,15a88 <__divdf3+0x2d0>
   159fc:	0023883a 	mov	r17,zero
   15a00:	0029883a 	mov	r20,zero
   15a04:	01c00084 	movi	r7,2
   15a08:	003f9b06 	br	15878 <_gp+0xffff430c>
   15a0c:	3444b03a 	or	r2,r6,r17
   15a10:	10001926 	beq	r2,zero,15a78 <__divdf3+0x2c0>
   15a14:	88014b26 	beq	r17,zero,15f44 <__divdf3+0x78c>
   15a18:	8809883a 	mov	r4,r17
   15a1c:	d9400115 	stw	r5,4(sp)
   15a20:	d9800215 	stw	r6,8(sp)
   15a24:	da000415 	stw	r8,16(sp)
   15a28:	da400315 	stw	r9,12(sp)
   15a2c:	0010fd40 	call	10fd4 <__clzsi2>
   15a30:	d9400117 	ldw	r5,4(sp)
   15a34:	d9800217 	ldw	r6,8(sp)
   15a38:	da000417 	ldw	r8,16(sp)
   15a3c:	da400317 	ldw	r9,12(sp)
   15a40:	113ffd44 	addi	r4,r2,-11
   15a44:	00c00704 	movi	r3,28
   15a48:	19013a16 	blt	r3,r4,15f34 <__divdf3+0x77c>
   15a4c:	00c00744 	movi	r3,29
   15a50:	153ffe04 	addi	r20,r2,-8
   15a54:	1907c83a 	sub	r3,r3,r4
   15a58:	8d22983a 	sll	r17,r17,r20
   15a5c:	30c6d83a 	srl	r3,r6,r3
   15a60:	3528983a 	sll	r20,r6,r20
   15a64:	1c62b03a 	or	r17,r3,r17
   15a68:	1080fcc4 	addi	r2,r2,1011
   15a6c:	0087c83a 	sub	r3,zero,r2
   15a70:	000f883a 	mov	r7,zero
   15a74:	003f8006 	br	15878 <_gp+0xffff430c>
   15a78:	0023883a 	mov	r17,zero
   15a7c:	0029883a 	mov	r20,zero
   15a80:	01c00044 	movi	r7,1
   15a84:	003f7c06 	br	15878 <_gp+0xffff430c>
   15a88:	01c000c4 	movi	r7,3
   15a8c:	003f7a06 	br	15878 <_gp+0xffff430c>
   15a90:	02400104 	movi	r9,4
   15a94:	0021883a 	mov	r16,zero
   15a98:	002b883a 	mov	r21,zero
   15a9c:	01400044 	movi	r5,1
   15aa0:	003f6306 	br	15830 <_gp+0xffff42c4>
   15aa4:	02400304 	movi	r9,12
   15aa8:	014000c4 	movi	r5,3
   15aac:	003f6006 	br	15830 <_gp+0xffff42c4>
   15ab0:	04000434 	movhi	r16,16
   15ab4:	0009883a 	mov	r4,zero
   15ab8:	843fffc4 	addi	r16,r16,-1
   15abc:	057fffc4 	movi	r21,-1
   15ac0:	0081ffc4 	movi	r2,2047
   15ac4:	003f9b06 	br	15934 <_gp+0xffff43c8>
   15ac8:	00c00044 	movi	r3,1
   15acc:	1887c83a 	sub	r3,r3,r2
   15ad0:	01000e04 	movi	r4,56
   15ad4:	20c1530e 	bge	r4,r3,16024 <__divdf3+0x86c>
   15ad8:	9900004c 	andi	r4,r19,1
   15adc:	0005883a 	mov	r2,zero
   15ae0:	0021883a 	mov	r16,zero
   15ae4:	002b883a 	mov	r21,zero
   15ae8:	003f9206 	br	15934 <_gp+0xffff43c8>
   15aec:	8c012e36 	bltu	r17,r16,15fa8 <__divdf3+0x7f0>
   15af0:	84412c26 	beq	r16,r17,15fa4 <__divdf3+0x7ec>
   15af4:	a82f883a 	mov	r23,r21
   15af8:	18ffffc4 	addi	r3,r3,-1
   15afc:	002b883a 	mov	r21,zero
   15b00:	a004d63a 	srli	r2,r20,24
   15b04:	8822923a 	slli	r17,r17,8
   15b08:	a028923a 	slli	r20,r20,8
   15b0c:	8009883a 	mov	r4,r16
   15b10:	88acb03a 	or	r22,r17,r2
   15b14:	dd000015 	stw	r20,0(sp)
   15b18:	b028d43a 	srli	r20,r22,16
   15b1c:	d8c00215 	stw	r3,8(sp)
   15b20:	b4bfffcc 	andi	r18,r22,65535
   15b24:	a00b883a 	mov	r5,r20
   15b28:	0014e500 	call	14e50 <__udivsi3>
   15b2c:	100b883a 	mov	r5,r2
   15b30:	9009883a 	mov	r4,r18
   15b34:	1023883a 	mov	r17,r2
   15b38:	00110380 	call	11038 <__mulsi3>
   15b3c:	8009883a 	mov	r4,r16
   15b40:	a00b883a 	mov	r5,r20
   15b44:	1039883a 	mov	fp,r2
   15b48:	0014eb40 	call	14eb4 <__umodsi3>
   15b4c:	1004943a 	slli	r2,r2,16
   15b50:	b808d43a 	srli	r4,r23,16
   15b54:	d8c00217 	ldw	r3,8(sp)
   15b58:	2084b03a 	or	r2,r4,r2
   15b5c:	1700062e 	bgeu	r2,fp,15b78 <__divdf3+0x3c0>
   15b60:	1585883a 	add	r2,r2,r22
   15b64:	893fffc4 	addi	r4,r17,-1
   15b68:	15811d36 	bltu	r2,r22,15fe0 <__divdf3+0x828>
   15b6c:	17011c2e 	bgeu	r2,fp,15fe0 <__divdf3+0x828>
   15b70:	8c7fff84 	addi	r17,r17,-2
   15b74:	1585883a 	add	r2,r2,r22
   15b78:	1739c83a 	sub	fp,r2,fp
   15b7c:	a00b883a 	mov	r5,r20
   15b80:	e009883a 	mov	r4,fp
   15b84:	d8c00215 	stw	r3,8(sp)
   15b88:	0014e500 	call	14e50 <__udivsi3>
   15b8c:	100b883a 	mov	r5,r2
   15b90:	9009883a 	mov	r4,r18
   15b94:	1021883a 	mov	r16,r2
   15b98:	00110380 	call	11038 <__mulsi3>
   15b9c:	a00b883a 	mov	r5,r20
   15ba0:	e009883a 	mov	r4,fp
   15ba4:	d8800415 	stw	r2,16(sp)
   15ba8:	0014eb40 	call	14eb4 <__umodsi3>
   15bac:	1004943a 	slli	r2,r2,16
   15bb0:	da000417 	ldw	r8,16(sp)
   15bb4:	bdffffcc 	andi	r23,r23,65535
   15bb8:	b884b03a 	or	r2,r23,r2
   15bbc:	d8c00217 	ldw	r3,8(sp)
   15bc0:	1200062e 	bgeu	r2,r8,15bdc <__divdf3+0x424>
   15bc4:	1585883a 	add	r2,r2,r22
   15bc8:	813fffc4 	addi	r4,r16,-1
   15bcc:	15810236 	bltu	r2,r22,15fd8 <__divdf3+0x820>
   15bd0:	1201012e 	bgeu	r2,r8,15fd8 <__divdf3+0x820>
   15bd4:	843fff84 	addi	r16,r16,-2
   15bd8:	1585883a 	add	r2,r2,r22
   15bdc:	8822943a 	slli	r17,r17,16
   15be0:	d9800017 	ldw	r6,0(sp)
   15be4:	1211c83a 	sub	r8,r2,r8
   15be8:	8c22b03a 	or	r17,r17,r16
   15bec:	373fffcc 	andi	fp,r6,65535
   15bf0:	8abfffcc 	andi	r10,r17,65535
   15bf4:	8820d43a 	srli	r16,r17,16
   15bf8:	5009883a 	mov	r4,r10
   15bfc:	e00b883a 	mov	r5,fp
   15c00:	302ed43a 	srli	r23,r6,16
   15c04:	d8c00215 	stw	r3,8(sp)
   15c08:	da000415 	stw	r8,16(sp)
   15c0c:	da800115 	stw	r10,4(sp)
   15c10:	00110380 	call	11038 <__mulsi3>
   15c14:	800b883a 	mov	r5,r16
   15c18:	e009883a 	mov	r4,fp
   15c1c:	d8800515 	stw	r2,20(sp)
   15c20:	00110380 	call	11038 <__mulsi3>
   15c24:	8009883a 	mov	r4,r16
   15c28:	b80b883a 	mov	r5,r23
   15c2c:	d8800315 	stw	r2,12(sp)
   15c30:	00110380 	call	11038 <__mulsi3>
   15c34:	da800117 	ldw	r10,4(sp)
   15c38:	b80b883a 	mov	r5,r23
   15c3c:	1021883a 	mov	r16,r2
   15c40:	5009883a 	mov	r4,r10
   15c44:	00110380 	call	11038 <__mulsi3>
   15c48:	d9c00517 	ldw	r7,20(sp)
   15c4c:	da400317 	ldw	r9,12(sp)
   15c50:	d8c00217 	ldw	r3,8(sp)
   15c54:	3808d43a 	srli	r4,r7,16
   15c58:	1245883a 	add	r2,r2,r9
   15c5c:	da000417 	ldw	r8,16(sp)
   15c60:	2085883a 	add	r2,r4,r2
   15c64:	1240022e 	bgeu	r2,r9,15c70 <__divdf3+0x4b8>
   15c68:	01000074 	movhi	r4,1
   15c6c:	8121883a 	add	r16,r16,r4
   15c70:	1008d43a 	srli	r4,r2,16
   15c74:	1004943a 	slli	r2,r2,16
   15c78:	39ffffcc 	andi	r7,r7,65535
   15c7c:	2409883a 	add	r4,r4,r16
   15c80:	11c5883a 	add	r2,r2,r7
   15c84:	4100bb36 	bltu	r8,r4,15f74 <__divdf3+0x7bc>
   15c88:	4100d726 	beq	r8,r4,15fe8 <__divdf3+0x830>
   15c8c:	4109c83a 	sub	r4,r8,r4
   15c90:	a8a1c83a 	sub	r16,r21,r2
   15c94:	ac2b803a 	cmpltu	r21,r21,r16
   15c98:	256bc83a 	sub	r21,r4,r21
   15c9c:	b540d926 	beq	r22,r21,16004 <__divdf3+0x84c>
   15ca0:	a00b883a 	mov	r5,r20
   15ca4:	a809883a 	mov	r4,r21
   15ca8:	d8c00215 	stw	r3,8(sp)
   15cac:	0014e500 	call	14e50 <__udivsi3>
   15cb0:	100b883a 	mov	r5,r2
   15cb4:	9009883a 	mov	r4,r18
   15cb8:	d8800515 	stw	r2,20(sp)
   15cbc:	00110380 	call	11038 <__mulsi3>
   15cc0:	a809883a 	mov	r4,r21
   15cc4:	a00b883a 	mov	r5,r20
   15cc8:	d8800415 	stw	r2,16(sp)
   15ccc:	0014eb40 	call	14eb4 <__umodsi3>
   15cd0:	1004943a 	slli	r2,r2,16
   15cd4:	8008d43a 	srli	r4,r16,16
   15cd8:	da000417 	ldw	r8,16(sp)
   15cdc:	d8c00217 	ldw	r3,8(sp)
   15ce0:	2084b03a 	or	r2,r4,r2
   15ce4:	d9c00517 	ldw	r7,20(sp)
   15ce8:	1200062e 	bgeu	r2,r8,15d04 <__divdf3+0x54c>
   15cec:	1585883a 	add	r2,r2,r22
   15cf0:	393fffc4 	addi	r4,r7,-1
   15cf4:	1580c536 	bltu	r2,r22,1600c <__divdf3+0x854>
   15cf8:	1200c42e 	bgeu	r2,r8,1600c <__divdf3+0x854>
   15cfc:	39ffff84 	addi	r7,r7,-2
   15d00:	1585883a 	add	r2,r2,r22
   15d04:	122bc83a 	sub	r21,r2,r8
   15d08:	a00b883a 	mov	r5,r20
   15d0c:	a809883a 	mov	r4,r21
   15d10:	d8c00215 	stw	r3,8(sp)
   15d14:	d9c00515 	stw	r7,20(sp)
   15d18:	0014e500 	call	14e50 <__udivsi3>
   15d1c:	9009883a 	mov	r4,r18
   15d20:	100b883a 	mov	r5,r2
   15d24:	d8800415 	stw	r2,16(sp)
   15d28:	00110380 	call	11038 <__mulsi3>
   15d2c:	a809883a 	mov	r4,r21
   15d30:	a00b883a 	mov	r5,r20
   15d34:	1025883a 	mov	r18,r2
   15d38:	0014eb40 	call	14eb4 <__umodsi3>
   15d3c:	1004943a 	slli	r2,r2,16
   15d40:	813fffcc 	andi	r4,r16,65535
   15d44:	d8c00217 	ldw	r3,8(sp)
   15d48:	20a0b03a 	or	r16,r4,r2
   15d4c:	d9c00517 	ldw	r7,20(sp)
   15d50:	da000417 	ldw	r8,16(sp)
   15d54:	8480062e 	bgeu	r16,r18,15d70 <__divdf3+0x5b8>
   15d58:	85a1883a 	add	r16,r16,r22
   15d5c:	40bfffc4 	addi	r2,r8,-1
   15d60:	8580ac36 	bltu	r16,r22,16014 <__divdf3+0x85c>
   15d64:	8480ab2e 	bgeu	r16,r18,16014 <__divdf3+0x85c>
   15d68:	423fff84 	addi	r8,r8,-2
   15d6c:	85a1883a 	add	r16,r16,r22
   15d70:	3804943a 	slli	r2,r7,16
   15d74:	84a1c83a 	sub	r16,r16,r18
   15d78:	e009883a 	mov	r4,fp
   15d7c:	1228b03a 	or	r20,r2,r8
   15d80:	a1ffffcc 	andi	r7,r20,65535
   15d84:	a024d43a 	srli	r18,r20,16
   15d88:	380b883a 	mov	r5,r7
   15d8c:	d8c00215 	stw	r3,8(sp)
   15d90:	d9c00515 	stw	r7,20(sp)
   15d94:	00110380 	call	11038 <__mulsi3>
   15d98:	900b883a 	mov	r5,r18
   15d9c:	e009883a 	mov	r4,fp
   15da0:	102b883a 	mov	r21,r2
   15da4:	00110380 	call	11038 <__mulsi3>
   15da8:	900b883a 	mov	r5,r18
   15dac:	b809883a 	mov	r4,r23
   15db0:	1039883a 	mov	fp,r2
   15db4:	00110380 	call	11038 <__mulsi3>
   15db8:	d9c00517 	ldw	r7,20(sp)
   15dbc:	b80b883a 	mov	r5,r23
   15dc0:	1025883a 	mov	r18,r2
   15dc4:	3809883a 	mov	r4,r7
   15dc8:	00110380 	call	11038 <__mulsi3>
   15dcc:	a808d43a 	srli	r4,r21,16
   15dd0:	1705883a 	add	r2,r2,fp
   15dd4:	d8c00217 	ldw	r3,8(sp)
   15dd8:	2085883a 	add	r2,r4,r2
   15ddc:	1700022e 	bgeu	r2,fp,15de8 <__divdf3+0x630>
   15de0:	01000074 	movhi	r4,1
   15de4:	9125883a 	add	r18,r18,r4
   15de8:	1008d43a 	srli	r4,r2,16
   15dec:	1004943a 	slli	r2,r2,16
   15df0:	ad7fffcc 	andi	r21,r21,65535
   15df4:	2489883a 	add	r4,r4,r18
   15df8:	1545883a 	add	r2,r2,r21
   15dfc:	81003836 	bltu	r16,r4,15ee0 <__divdf3+0x728>
   15e00:	81003626 	beq	r16,r4,15edc <__divdf3+0x724>
   15e04:	a5000054 	ori	r20,r20,1
   15e08:	1880ffc4 	addi	r2,r3,1023
   15e0c:	00bf2e0e 	bge	zero,r2,15ac8 <_gp+0xffff455c>
   15e10:	a10001cc 	andi	r4,r20,7
   15e14:	20000726 	beq	r4,zero,15e34 <__divdf3+0x67c>
   15e18:	a10003cc 	andi	r4,r20,15
   15e1c:	01400104 	movi	r5,4
   15e20:	21400426 	beq	r4,r5,15e34 <__divdf3+0x67c>
   15e24:	a149883a 	add	r4,r20,r5
   15e28:	2529803a 	cmpltu	r20,r4,r20
   15e2c:	8d23883a 	add	r17,r17,r20
   15e30:	2029883a 	mov	r20,r4
   15e34:	8900402c 	andhi	r4,r17,256
   15e38:	20000426 	beq	r4,zero,15e4c <__divdf3+0x694>
   15e3c:	18810004 	addi	r2,r3,1024
   15e40:	00ffc034 	movhi	r3,65280
   15e44:	18ffffc4 	addi	r3,r3,-1
   15e48:	88e2703a 	and	r17,r17,r3
   15e4c:	00c1ff84 	movi	r3,2046
   15e50:	18beb416 	blt	r3,r2,15924 <_gp+0xffff43b8>
   15e54:	a028d0fa 	srli	r20,r20,3
   15e58:	882a977a 	slli	r21,r17,29
   15e5c:	8820927a 	slli	r16,r17,9
   15e60:	1081ffcc 	andi	r2,r2,2047
   15e64:	ad2ab03a 	or	r21,r21,r20
   15e68:	8020d33a 	srli	r16,r16,12
   15e6c:	9900004c 	andi	r4,r19,1
   15e70:	003eb006 	br	15934 <_gp+0xffff43c8>
   15e74:	8080022c 	andhi	r2,r16,8
   15e78:	10001226 	beq	r2,zero,15ec4 <__divdf3+0x70c>
   15e7c:	8880022c 	andhi	r2,r17,8
   15e80:	1000101e 	bne	r2,zero,15ec4 <__divdf3+0x70c>
   15e84:	00800434 	movhi	r2,16
   15e88:	8c000234 	orhi	r16,r17,8
   15e8c:	10bfffc4 	addi	r2,r2,-1
   15e90:	b809883a 	mov	r4,r23
   15e94:	80a0703a 	and	r16,r16,r2
   15e98:	a02b883a 	mov	r21,r20
   15e9c:	003f0806 	br	15ac0 <_gp+0xffff4554>
   15ea0:	008000c4 	movi	r2,3
   15ea4:	3880b126 	beq	r7,r2,1616c <__divdf3+0x9b4>
   15ea8:	00800044 	movi	r2,1
   15eac:	38805b1e 	bne	r7,r2,1601c <__divdf3+0x864>
   15eb0:	e009883a 	mov	r4,fp
   15eb4:	0005883a 	mov	r2,zero
   15eb8:	0021883a 	mov	r16,zero
   15ebc:	002b883a 	mov	r21,zero
   15ec0:	003e9c06 	br	15934 <_gp+0xffff43c8>
   15ec4:	00800434 	movhi	r2,16
   15ec8:	84000234 	orhi	r16,r16,8
   15ecc:	10bfffc4 	addi	r2,r2,-1
   15ed0:	b009883a 	mov	r4,r22
   15ed4:	80a0703a 	and	r16,r16,r2
   15ed8:	003ef906 	br	15ac0 <_gp+0xffff4554>
   15edc:	103fca26 	beq	r2,zero,15e08 <_gp+0xffff489c>
   15ee0:	b421883a 	add	r16,r22,r16
   15ee4:	a17fffc4 	addi	r5,r20,-1
   15ee8:	8580422e 	bgeu	r16,r22,15ff4 <__divdf3+0x83c>
   15eec:	2829883a 	mov	r20,r5
   15ef0:	813fc41e 	bne	r16,r4,15e04 <_gp+0xffff4898>
   15ef4:	d9800017 	ldw	r6,0(sp)
   15ef8:	30bfc21e 	bne	r6,r2,15e04 <_gp+0xffff4898>
   15efc:	003fc206 	br	15e08 <_gp+0xffff489c>
   15f00:	143ff604 	addi	r16,r2,-40
   15f04:	8c20983a 	sll	r16,r17,r16
   15f08:	002b883a 	mov	r21,zero
   15f0c:	003eb406 	br	159e0 <_gp+0xffff4474>
   15f10:	d9800215 	stw	r6,8(sp)
   15f14:	d9c00515 	stw	r7,20(sp)
   15f18:	da000415 	stw	r8,16(sp)
   15f1c:	0010fd40 	call	10fd4 <__clzsi2>
   15f20:	10800804 	addi	r2,r2,32
   15f24:	da000417 	ldw	r8,16(sp)
   15f28:	d9c00517 	ldw	r7,20(sp)
   15f2c:	d9800217 	ldw	r6,8(sp)
   15f30:	003ea106 	br	159b8 <_gp+0xffff444c>
   15f34:	147ff604 	addi	r17,r2,-40
   15f38:	3462983a 	sll	r17,r6,r17
   15f3c:	0029883a 	mov	r20,zero
   15f40:	003ec906 	br	15a68 <_gp+0xffff44fc>
   15f44:	3009883a 	mov	r4,r6
   15f48:	d9400115 	stw	r5,4(sp)
   15f4c:	d9800215 	stw	r6,8(sp)
   15f50:	da000415 	stw	r8,16(sp)
   15f54:	da400315 	stw	r9,12(sp)
   15f58:	0010fd40 	call	10fd4 <__clzsi2>
   15f5c:	10800804 	addi	r2,r2,32
   15f60:	da400317 	ldw	r9,12(sp)
   15f64:	da000417 	ldw	r8,16(sp)
   15f68:	d9800217 	ldw	r6,8(sp)
   15f6c:	d9400117 	ldw	r5,4(sp)
   15f70:	003eb306 	br	15a40 <_gp+0xffff44d4>
   15f74:	d9800017 	ldw	r6,0(sp)
   15f78:	a9ab883a 	add	r21,r21,r6
   15f7c:	a98b803a 	cmpltu	r5,r21,r6
   15f80:	2d8b883a 	add	r5,r5,r22
   15f84:	2a11883a 	add	r8,r5,r8
   15f88:	897fffc4 	addi	r5,r17,-1
   15f8c:	b2000c2e 	bgeu	r22,r8,15fc0 <__divdf3+0x808>
   15f90:	41003f36 	bltu	r8,r4,16090 <__divdf3+0x8d8>
   15f94:	22006c26 	beq	r4,r8,16148 <__divdf3+0x990>
   15f98:	4109c83a 	sub	r4,r8,r4
   15f9c:	2823883a 	mov	r17,r5
   15fa0:	003f3b06 	br	15c90 <_gp+0xffff4724>
   15fa4:	ad3ed336 	bltu	r21,r20,15af4 <_gp+0xffff4588>
   15fa8:	a804d07a 	srli	r2,r21,1
   15fac:	802e97fa 	slli	r23,r16,31
   15fb0:	a82a97fa 	slli	r21,r21,31
   15fb4:	8020d07a 	srli	r16,r16,1
   15fb8:	b8aeb03a 	or	r23,r23,r2
   15fbc:	003ed006 	br	15b00 <_gp+0xffff4594>
   15fc0:	b23ff51e 	bne	r22,r8,15f98 <_gp+0xffff4a2c>
   15fc4:	d9800017 	ldw	r6,0(sp)
   15fc8:	a9bff12e 	bgeu	r21,r6,15f90 <_gp+0xffff4a24>
   15fcc:	b109c83a 	sub	r4,r22,r4
   15fd0:	2823883a 	mov	r17,r5
   15fd4:	003f2e06 	br	15c90 <_gp+0xffff4724>
   15fd8:	2021883a 	mov	r16,r4
   15fdc:	003eff06 	br	15bdc <_gp+0xffff4670>
   15fe0:	2023883a 	mov	r17,r4
   15fe4:	003ee406 	br	15b78 <_gp+0xffff460c>
   15fe8:	a8bfe236 	bltu	r21,r2,15f74 <_gp+0xffff4a08>
   15fec:	0009883a 	mov	r4,zero
   15ff0:	003f2706 	br	15c90 <_gp+0xffff4724>
   15ff4:	81002d36 	bltu	r16,r4,160ac <__divdf3+0x8f4>
   15ff8:	24005626 	beq	r4,r16,16154 <__divdf3+0x99c>
   15ffc:	2829883a 	mov	r20,r5
   16000:	003f8006 	br	15e04 <_gp+0xffff4898>
   16004:	053fffc4 	movi	r20,-1
   16008:	003f7f06 	br	15e08 <_gp+0xffff489c>
   1600c:	200f883a 	mov	r7,r4
   16010:	003f3c06 	br	15d04 <_gp+0xffff4798>
   16014:	1011883a 	mov	r8,r2
   16018:	003f5506 	br	15d70 <_gp+0xffff4804>
   1601c:	e027883a 	mov	r19,fp
   16020:	003f7906 	br	15e08 <_gp+0xffff489c>
   16024:	010007c4 	movi	r4,31
   16028:	20c02816 	blt	r4,r3,160cc <__divdf3+0x914>
   1602c:	00800804 	movi	r2,32
   16030:	10c5c83a 	sub	r2,r2,r3
   16034:	888a983a 	sll	r5,r17,r2
   16038:	a0c8d83a 	srl	r4,r20,r3
   1603c:	a084983a 	sll	r2,r20,r2
   16040:	88e2d83a 	srl	r17,r17,r3
   16044:	2906b03a 	or	r3,r5,r4
   16048:	1004c03a 	cmpne	r2,r2,zero
   1604c:	1886b03a 	or	r3,r3,r2
   16050:	188001cc 	andi	r2,r3,7
   16054:	10000726 	beq	r2,zero,16074 <__divdf3+0x8bc>
   16058:	188003cc 	andi	r2,r3,15
   1605c:	01000104 	movi	r4,4
   16060:	11000426 	beq	r2,r4,16074 <__divdf3+0x8bc>
   16064:	1805883a 	mov	r2,r3
   16068:	10c00104 	addi	r3,r2,4
   1606c:	1885803a 	cmpltu	r2,r3,r2
   16070:	88a3883a 	add	r17,r17,r2
   16074:	8880202c 	andhi	r2,r17,128
   16078:	10002926 	beq	r2,zero,16120 <__divdf3+0x968>
   1607c:	9900004c 	andi	r4,r19,1
   16080:	00800044 	movi	r2,1
   16084:	0021883a 	mov	r16,zero
   16088:	002b883a 	mov	r21,zero
   1608c:	003e2906 	br	15934 <_gp+0xffff43c8>
   16090:	d9800017 	ldw	r6,0(sp)
   16094:	8c7fff84 	addi	r17,r17,-2
   16098:	a9ab883a 	add	r21,r21,r6
   1609c:	a98b803a 	cmpltu	r5,r21,r6
   160a0:	2d8b883a 	add	r5,r5,r22
   160a4:	2a11883a 	add	r8,r5,r8
   160a8:	003ef806 	br	15c8c <_gp+0xffff4720>
   160ac:	d9800017 	ldw	r6,0(sp)
   160b0:	318f883a 	add	r7,r6,r6
   160b4:	398b803a 	cmpltu	r5,r7,r6
   160b8:	2d8d883a 	add	r6,r5,r22
   160bc:	81a1883a 	add	r16,r16,r6
   160c0:	a17fff84 	addi	r5,r20,-2
   160c4:	d9c00015 	stw	r7,0(sp)
   160c8:	003f8806 	br	15eec <_gp+0xffff4980>
   160cc:	013ff844 	movi	r4,-31
   160d0:	2085c83a 	sub	r2,r4,r2
   160d4:	8888d83a 	srl	r4,r17,r2
   160d8:	00800804 	movi	r2,32
   160dc:	18802126 	beq	r3,r2,16164 <__divdf3+0x9ac>
   160e0:	04001004 	movi	r16,64
   160e4:	80c7c83a 	sub	r3,r16,r3
   160e8:	88e0983a 	sll	r16,r17,r3
   160ec:	8504b03a 	or	r2,r16,r20
   160f0:	1004c03a 	cmpne	r2,r2,zero
   160f4:	2084b03a 	or	r2,r4,r2
   160f8:	144001cc 	andi	r17,r2,7
   160fc:	88000d1e 	bne	r17,zero,16134 <__divdf3+0x97c>
   16100:	0021883a 	mov	r16,zero
   16104:	102ad0fa 	srli	r21,r2,3
   16108:	9900004c 	andi	r4,r19,1
   1610c:	0005883a 	mov	r2,zero
   16110:	ac6ab03a 	or	r21,r21,r17
   16114:	003e0706 	br	15934 <_gp+0xffff43c8>
   16118:	1007883a 	mov	r3,r2
   1611c:	0023883a 	mov	r17,zero
   16120:	8820927a 	slli	r16,r17,9
   16124:	1805883a 	mov	r2,r3
   16128:	8822977a 	slli	r17,r17,29
   1612c:	8020d33a 	srli	r16,r16,12
   16130:	003ff406 	br	16104 <_gp+0xffff4b98>
   16134:	10c003cc 	andi	r3,r2,15
   16138:	01000104 	movi	r4,4
   1613c:	193ff626 	beq	r3,r4,16118 <_gp+0xffff4bac>
   16140:	0023883a 	mov	r17,zero
   16144:	003fc806 	br	16068 <_gp+0xffff4afc>
   16148:	a8bfd136 	bltu	r21,r2,16090 <_gp+0xffff4b24>
   1614c:	2823883a 	mov	r17,r5
   16150:	003fa606 	br	15fec <_gp+0xffff4a80>
   16154:	d9800017 	ldw	r6,0(sp)
   16158:	30bfd436 	bltu	r6,r2,160ac <_gp+0xffff4b40>
   1615c:	2829883a 	mov	r20,r5
   16160:	003f6406 	br	15ef4 <_gp+0xffff4988>
   16164:	0021883a 	mov	r16,zero
   16168:	003fe006 	br	160ec <_gp+0xffff4b80>
   1616c:	00800434 	movhi	r2,16
   16170:	8c000234 	orhi	r16,r17,8
   16174:	10bfffc4 	addi	r2,r2,-1
   16178:	e009883a 	mov	r4,fp
   1617c:	80a0703a 	and	r16,r16,r2
   16180:	a02b883a 	mov	r21,r20
   16184:	003e4e06 	br	15ac0 <_gp+0xffff4554>

00016188 <__eqdf2>:
   16188:	2804d53a 	srli	r2,r5,20
   1618c:	3806d53a 	srli	r3,r7,20
   16190:	02000434 	movhi	r8,16
   16194:	423fffc4 	addi	r8,r8,-1
   16198:	1081ffcc 	andi	r2,r2,2047
   1619c:	0281ffc4 	movi	r10,2047
   161a0:	2a12703a 	and	r9,r5,r8
   161a4:	18c1ffcc 	andi	r3,r3,2047
   161a8:	3a10703a 	and	r8,r7,r8
   161ac:	280ad7fa 	srli	r5,r5,31
   161b0:	380ed7fa 	srli	r7,r7,31
   161b4:	12801026 	beq	r2,r10,161f8 <__eqdf2+0x70>
   161b8:	0281ffc4 	movi	r10,2047
   161bc:	1a800a26 	beq	r3,r10,161e8 <__eqdf2+0x60>
   161c0:	10c00226 	beq	r2,r3,161cc <__eqdf2+0x44>
   161c4:	00800044 	movi	r2,1
   161c8:	f800283a 	ret
   161cc:	4a3ffd1e 	bne	r9,r8,161c4 <_gp+0xffff4c58>
   161d0:	21bffc1e 	bne	r4,r6,161c4 <_gp+0xffff4c58>
   161d4:	29c00c26 	beq	r5,r7,16208 <__eqdf2+0x80>
   161d8:	103ffa1e 	bne	r2,zero,161c4 <_gp+0xffff4c58>
   161dc:	2244b03a 	or	r2,r4,r9
   161e0:	1004c03a 	cmpne	r2,r2,zero
   161e4:	f800283a 	ret
   161e8:	3214b03a 	or	r10,r6,r8
   161ec:	503ff426 	beq	r10,zero,161c0 <_gp+0xffff4c54>
   161f0:	00800044 	movi	r2,1
   161f4:	f800283a 	ret
   161f8:	2254b03a 	or	r10,r4,r9
   161fc:	503fee26 	beq	r10,zero,161b8 <_gp+0xffff4c4c>
   16200:	00800044 	movi	r2,1
   16204:	f800283a 	ret
   16208:	0005883a 	mov	r2,zero
   1620c:	f800283a 	ret

00016210 <__gedf2>:
   16210:	2804d53a 	srli	r2,r5,20
   16214:	3806d53a 	srli	r3,r7,20
   16218:	02000434 	movhi	r8,16
   1621c:	423fffc4 	addi	r8,r8,-1
   16220:	1081ffcc 	andi	r2,r2,2047
   16224:	0241ffc4 	movi	r9,2047
   16228:	2a14703a 	and	r10,r5,r8
   1622c:	18c1ffcc 	andi	r3,r3,2047
   16230:	3a10703a 	and	r8,r7,r8
   16234:	280ad7fa 	srli	r5,r5,31
   16238:	380ed7fa 	srli	r7,r7,31
   1623c:	12401d26 	beq	r2,r9,162b4 <__gedf2+0xa4>
   16240:	0241ffc4 	movi	r9,2047
   16244:	1a401226 	beq	r3,r9,16290 <__gedf2+0x80>
   16248:	1000081e 	bne	r2,zero,1626c <__gedf2+0x5c>
   1624c:	2296b03a 	or	r11,r4,r10
   16250:	5813003a 	cmpeq	r9,r11,zero
   16254:	1800091e 	bne	r3,zero,1627c <__gedf2+0x6c>
   16258:	3218b03a 	or	r12,r6,r8
   1625c:	6000071e 	bne	r12,zero,1627c <__gedf2+0x6c>
   16260:	0005883a 	mov	r2,zero
   16264:	5800101e 	bne	r11,zero,162a8 <__gedf2+0x98>
   16268:	f800283a 	ret
   1626c:	18000c1e 	bne	r3,zero,162a0 <__gedf2+0x90>
   16270:	3212b03a 	or	r9,r6,r8
   16274:	48000c26 	beq	r9,zero,162a8 <__gedf2+0x98>
   16278:	0013883a 	mov	r9,zero
   1627c:	39c03fcc 	andi	r7,r7,255
   16280:	48000826 	beq	r9,zero,162a4 <__gedf2+0x94>
   16284:	38000926 	beq	r7,zero,162ac <__gedf2+0x9c>
   16288:	00800044 	movi	r2,1
   1628c:	f800283a 	ret
   16290:	3212b03a 	or	r9,r6,r8
   16294:	483fec26 	beq	r9,zero,16248 <_gp+0xffff4cdc>
   16298:	00bfff84 	movi	r2,-2
   1629c:	f800283a 	ret
   162a0:	39c03fcc 	andi	r7,r7,255
   162a4:	29c00626 	beq	r5,r7,162c0 <__gedf2+0xb0>
   162a8:	283ff726 	beq	r5,zero,16288 <_gp+0xffff4d1c>
   162ac:	00bfffc4 	movi	r2,-1
   162b0:	f800283a 	ret
   162b4:	2292b03a 	or	r9,r4,r10
   162b8:	483fe126 	beq	r9,zero,16240 <_gp+0xffff4cd4>
   162bc:	003ff606 	br	16298 <_gp+0xffff4d2c>
   162c0:	18bff916 	blt	r3,r2,162a8 <_gp+0xffff4d3c>
   162c4:	10c00316 	blt	r2,r3,162d4 <__gedf2+0xc4>
   162c8:	42bff736 	bltu	r8,r10,162a8 <_gp+0xffff4d3c>
   162cc:	52000326 	beq	r10,r8,162dc <__gedf2+0xcc>
   162d0:	5200042e 	bgeu	r10,r8,162e4 <__gedf2+0xd4>
   162d4:	283fec1e 	bne	r5,zero,16288 <_gp+0xffff4d1c>
   162d8:	003ff406 	br	162ac <_gp+0xffff4d40>
   162dc:	313ff236 	bltu	r6,r4,162a8 <_gp+0xffff4d3c>
   162e0:	21bffc36 	bltu	r4,r6,162d4 <_gp+0xffff4d68>
   162e4:	0005883a 	mov	r2,zero
   162e8:	f800283a 	ret

000162ec <__ledf2>:
   162ec:	2804d53a 	srli	r2,r5,20
   162f0:	3810d53a 	srli	r8,r7,20
   162f4:	00c00434 	movhi	r3,16
   162f8:	18ffffc4 	addi	r3,r3,-1
   162fc:	1081ffcc 	andi	r2,r2,2047
   16300:	0241ffc4 	movi	r9,2047
   16304:	28d4703a 	and	r10,r5,r3
   16308:	4201ffcc 	andi	r8,r8,2047
   1630c:	38c6703a 	and	r3,r7,r3
   16310:	280ad7fa 	srli	r5,r5,31
   16314:	380ed7fa 	srli	r7,r7,31
   16318:	12401f26 	beq	r2,r9,16398 <__ledf2+0xac>
   1631c:	0241ffc4 	movi	r9,2047
   16320:	42401426 	beq	r8,r9,16374 <__ledf2+0x88>
   16324:	1000091e 	bne	r2,zero,1634c <__ledf2+0x60>
   16328:	2296b03a 	or	r11,r4,r10
   1632c:	5813003a 	cmpeq	r9,r11,zero
   16330:	29403fcc 	andi	r5,r5,255
   16334:	40000a1e 	bne	r8,zero,16360 <__ledf2+0x74>
   16338:	30d8b03a 	or	r12,r6,r3
   1633c:	6000081e 	bne	r12,zero,16360 <__ledf2+0x74>
   16340:	0005883a 	mov	r2,zero
   16344:	5800111e 	bne	r11,zero,1638c <__ledf2+0xa0>
   16348:	f800283a 	ret
   1634c:	29403fcc 	andi	r5,r5,255
   16350:	40000c1e 	bne	r8,zero,16384 <__ledf2+0x98>
   16354:	30d2b03a 	or	r9,r6,r3
   16358:	48000c26 	beq	r9,zero,1638c <__ledf2+0xa0>
   1635c:	0013883a 	mov	r9,zero
   16360:	39c03fcc 	andi	r7,r7,255
   16364:	48000826 	beq	r9,zero,16388 <__ledf2+0x9c>
   16368:	38001126 	beq	r7,zero,163b0 <__ledf2+0xc4>
   1636c:	00800044 	movi	r2,1
   16370:	f800283a 	ret
   16374:	30d2b03a 	or	r9,r6,r3
   16378:	483fea26 	beq	r9,zero,16324 <_gp+0xffff4db8>
   1637c:	00800084 	movi	r2,2
   16380:	f800283a 	ret
   16384:	39c03fcc 	andi	r7,r7,255
   16388:	39400726 	beq	r7,r5,163a8 <__ledf2+0xbc>
   1638c:	2800081e 	bne	r5,zero,163b0 <__ledf2+0xc4>
   16390:	00800044 	movi	r2,1
   16394:	f800283a 	ret
   16398:	2292b03a 	or	r9,r4,r10
   1639c:	483fdf26 	beq	r9,zero,1631c <_gp+0xffff4db0>
   163a0:	00800084 	movi	r2,2
   163a4:	f800283a 	ret
   163a8:	4080030e 	bge	r8,r2,163b8 <__ledf2+0xcc>
   163ac:	383fef26 	beq	r7,zero,1636c <_gp+0xffff4e00>
   163b0:	00bfffc4 	movi	r2,-1
   163b4:	f800283a 	ret
   163b8:	123feb16 	blt	r2,r8,16368 <_gp+0xffff4dfc>
   163bc:	1abff336 	bltu	r3,r10,1638c <_gp+0xffff4e20>
   163c0:	50c00326 	beq	r10,r3,163d0 <__ledf2+0xe4>
   163c4:	50c0042e 	bgeu	r10,r3,163d8 <__ledf2+0xec>
   163c8:	283fe81e 	bne	r5,zero,1636c <_gp+0xffff4e00>
   163cc:	003ff806 	br	163b0 <_gp+0xffff4e44>
   163d0:	313fee36 	bltu	r6,r4,1638c <_gp+0xffff4e20>
   163d4:	21bffc36 	bltu	r4,r6,163c8 <_gp+0xffff4e5c>
   163d8:	0005883a 	mov	r2,zero
   163dc:	f800283a 	ret

000163e0 <__muldf3>:
   163e0:	deffee04 	addi	sp,sp,-72
   163e4:	dd000c15 	stw	r20,48(sp)
   163e8:	2828d53a 	srli	r20,r5,20
   163ec:	ddc00f15 	stw	r23,60(sp)
   163f0:	282ed7fa 	srli	r23,r5,31
   163f4:	dc000815 	stw	r16,32(sp)
   163f8:	04000434 	movhi	r16,16
   163fc:	dcc00b15 	stw	r19,44(sp)
   16400:	843fffc4 	addi	r16,r16,-1
   16404:	dfc01115 	stw	ra,68(sp)
   16408:	df001015 	stw	fp,64(sp)
   1640c:	dd800e15 	stw	r22,56(sp)
   16410:	dd400d15 	stw	r21,52(sp)
   16414:	dc800a15 	stw	r18,40(sp)
   16418:	dc400915 	stw	r17,36(sp)
   1641c:	a501ffcc 	andi	r20,r20,2047
   16420:	2c20703a 	and	r16,r5,r16
   16424:	b827883a 	mov	r19,r23
   16428:	ba403fcc 	andi	r9,r23,255
   1642c:	a0006026 	beq	r20,zero,165b0 <__muldf3+0x1d0>
   16430:	0081ffc4 	movi	r2,2047
   16434:	202d883a 	mov	r22,r4
   16438:	a0803626 	beq	r20,r2,16514 <__muldf3+0x134>
   1643c:	84000434 	orhi	r16,r16,16
   16440:	200ad77a 	srli	r5,r4,29
   16444:	800490fa 	slli	r2,r16,3
   16448:	202c90fa 	slli	r22,r4,3
   1644c:	a53f0044 	addi	r20,r20,-1023
   16450:	28a0b03a 	or	r16,r5,r2
   16454:	002b883a 	mov	r21,zero
   16458:	000b883a 	mov	r5,zero
   1645c:	3804d53a 	srli	r2,r7,20
   16460:	3838d7fa 	srli	fp,r7,31
   16464:	04400434 	movhi	r17,16
   16468:	8c7fffc4 	addi	r17,r17,-1
   1646c:	1081ffcc 	andi	r2,r2,2047
   16470:	3025883a 	mov	r18,r6
   16474:	3c62703a 	and	r17,r7,r17
   16478:	e2803fcc 	andi	r10,fp,255
   1647c:	10006d26 	beq	r2,zero,16634 <__muldf3+0x254>
   16480:	00c1ffc4 	movi	r3,2047
   16484:	10c06526 	beq	r2,r3,1661c <__muldf3+0x23c>
   16488:	8c400434 	orhi	r17,r17,16
   1648c:	300ed77a 	srli	r7,r6,29
   16490:	880690fa 	slli	r3,r17,3
   16494:	302490fa 	slli	r18,r6,3
   16498:	10bf0044 	addi	r2,r2,-1023
   1649c:	38e2b03a 	or	r17,r7,r3
   164a0:	000f883a 	mov	r7,zero
   164a4:	a087883a 	add	r3,r20,r2
   164a8:	010003c4 	movi	r4,15
   164ac:	3d44b03a 	or	r2,r7,r21
   164b0:	e5ccf03a 	xor	r6,fp,r23
   164b4:	1a000044 	addi	r8,r3,1
   164b8:	20809b36 	bltu	r4,r2,16728 <__muldf3+0x348>
   164bc:	100490ba 	slli	r2,r2,2
   164c0:	01000074 	movhi	r4,1
   164c4:	21193504 	addi	r4,r4,25812
   164c8:	1105883a 	add	r2,r2,r4
   164cc:	10800017 	ldw	r2,0(r2)
   164d0:	1000683a 	jmp	r2
   164d4:	00016728 	cmpgeui	zero,zero,1436
   164d8:	00016534 	movhi	zero,1428
   164dc:	00016534 	movhi	zero,1428
   164e0:	00016530 	cmpltui	zero,zero,1428
   164e4:	00016704 	movi	zero,1436
   164e8:	00016704 	movi	zero,1436
   164ec:	000166ec 	andhi	zero,zero,1435
   164f0:	00016530 	cmpltui	zero,zero,1428
   164f4:	00016704 	movi	zero,1436
   164f8:	000166ec 	andhi	zero,zero,1435
   164fc:	00016704 	movi	zero,1436
   16500:	00016530 	cmpltui	zero,zero,1428
   16504:	00016714 	movui	zero,1436
   16508:	00016714 	movui	zero,1436
   1650c:	00016714 	movui	zero,1436
   16510:	00016a74 	movhi	zero,1449
   16514:	2404b03a 	or	r2,r4,r16
   16518:	1000711e 	bne	r2,zero,166e0 <__muldf3+0x300>
   1651c:	05400204 	movi	r21,8
   16520:	0021883a 	mov	r16,zero
   16524:	002d883a 	mov	r22,zero
   16528:	01400084 	movi	r5,2
   1652c:	003fcb06 	br	1645c <_gp+0xffff4ef0>
   16530:	500d883a 	mov	r6,r10
   16534:	00800084 	movi	r2,2
   16538:	38805926 	beq	r7,r2,166a0 <__muldf3+0x2c0>
   1653c:	008000c4 	movi	r2,3
   16540:	3881bb26 	beq	r7,r2,16c30 <__muldf3+0x850>
   16544:	00800044 	movi	r2,1
   16548:	3881961e 	bne	r7,r2,16ba4 <__muldf3+0x7c4>
   1654c:	3027883a 	mov	r19,r6
   16550:	0005883a 	mov	r2,zero
   16554:	0021883a 	mov	r16,zero
   16558:	002d883a 	mov	r22,zero
   1655c:	1004953a 	slli	r2,r2,20
   16560:	98c03fcc 	andi	r3,r19,255
   16564:	04400434 	movhi	r17,16
   16568:	8c7fffc4 	addi	r17,r17,-1
   1656c:	180697fa 	slli	r3,r3,31
   16570:	8460703a 	and	r16,r16,r17
   16574:	80a0b03a 	or	r16,r16,r2
   16578:	80c6b03a 	or	r3,r16,r3
   1657c:	b005883a 	mov	r2,r22
   16580:	dfc01117 	ldw	ra,68(sp)
   16584:	df001017 	ldw	fp,64(sp)
   16588:	ddc00f17 	ldw	r23,60(sp)
   1658c:	dd800e17 	ldw	r22,56(sp)
   16590:	dd400d17 	ldw	r21,52(sp)
   16594:	dd000c17 	ldw	r20,48(sp)
   16598:	dcc00b17 	ldw	r19,44(sp)
   1659c:	dc800a17 	ldw	r18,40(sp)
   165a0:	dc400917 	ldw	r17,36(sp)
   165a4:	dc000817 	ldw	r16,32(sp)
   165a8:	dec01204 	addi	sp,sp,72
   165ac:	f800283a 	ret
   165b0:	2404b03a 	or	r2,r4,r16
   165b4:	202b883a 	mov	r21,r4
   165b8:	10004426 	beq	r2,zero,166cc <__muldf3+0x2ec>
   165bc:	80015126 	beq	r16,zero,16b04 <__muldf3+0x724>
   165c0:	8009883a 	mov	r4,r16
   165c4:	d9800715 	stw	r6,28(sp)
   165c8:	d9c00215 	stw	r7,8(sp)
   165cc:	da400415 	stw	r9,16(sp)
   165d0:	0010fd40 	call	10fd4 <__clzsi2>
   165d4:	d9800717 	ldw	r6,28(sp)
   165d8:	d9c00217 	ldw	r7,8(sp)
   165dc:	da400417 	ldw	r9,16(sp)
   165e0:	113ffd44 	addi	r4,r2,-11
   165e4:	00c00704 	movi	r3,28
   165e8:	19014216 	blt	r3,r4,16af4 <__muldf3+0x714>
   165ec:	00c00744 	movi	r3,29
   165f0:	15bffe04 	addi	r22,r2,-8
   165f4:	1907c83a 	sub	r3,r3,r4
   165f8:	85a0983a 	sll	r16,r16,r22
   165fc:	a8c6d83a 	srl	r3,r21,r3
   16600:	adac983a 	sll	r22,r21,r22
   16604:	1c20b03a 	or	r16,r3,r16
   16608:	1080fcc4 	addi	r2,r2,1011
   1660c:	00a9c83a 	sub	r20,zero,r2
   16610:	002b883a 	mov	r21,zero
   16614:	000b883a 	mov	r5,zero
   16618:	003f9006 	br	1645c <_gp+0xffff4ef0>
   1661c:	3446b03a 	or	r3,r6,r17
   16620:	1800281e 	bne	r3,zero,166c4 <__muldf3+0x2e4>
   16624:	0023883a 	mov	r17,zero
   16628:	0025883a 	mov	r18,zero
   1662c:	01c00084 	movi	r7,2
   16630:	003f9c06 	br	164a4 <_gp+0xffff4f38>
   16634:	3446b03a 	or	r3,r6,r17
   16638:	18001e26 	beq	r3,zero,166b4 <__muldf3+0x2d4>
   1663c:	88012126 	beq	r17,zero,16ac4 <__muldf3+0x6e4>
   16640:	8809883a 	mov	r4,r17
   16644:	d9400215 	stw	r5,8(sp)
   16648:	d9800715 	stw	r6,28(sp)
   1664c:	da400415 	stw	r9,16(sp)
   16650:	da800315 	stw	r10,12(sp)
   16654:	0010fd40 	call	10fd4 <__clzsi2>
   16658:	d9400217 	ldw	r5,8(sp)
   1665c:	d9800717 	ldw	r6,28(sp)
   16660:	da400417 	ldw	r9,16(sp)
   16664:	da800317 	ldw	r10,12(sp)
   16668:	113ffd44 	addi	r4,r2,-11
   1666c:	00c00704 	movi	r3,28
   16670:	19011016 	blt	r3,r4,16ab4 <__muldf3+0x6d4>
   16674:	00c00744 	movi	r3,29
   16678:	14bffe04 	addi	r18,r2,-8
   1667c:	1907c83a 	sub	r3,r3,r4
   16680:	8ca2983a 	sll	r17,r17,r18
   16684:	30c6d83a 	srl	r3,r6,r3
   16688:	34a4983a 	sll	r18,r6,r18
   1668c:	1c62b03a 	or	r17,r3,r17
   16690:	1080fcc4 	addi	r2,r2,1011
   16694:	0085c83a 	sub	r2,zero,r2
   16698:	000f883a 	mov	r7,zero
   1669c:	003f8106 	br	164a4 <_gp+0xffff4f38>
   166a0:	3027883a 	mov	r19,r6
   166a4:	0081ffc4 	movi	r2,2047
   166a8:	0021883a 	mov	r16,zero
   166ac:	002d883a 	mov	r22,zero
   166b0:	003faa06 	br	1655c <_gp+0xffff4ff0>
   166b4:	0023883a 	mov	r17,zero
   166b8:	0025883a 	mov	r18,zero
   166bc:	01c00044 	movi	r7,1
   166c0:	003f7806 	br	164a4 <_gp+0xffff4f38>
   166c4:	01c000c4 	movi	r7,3
   166c8:	003f7606 	br	164a4 <_gp+0xffff4f38>
   166cc:	05400104 	movi	r21,4
   166d0:	0021883a 	mov	r16,zero
   166d4:	002d883a 	mov	r22,zero
   166d8:	01400044 	movi	r5,1
   166dc:	003f5f06 	br	1645c <_gp+0xffff4ef0>
   166e0:	05400304 	movi	r21,12
   166e4:	014000c4 	movi	r5,3
   166e8:	003f5c06 	br	1645c <_gp+0xffff4ef0>
   166ec:	04000434 	movhi	r16,16
   166f0:	0027883a 	mov	r19,zero
   166f4:	843fffc4 	addi	r16,r16,-1
   166f8:	05bfffc4 	movi	r22,-1
   166fc:	0081ffc4 	movi	r2,2047
   16700:	003f9606 	br	1655c <_gp+0xffff4ff0>
   16704:	8023883a 	mov	r17,r16
   16708:	b025883a 	mov	r18,r22
   1670c:	280f883a 	mov	r7,r5
   16710:	003f8806 	br	16534 <_gp+0xffff4fc8>
   16714:	8023883a 	mov	r17,r16
   16718:	b025883a 	mov	r18,r22
   1671c:	480d883a 	mov	r6,r9
   16720:	280f883a 	mov	r7,r5
   16724:	003f8306 	br	16534 <_gp+0xffff4fc8>
   16728:	b026d43a 	srli	r19,r22,16
   1672c:	902ed43a 	srli	r23,r18,16
   16730:	b5bfffcc 	andi	r22,r22,65535
   16734:	94bfffcc 	andi	r18,r18,65535
   16738:	b00b883a 	mov	r5,r22
   1673c:	9009883a 	mov	r4,r18
   16740:	d8c00515 	stw	r3,20(sp)
   16744:	d9800715 	stw	r6,28(sp)
   16748:	da000615 	stw	r8,24(sp)
   1674c:	00110380 	call	11038 <__mulsi3>
   16750:	980b883a 	mov	r5,r19
   16754:	9009883a 	mov	r4,r18
   16758:	1029883a 	mov	r20,r2
   1675c:	00110380 	call	11038 <__mulsi3>
   16760:	b80b883a 	mov	r5,r23
   16764:	9809883a 	mov	r4,r19
   16768:	102b883a 	mov	r21,r2
   1676c:	00110380 	call	11038 <__mulsi3>
   16770:	b809883a 	mov	r4,r23
   16774:	b00b883a 	mov	r5,r22
   16778:	1039883a 	mov	fp,r2
   1677c:	00110380 	call	11038 <__mulsi3>
   16780:	a008d43a 	srli	r4,r20,16
   16784:	1545883a 	add	r2,r2,r21
   16788:	d8c00517 	ldw	r3,20(sp)
   1678c:	2085883a 	add	r2,r4,r2
   16790:	d9800717 	ldw	r6,28(sp)
   16794:	da000617 	ldw	r8,24(sp)
   16798:	1540022e 	bgeu	r2,r21,167a4 <__muldf3+0x3c4>
   1679c:	01000074 	movhi	r4,1
   167a0:	e139883a 	add	fp,fp,r4
   167a4:	100e943a 	slli	r7,r2,16
   167a8:	1004d43a 	srli	r2,r2,16
   167ac:	882ad43a 	srli	r21,r17,16
   167b0:	a53fffcc 	andi	r20,r20,65535
   167b4:	8c7fffcc 	andi	r17,r17,65535
   167b8:	3d29883a 	add	r20,r7,r20
   167bc:	b00b883a 	mov	r5,r22
   167c0:	8809883a 	mov	r4,r17
   167c4:	d8c00515 	stw	r3,20(sp)
   167c8:	d9800715 	stw	r6,28(sp)
   167cc:	da000615 	stw	r8,24(sp)
   167d0:	dd000115 	stw	r20,4(sp)
   167d4:	d8800015 	stw	r2,0(sp)
   167d8:	00110380 	call	11038 <__mulsi3>
   167dc:	980b883a 	mov	r5,r19
   167e0:	8809883a 	mov	r4,r17
   167e4:	d8800215 	stw	r2,8(sp)
   167e8:	00110380 	call	11038 <__mulsi3>
   167ec:	9809883a 	mov	r4,r19
   167f0:	a80b883a 	mov	r5,r21
   167f4:	1029883a 	mov	r20,r2
   167f8:	00110380 	call	11038 <__mulsi3>
   167fc:	b00b883a 	mov	r5,r22
   16800:	a809883a 	mov	r4,r21
   16804:	d8800415 	stw	r2,16(sp)
   16808:	00110380 	call	11038 <__mulsi3>
   1680c:	d9c00217 	ldw	r7,8(sp)
   16810:	1505883a 	add	r2,r2,r20
   16814:	d8c00517 	ldw	r3,20(sp)
   16818:	3826d43a 	srli	r19,r7,16
   1681c:	d9800717 	ldw	r6,28(sp)
   16820:	da000617 	ldw	r8,24(sp)
   16824:	9885883a 	add	r2,r19,r2
   16828:	da400417 	ldw	r9,16(sp)
   1682c:	1500022e 	bgeu	r2,r20,16838 <__muldf3+0x458>
   16830:	01000074 	movhi	r4,1
   16834:	4913883a 	add	r9,r9,r4
   16838:	1028d43a 	srli	r20,r2,16
   1683c:	1004943a 	slli	r2,r2,16
   16840:	802cd43a 	srli	r22,r16,16
   16844:	843fffcc 	andi	r16,r16,65535
   16848:	3cffffcc 	andi	r19,r7,65535
   1684c:	9009883a 	mov	r4,r18
   16850:	800b883a 	mov	r5,r16
   16854:	a269883a 	add	r20,r20,r9
   16858:	d8c00515 	stw	r3,20(sp)
   1685c:	d9800715 	stw	r6,28(sp)
   16860:	da000615 	stw	r8,24(sp)
   16864:	14e7883a 	add	r19,r2,r19
   16868:	00110380 	call	11038 <__mulsi3>
   1686c:	9009883a 	mov	r4,r18
   16870:	b00b883a 	mov	r5,r22
   16874:	d8800315 	stw	r2,12(sp)
   16878:	00110380 	call	11038 <__mulsi3>
   1687c:	b809883a 	mov	r4,r23
   16880:	b00b883a 	mov	r5,r22
   16884:	d8800215 	stw	r2,8(sp)
   16888:	00110380 	call	11038 <__mulsi3>
   1688c:	b80b883a 	mov	r5,r23
   16890:	8009883a 	mov	r4,r16
   16894:	d8800415 	stw	r2,16(sp)
   16898:	00110380 	call	11038 <__mulsi3>
   1689c:	da800317 	ldw	r10,12(sp)
   168a0:	d9c00217 	ldw	r7,8(sp)
   168a4:	d9000017 	ldw	r4,0(sp)
   168a8:	502ed43a 	srli	r23,r10,16
   168ac:	11c5883a 	add	r2,r2,r7
   168b0:	24e5883a 	add	r18,r4,r19
   168b4:	b885883a 	add	r2,r23,r2
   168b8:	d8c00517 	ldw	r3,20(sp)
   168bc:	d9800717 	ldw	r6,28(sp)
   168c0:	da000617 	ldw	r8,24(sp)
   168c4:	da400417 	ldw	r9,16(sp)
   168c8:	11c0022e 	bgeu	r2,r7,168d4 <__muldf3+0x4f4>
   168cc:	01000074 	movhi	r4,1
   168d0:	4913883a 	add	r9,r9,r4
   168d4:	100ed43a 	srli	r7,r2,16
   168d8:	1004943a 	slli	r2,r2,16
   168dc:	55ffffcc 	andi	r23,r10,65535
   168e0:	3a53883a 	add	r9,r7,r9
   168e4:	8809883a 	mov	r4,r17
   168e8:	800b883a 	mov	r5,r16
   168ec:	d8c00515 	stw	r3,20(sp)
   168f0:	d9800715 	stw	r6,28(sp)
   168f4:	da000615 	stw	r8,24(sp)
   168f8:	da400415 	stw	r9,16(sp)
   168fc:	15ef883a 	add	r23,r2,r23
   16900:	00110380 	call	11038 <__mulsi3>
   16904:	8809883a 	mov	r4,r17
   16908:	b00b883a 	mov	r5,r22
   1690c:	d8800215 	stw	r2,8(sp)
   16910:	00110380 	call	11038 <__mulsi3>
   16914:	b00b883a 	mov	r5,r22
   16918:	a809883a 	mov	r4,r21
   1691c:	d8800315 	stw	r2,12(sp)
   16920:	00110380 	call	11038 <__mulsi3>
   16924:	8009883a 	mov	r4,r16
   16928:	a80b883a 	mov	r5,r21
   1692c:	1023883a 	mov	r17,r2
   16930:	00110380 	call	11038 <__mulsi3>
   16934:	d9c00217 	ldw	r7,8(sp)
   16938:	da800317 	ldw	r10,12(sp)
   1693c:	d8c00517 	ldw	r3,20(sp)
   16940:	3808d43a 	srli	r4,r7,16
   16944:	1285883a 	add	r2,r2,r10
   16948:	d9800717 	ldw	r6,28(sp)
   1694c:	2085883a 	add	r2,r4,r2
   16950:	da000617 	ldw	r8,24(sp)
   16954:	da400417 	ldw	r9,16(sp)
   16958:	1280022e 	bgeu	r2,r10,16964 <__muldf3+0x584>
   1695c:	01000074 	movhi	r4,1
   16960:	8923883a 	add	r17,r17,r4
   16964:	1008943a 	slli	r4,r2,16
   16968:	39ffffcc 	andi	r7,r7,65535
   1696c:	e4b9883a 	add	fp,fp,r18
   16970:	21cf883a 	add	r7,r4,r7
   16974:	e4e7803a 	cmpltu	r19,fp,r19
   16978:	3d0f883a 	add	r7,r7,r20
   1697c:	bf39883a 	add	fp,r23,fp
   16980:	99c9883a 	add	r4,r19,r7
   16984:	e5ef803a 	cmpltu	r23,fp,r23
   16988:	490b883a 	add	r5,r9,r4
   1698c:	1004d43a 	srli	r2,r2,16
   16990:	b965883a 	add	r18,r23,r5
   16994:	24c9803a 	cmpltu	r4,r4,r19
   16998:	3d29803a 	cmpltu	r20,r7,r20
   1699c:	a128b03a 	or	r20,r20,r4
   169a0:	95ef803a 	cmpltu	r23,r18,r23
   169a4:	2a53803a 	cmpltu	r9,r5,r9
   169a8:	a0a9883a 	add	r20,r20,r2
   169ac:	4deeb03a 	or	r23,r9,r23
   169b0:	a5ef883a 	add	r23,r20,r23
   169b4:	bc63883a 	add	r17,r23,r17
   169b8:	e004927a 	slli	r2,fp,9
   169bc:	d9000117 	ldw	r4,4(sp)
   169c0:	882e927a 	slli	r23,r17,9
   169c4:	9022d5fa 	srli	r17,r18,23
   169c8:	e038d5fa 	srli	fp,fp,23
   169cc:	1104b03a 	or	r2,r2,r4
   169d0:	9024927a 	slli	r18,r18,9
   169d4:	1004c03a 	cmpne	r2,r2,zero
   169d8:	bc62b03a 	or	r17,r23,r17
   169dc:	1738b03a 	or	fp,r2,fp
   169e0:	8880402c 	andhi	r2,r17,256
   169e4:	e4a4b03a 	or	r18,fp,r18
   169e8:	10000726 	beq	r2,zero,16a08 <__muldf3+0x628>
   169ec:	9006d07a 	srli	r3,r18,1
   169f0:	880497fa 	slli	r2,r17,31
   169f4:	9480004c 	andi	r18,r18,1
   169f8:	8822d07a 	srli	r17,r17,1
   169fc:	1ca4b03a 	or	r18,r3,r18
   16a00:	14a4b03a 	or	r18,r2,r18
   16a04:	4007883a 	mov	r3,r8
   16a08:	1880ffc4 	addi	r2,r3,1023
   16a0c:	0080460e 	bge	zero,r2,16b28 <__muldf3+0x748>
   16a10:	910001cc 	andi	r4,r18,7
   16a14:	20000726 	beq	r4,zero,16a34 <__muldf3+0x654>
   16a18:	910003cc 	andi	r4,r18,15
   16a1c:	01400104 	movi	r5,4
   16a20:	21400426 	beq	r4,r5,16a34 <__muldf3+0x654>
   16a24:	9149883a 	add	r4,r18,r5
   16a28:	24a5803a 	cmpltu	r18,r4,r18
   16a2c:	8ca3883a 	add	r17,r17,r18
   16a30:	2025883a 	mov	r18,r4
   16a34:	8900402c 	andhi	r4,r17,256
   16a38:	20000426 	beq	r4,zero,16a4c <__muldf3+0x66c>
   16a3c:	18810004 	addi	r2,r3,1024
   16a40:	00ffc034 	movhi	r3,65280
   16a44:	18ffffc4 	addi	r3,r3,-1
   16a48:	88e2703a 	and	r17,r17,r3
   16a4c:	00c1ff84 	movi	r3,2046
   16a50:	18bf1316 	blt	r3,r2,166a0 <_gp+0xffff5134>
   16a54:	882c977a 	slli	r22,r17,29
   16a58:	9024d0fa 	srli	r18,r18,3
   16a5c:	8822927a 	slli	r17,r17,9
   16a60:	1081ffcc 	andi	r2,r2,2047
   16a64:	b4acb03a 	or	r22,r22,r18
   16a68:	8820d33a 	srli	r16,r17,12
   16a6c:	3027883a 	mov	r19,r6
   16a70:	003eba06 	br	1655c <_gp+0xffff4ff0>
   16a74:	8080022c 	andhi	r2,r16,8
   16a78:	10000926 	beq	r2,zero,16aa0 <__muldf3+0x6c0>
   16a7c:	8880022c 	andhi	r2,r17,8
   16a80:	1000071e 	bne	r2,zero,16aa0 <__muldf3+0x6c0>
   16a84:	00800434 	movhi	r2,16
   16a88:	8c000234 	orhi	r16,r17,8
   16a8c:	10bfffc4 	addi	r2,r2,-1
   16a90:	e027883a 	mov	r19,fp
   16a94:	80a0703a 	and	r16,r16,r2
   16a98:	902d883a 	mov	r22,r18
   16a9c:	003f1706 	br	166fc <_gp+0xffff5190>
   16aa0:	00800434 	movhi	r2,16
   16aa4:	84000234 	orhi	r16,r16,8
   16aa8:	10bfffc4 	addi	r2,r2,-1
   16aac:	80a0703a 	and	r16,r16,r2
   16ab0:	003f1206 	br	166fc <_gp+0xffff5190>
   16ab4:	147ff604 	addi	r17,r2,-40
   16ab8:	3462983a 	sll	r17,r6,r17
   16abc:	0025883a 	mov	r18,zero
   16ac0:	003ef306 	br	16690 <_gp+0xffff5124>
   16ac4:	3009883a 	mov	r4,r6
   16ac8:	d9400215 	stw	r5,8(sp)
   16acc:	d9800715 	stw	r6,28(sp)
   16ad0:	da400415 	stw	r9,16(sp)
   16ad4:	da800315 	stw	r10,12(sp)
   16ad8:	0010fd40 	call	10fd4 <__clzsi2>
   16adc:	10800804 	addi	r2,r2,32
   16ae0:	da800317 	ldw	r10,12(sp)
   16ae4:	da400417 	ldw	r9,16(sp)
   16ae8:	d9800717 	ldw	r6,28(sp)
   16aec:	d9400217 	ldw	r5,8(sp)
   16af0:	003edd06 	br	16668 <_gp+0xffff50fc>
   16af4:	143ff604 	addi	r16,r2,-40
   16af8:	ac20983a 	sll	r16,r21,r16
   16afc:	002d883a 	mov	r22,zero
   16b00:	003ec106 	br	16608 <_gp+0xffff509c>
   16b04:	d9800715 	stw	r6,28(sp)
   16b08:	d9c00215 	stw	r7,8(sp)
   16b0c:	da400415 	stw	r9,16(sp)
   16b10:	0010fd40 	call	10fd4 <__clzsi2>
   16b14:	10800804 	addi	r2,r2,32
   16b18:	da400417 	ldw	r9,16(sp)
   16b1c:	d9c00217 	ldw	r7,8(sp)
   16b20:	d9800717 	ldw	r6,28(sp)
   16b24:	003eae06 	br	165e0 <_gp+0xffff5074>
   16b28:	00c00044 	movi	r3,1
   16b2c:	1887c83a 	sub	r3,r3,r2
   16b30:	01000e04 	movi	r4,56
   16b34:	20fe8516 	blt	r4,r3,1654c <_gp+0xffff4fe0>
   16b38:	010007c4 	movi	r4,31
   16b3c:	20c01b16 	blt	r4,r3,16bac <__muldf3+0x7cc>
   16b40:	00800804 	movi	r2,32
   16b44:	10c5c83a 	sub	r2,r2,r3
   16b48:	888a983a 	sll	r5,r17,r2
   16b4c:	90c8d83a 	srl	r4,r18,r3
   16b50:	9084983a 	sll	r2,r18,r2
   16b54:	88e2d83a 	srl	r17,r17,r3
   16b58:	2906b03a 	or	r3,r5,r4
   16b5c:	1004c03a 	cmpne	r2,r2,zero
   16b60:	1886b03a 	or	r3,r3,r2
   16b64:	188001cc 	andi	r2,r3,7
   16b68:	10000726 	beq	r2,zero,16b88 <__muldf3+0x7a8>
   16b6c:	188003cc 	andi	r2,r3,15
   16b70:	01000104 	movi	r4,4
   16b74:	11000426 	beq	r2,r4,16b88 <__muldf3+0x7a8>
   16b78:	1805883a 	mov	r2,r3
   16b7c:	10c00104 	addi	r3,r2,4
   16b80:	1885803a 	cmpltu	r2,r3,r2
   16b84:	88a3883a 	add	r17,r17,r2
   16b88:	8880202c 	andhi	r2,r17,128
   16b8c:	10001c26 	beq	r2,zero,16c00 <__muldf3+0x820>
   16b90:	3027883a 	mov	r19,r6
   16b94:	00800044 	movi	r2,1
   16b98:	0021883a 	mov	r16,zero
   16b9c:	002d883a 	mov	r22,zero
   16ba0:	003e6e06 	br	1655c <_gp+0xffff4ff0>
   16ba4:	4007883a 	mov	r3,r8
   16ba8:	003f9706 	br	16a08 <_gp+0xffff549c>
   16bac:	017ff844 	movi	r5,-31
   16bb0:	2885c83a 	sub	r2,r5,r2
   16bb4:	888ad83a 	srl	r5,r17,r2
   16bb8:	00800804 	movi	r2,32
   16bbc:	18801a26 	beq	r3,r2,16c28 <__muldf3+0x848>
   16bc0:	01001004 	movi	r4,64
   16bc4:	20c7c83a 	sub	r3,r4,r3
   16bc8:	88e2983a 	sll	r17,r17,r3
   16bcc:	8ca4b03a 	or	r18,r17,r18
   16bd0:	9004c03a 	cmpne	r2,r18,zero
   16bd4:	2884b03a 	or	r2,r5,r2
   16bd8:	144001cc 	andi	r17,r2,7
   16bdc:	88000d1e 	bne	r17,zero,16c14 <__muldf3+0x834>
   16be0:	0021883a 	mov	r16,zero
   16be4:	102cd0fa 	srli	r22,r2,3
   16be8:	3027883a 	mov	r19,r6
   16bec:	0005883a 	mov	r2,zero
   16bf0:	b46cb03a 	or	r22,r22,r17
   16bf4:	003e5906 	br	1655c <_gp+0xffff4ff0>
   16bf8:	1007883a 	mov	r3,r2
   16bfc:	0023883a 	mov	r17,zero
   16c00:	8820927a 	slli	r16,r17,9
   16c04:	1805883a 	mov	r2,r3
   16c08:	8822977a 	slli	r17,r17,29
   16c0c:	8020d33a 	srli	r16,r16,12
   16c10:	003ff406 	br	16be4 <_gp+0xffff5678>
   16c14:	10c003cc 	andi	r3,r2,15
   16c18:	01000104 	movi	r4,4
   16c1c:	193ff626 	beq	r3,r4,16bf8 <_gp+0xffff568c>
   16c20:	0023883a 	mov	r17,zero
   16c24:	003fd506 	br	16b7c <_gp+0xffff5610>
   16c28:	0023883a 	mov	r17,zero
   16c2c:	003fe706 	br	16bcc <_gp+0xffff5660>
   16c30:	00800434 	movhi	r2,16
   16c34:	8c000234 	orhi	r16,r17,8
   16c38:	10bfffc4 	addi	r2,r2,-1
   16c3c:	3027883a 	mov	r19,r6
   16c40:	80a0703a 	and	r16,r16,r2
   16c44:	902d883a 	mov	r22,r18
   16c48:	003eac06 	br	166fc <_gp+0xffff5190>

00016c4c <__subdf3>:
   16c4c:	02000434 	movhi	r8,16
   16c50:	423fffc4 	addi	r8,r8,-1
   16c54:	defffb04 	addi	sp,sp,-20
   16c58:	2a14703a 	and	r10,r5,r8
   16c5c:	3812d53a 	srli	r9,r7,20
   16c60:	3a10703a 	and	r8,r7,r8
   16c64:	2006d77a 	srli	r3,r4,29
   16c68:	3004d77a 	srli	r2,r6,29
   16c6c:	dc000015 	stw	r16,0(sp)
   16c70:	501490fa 	slli	r10,r10,3
   16c74:	2820d53a 	srli	r16,r5,20
   16c78:	401090fa 	slli	r8,r8,3
   16c7c:	dc800215 	stw	r18,8(sp)
   16c80:	dc400115 	stw	r17,4(sp)
   16c84:	dfc00415 	stw	ra,16(sp)
   16c88:	202290fa 	slli	r17,r4,3
   16c8c:	dcc00315 	stw	r19,12(sp)
   16c90:	4a41ffcc 	andi	r9,r9,2047
   16c94:	0101ffc4 	movi	r4,2047
   16c98:	2824d7fa 	srli	r18,r5,31
   16c9c:	8401ffcc 	andi	r16,r16,2047
   16ca0:	50c6b03a 	or	r3,r10,r3
   16ca4:	380ed7fa 	srli	r7,r7,31
   16ca8:	408ab03a 	or	r5,r8,r2
   16cac:	300c90fa 	slli	r6,r6,3
   16cb0:	49009626 	beq	r9,r4,16f0c <__subdf3+0x2c0>
   16cb4:	39c0005c 	xori	r7,r7,1
   16cb8:	8245c83a 	sub	r2,r16,r9
   16cbc:	3c807426 	beq	r7,r18,16e90 <__subdf3+0x244>
   16cc0:	0080af0e 	bge	zero,r2,16f80 <__subdf3+0x334>
   16cc4:	48002a1e 	bne	r9,zero,16d70 <__subdf3+0x124>
   16cc8:	2988b03a 	or	r4,r5,r6
   16ccc:	20009a1e 	bne	r4,zero,16f38 <__subdf3+0x2ec>
   16cd0:	888001cc 	andi	r2,r17,7
   16cd4:	10000726 	beq	r2,zero,16cf4 <__subdf3+0xa8>
   16cd8:	888003cc 	andi	r2,r17,15
   16cdc:	01000104 	movi	r4,4
   16ce0:	11000426 	beq	r2,r4,16cf4 <__subdf3+0xa8>
   16ce4:	890b883a 	add	r5,r17,r4
   16ce8:	2c63803a 	cmpltu	r17,r5,r17
   16cec:	1c47883a 	add	r3,r3,r17
   16cf0:	2823883a 	mov	r17,r5
   16cf4:	1880202c 	andhi	r2,r3,128
   16cf8:	10005926 	beq	r2,zero,16e60 <__subdf3+0x214>
   16cfc:	84000044 	addi	r16,r16,1
   16d00:	0081ffc4 	movi	r2,2047
   16d04:	8080be26 	beq	r16,r2,17000 <__subdf3+0x3b4>
   16d08:	017fe034 	movhi	r5,65408
   16d0c:	297fffc4 	addi	r5,r5,-1
   16d10:	1946703a 	and	r3,r3,r5
   16d14:	1804977a 	slli	r2,r3,29
   16d18:	1806927a 	slli	r3,r3,9
   16d1c:	8822d0fa 	srli	r17,r17,3
   16d20:	8401ffcc 	andi	r16,r16,2047
   16d24:	180ad33a 	srli	r5,r3,12
   16d28:	9100004c 	andi	r4,r18,1
   16d2c:	1444b03a 	or	r2,r2,r17
   16d30:	80c1ffcc 	andi	r3,r16,2047
   16d34:	1820953a 	slli	r16,r3,20
   16d38:	20c03fcc 	andi	r3,r4,255
   16d3c:	180897fa 	slli	r4,r3,31
   16d40:	00c00434 	movhi	r3,16
   16d44:	18ffffc4 	addi	r3,r3,-1
   16d48:	28c6703a 	and	r3,r5,r3
   16d4c:	1c06b03a 	or	r3,r3,r16
   16d50:	1906b03a 	or	r3,r3,r4
   16d54:	dfc00417 	ldw	ra,16(sp)
   16d58:	dcc00317 	ldw	r19,12(sp)
   16d5c:	dc800217 	ldw	r18,8(sp)
   16d60:	dc400117 	ldw	r17,4(sp)
   16d64:	dc000017 	ldw	r16,0(sp)
   16d68:	dec00504 	addi	sp,sp,20
   16d6c:	f800283a 	ret
   16d70:	0101ffc4 	movi	r4,2047
   16d74:	813fd626 	beq	r16,r4,16cd0 <_gp+0xffff5764>
   16d78:	29402034 	orhi	r5,r5,128
   16d7c:	01000e04 	movi	r4,56
   16d80:	2080a316 	blt	r4,r2,17010 <__subdf3+0x3c4>
   16d84:	010007c4 	movi	r4,31
   16d88:	2080c616 	blt	r4,r2,170a4 <__subdf3+0x458>
   16d8c:	01000804 	movi	r4,32
   16d90:	2089c83a 	sub	r4,r4,r2
   16d94:	2910983a 	sll	r8,r5,r4
   16d98:	308ed83a 	srl	r7,r6,r2
   16d9c:	3108983a 	sll	r4,r6,r4
   16da0:	2884d83a 	srl	r2,r5,r2
   16da4:	41ccb03a 	or	r6,r8,r7
   16da8:	2008c03a 	cmpne	r4,r4,zero
   16dac:	310cb03a 	or	r6,r6,r4
   16db0:	898dc83a 	sub	r6,r17,r6
   16db4:	89a3803a 	cmpltu	r17,r17,r6
   16db8:	1887c83a 	sub	r3,r3,r2
   16dbc:	1c47c83a 	sub	r3,r3,r17
   16dc0:	3023883a 	mov	r17,r6
   16dc4:	1880202c 	andhi	r2,r3,128
   16dc8:	10002326 	beq	r2,zero,16e58 <__subdf3+0x20c>
   16dcc:	04c02034 	movhi	r19,128
   16dd0:	9cffffc4 	addi	r19,r19,-1
   16dd4:	1ce6703a 	and	r19,r3,r19
   16dd8:	98007a26 	beq	r19,zero,16fc4 <__subdf3+0x378>
   16ddc:	9809883a 	mov	r4,r19
   16de0:	0010fd40 	call	10fd4 <__clzsi2>
   16de4:	113ffe04 	addi	r4,r2,-8
   16de8:	00c007c4 	movi	r3,31
   16dec:	19007b16 	blt	r3,r4,16fdc <__subdf3+0x390>
   16df0:	00800804 	movi	r2,32
   16df4:	1105c83a 	sub	r2,r2,r4
   16df8:	8884d83a 	srl	r2,r17,r2
   16dfc:	9906983a 	sll	r3,r19,r4
   16e00:	8922983a 	sll	r17,r17,r4
   16e04:	10c4b03a 	or	r2,r2,r3
   16e08:	24007816 	blt	r4,r16,16fec <__subdf3+0x3a0>
   16e0c:	2421c83a 	sub	r16,r4,r16
   16e10:	80c00044 	addi	r3,r16,1
   16e14:	010007c4 	movi	r4,31
   16e18:	20c09516 	blt	r4,r3,17070 <__subdf3+0x424>
   16e1c:	01400804 	movi	r5,32
   16e20:	28cbc83a 	sub	r5,r5,r3
   16e24:	88c8d83a 	srl	r4,r17,r3
   16e28:	8962983a 	sll	r17,r17,r5
   16e2c:	114a983a 	sll	r5,r2,r5
   16e30:	10c6d83a 	srl	r3,r2,r3
   16e34:	8804c03a 	cmpne	r2,r17,zero
   16e38:	290ab03a 	or	r5,r5,r4
   16e3c:	28a2b03a 	or	r17,r5,r2
   16e40:	0021883a 	mov	r16,zero
   16e44:	003fa206 	br	16cd0 <_gp+0xffff5764>
   16e48:	2090b03a 	or	r8,r4,r2
   16e4c:	40018e26 	beq	r8,zero,17488 <__subdf3+0x83c>
   16e50:	1007883a 	mov	r3,r2
   16e54:	2023883a 	mov	r17,r4
   16e58:	888001cc 	andi	r2,r17,7
   16e5c:	103f9e1e 	bne	r2,zero,16cd8 <_gp+0xffff576c>
   16e60:	1804977a 	slli	r2,r3,29
   16e64:	8822d0fa 	srli	r17,r17,3
   16e68:	1810d0fa 	srli	r8,r3,3
   16e6c:	9100004c 	andi	r4,r18,1
   16e70:	1444b03a 	or	r2,r2,r17
   16e74:	00c1ffc4 	movi	r3,2047
   16e78:	80c02826 	beq	r16,r3,16f1c <__subdf3+0x2d0>
   16e7c:	01400434 	movhi	r5,16
   16e80:	297fffc4 	addi	r5,r5,-1
   16e84:	80e0703a 	and	r16,r16,r3
   16e88:	414a703a 	and	r5,r8,r5
   16e8c:	003fa806 	br	16d30 <_gp+0xffff57c4>
   16e90:	0080630e 	bge	zero,r2,17020 <__subdf3+0x3d4>
   16e94:	48003026 	beq	r9,zero,16f58 <__subdf3+0x30c>
   16e98:	0101ffc4 	movi	r4,2047
   16e9c:	813f8c26 	beq	r16,r4,16cd0 <_gp+0xffff5764>
   16ea0:	29402034 	orhi	r5,r5,128
   16ea4:	01000e04 	movi	r4,56
   16ea8:	2080a90e 	bge	r4,r2,17150 <__subdf3+0x504>
   16eac:	298cb03a 	or	r6,r5,r6
   16eb0:	3012c03a 	cmpne	r9,r6,zero
   16eb4:	0005883a 	mov	r2,zero
   16eb8:	4c53883a 	add	r9,r9,r17
   16ebc:	4c63803a 	cmpltu	r17,r9,r17
   16ec0:	10c7883a 	add	r3,r2,r3
   16ec4:	88c7883a 	add	r3,r17,r3
   16ec8:	4823883a 	mov	r17,r9
   16ecc:	1880202c 	andhi	r2,r3,128
   16ed0:	1000d026 	beq	r2,zero,17214 <__subdf3+0x5c8>
   16ed4:	84000044 	addi	r16,r16,1
   16ed8:	0081ffc4 	movi	r2,2047
   16edc:	8080fe26 	beq	r16,r2,172d8 <__subdf3+0x68c>
   16ee0:	00bfe034 	movhi	r2,65408
   16ee4:	10bfffc4 	addi	r2,r2,-1
   16ee8:	1886703a 	and	r3,r3,r2
   16eec:	880ad07a 	srli	r5,r17,1
   16ef0:	180497fa 	slli	r2,r3,31
   16ef4:	8900004c 	andi	r4,r17,1
   16ef8:	2922b03a 	or	r17,r5,r4
   16efc:	1806d07a 	srli	r3,r3,1
   16f00:	1462b03a 	or	r17,r2,r17
   16f04:	3825883a 	mov	r18,r7
   16f08:	003f7106 	br	16cd0 <_gp+0xffff5764>
   16f0c:	2984b03a 	or	r2,r5,r6
   16f10:	103f6826 	beq	r2,zero,16cb4 <_gp+0xffff5748>
   16f14:	39c03fcc 	andi	r7,r7,255
   16f18:	003f6706 	br	16cb8 <_gp+0xffff574c>
   16f1c:	4086b03a 	or	r3,r8,r2
   16f20:	18015226 	beq	r3,zero,1746c <__subdf3+0x820>
   16f24:	00c00434 	movhi	r3,16
   16f28:	41400234 	orhi	r5,r8,8
   16f2c:	18ffffc4 	addi	r3,r3,-1
   16f30:	28ca703a 	and	r5,r5,r3
   16f34:	003f7e06 	br	16d30 <_gp+0xffff57c4>
   16f38:	10bfffc4 	addi	r2,r2,-1
   16f3c:	1000491e 	bne	r2,zero,17064 <__subdf3+0x418>
   16f40:	898fc83a 	sub	r7,r17,r6
   16f44:	89e3803a 	cmpltu	r17,r17,r7
   16f48:	1947c83a 	sub	r3,r3,r5
   16f4c:	1c47c83a 	sub	r3,r3,r17
   16f50:	3823883a 	mov	r17,r7
   16f54:	003f9b06 	br	16dc4 <_gp+0xffff5858>
   16f58:	2988b03a 	or	r4,r5,r6
   16f5c:	203f5c26 	beq	r4,zero,16cd0 <_gp+0xffff5764>
   16f60:	10bfffc4 	addi	r2,r2,-1
   16f64:	1000931e 	bne	r2,zero,171b4 <__subdf3+0x568>
   16f68:	898d883a 	add	r6,r17,r6
   16f6c:	3463803a 	cmpltu	r17,r6,r17
   16f70:	1947883a 	add	r3,r3,r5
   16f74:	88c7883a 	add	r3,r17,r3
   16f78:	3023883a 	mov	r17,r6
   16f7c:	003fd306 	br	16ecc <_gp+0xffff5960>
   16f80:	1000541e 	bne	r2,zero,170d4 <__subdf3+0x488>
   16f84:	80800044 	addi	r2,r16,1
   16f88:	1081ffcc 	andi	r2,r2,2047
   16f8c:	01000044 	movi	r4,1
   16f90:	2080a20e 	bge	r4,r2,1721c <__subdf3+0x5d0>
   16f94:	8989c83a 	sub	r4,r17,r6
   16f98:	8905803a 	cmpltu	r2,r17,r4
   16f9c:	1967c83a 	sub	r19,r3,r5
   16fa0:	98a7c83a 	sub	r19,r19,r2
   16fa4:	9880202c 	andhi	r2,r19,128
   16fa8:	10006326 	beq	r2,zero,17138 <__subdf3+0x4ec>
   16fac:	3463c83a 	sub	r17,r6,r17
   16fb0:	28c7c83a 	sub	r3,r5,r3
   16fb4:	344d803a 	cmpltu	r6,r6,r17
   16fb8:	19a7c83a 	sub	r19,r3,r6
   16fbc:	3825883a 	mov	r18,r7
   16fc0:	983f861e 	bne	r19,zero,16ddc <_gp+0xffff5870>
   16fc4:	8809883a 	mov	r4,r17
   16fc8:	0010fd40 	call	10fd4 <__clzsi2>
   16fcc:	10800804 	addi	r2,r2,32
   16fd0:	113ffe04 	addi	r4,r2,-8
   16fd4:	00c007c4 	movi	r3,31
   16fd8:	193f850e 	bge	r3,r4,16df0 <_gp+0xffff5884>
   16fdc:	10bff604 	addi	r2,r2,-40
   16fe0:	8884983a 	sll	r2,r17,r2
   16fe4:	0023883a 	mov	r17,zero
   16fe8:	243f880e 	bge	r4,r16,16e0c <_gp+0xffff58a0>
   16fec:	00ffe034 	movhi	r3,65408
   16ff0:	18ffffc4 	addi	r3,r3,-1
   16ff4:	8121c83a 	sub	r16,r16,r4
   16ff8:	10c6703a 	and	r3,r2,r3
   16ffc:	003f3406 	br	16cd0 <_gp+0xffff5764>
   17000:	9100004c 	andi	r4,r18,1
   17004:	000b883a 	mov	r5,zero
   17008:	0005883a 	mov	r2,zero
   1700c:	003f4806 	br	16d30 <_gp+0xffff57c4>
   17010:	298cb03a 	or	r6,r5,r6
   17014:	300cc03a 	cmpne	r6,r6,zero
   17018:	0005883a 	mov	r2,zero
   1701c:	003f6406 	br	16db0 <_gp+0xffff5844>
   17020:	10009a1e 	bne	r2,zero,1728c <__subdf3+0x640>
   17024:	82400044 	addi	r9,r16,1
   17028:	4881ffcc 	andi	r2,r9,2047
   1702c:	02800044 	movi	r10,1
   17030:	5080670e 	bge	r10,r2,171d0 <__subdf3+0x584>
   17034:	0081ffc4 	movi	r2,2047
   17038:	4880af26 	beq	r9,r2,172f8 <__subdf3+0x6ac>
   1703c:	898d883a 	add	r6,r17,r6
   17040:	1945883a 	add	r2,r3,r5
   17044:	3447803a 	cmpltu	r3,r6,r17
   17048:	1887883a 	add	r3,r3,r2
   1704c:	182297fa 	slli	r17,r3,31
   17050:	300cd07a 	srli	r6,r6,1
   17054:	1806d07a 	srli	r3,r3,1
   17058:	4821883a 	mov	r16,r9
   1705c:	89a2b03a 	or	r17,r17,r6
   17060:	003f1b06 	br	16cd0 <_gp+0xffff5764>
   17064:	0101ffc4 	movi	r4,2047
   17068:	813f441e 	bne	r16,r4,16d7c <_gp+0xffff5810>
   1706c:	003f1806 	br	16cd0 <_gp+0xffff5764>
   17070:	843ff844 	addi	r16,r16,-31
   17074:	01400804 	movi	r5,32
   17078:	1408d83a 	srl	r4,r2,r16
   1707c:	19405026 	beq	r3,r5,171c0 <__subdf3+0x574>
   17080:	01401004 	movi	r5,64
   17084:	28c7c83a 	sub	r3,r5,r3
   17088:	10c4983a 	sll	r2,r2,r3
   1708c:	88a2b03a 	or	r17,r17,r2
   17090:	8822c03a 	cmpne	r17,r17,zero
   17094:	2462b03a 	or	r17,r4,r17
   17098:	0007883a 	mov	r3,zero
   1709c:	0021883a 	mov	r16,zero
   170a0:	003f6d06 	br	16e58 <_gp+0xffff58ec>
   170a4:	11fff804 	addi	r7,r2,-32
   170a8:	01000804 	movi	r4,32
   170ac:	29ced83a 	srl	r7,r5,r7
   170b0:	11004526 	beq	r2,r4,171c8 <__subdf3+0x57c>
   170b4:	01001004 	movi	r4,64
   170b8:	2089c83a 	sub	r4,r4,r2
   170bc:	2904983a 	sll	r2,r5,r4
   170c0:	118cb03a 	or	r6,r2,r6
   170c4:	300cc03a 	cmpne	r6,r6,zero
   170c8:	398cb03a 	or	r6,r7,r6
   170cc:	0005883a 	mov	r2,zero
   170d0:	003f3706 	br	16db0 <_gp+0xffff5844>
   170d4:	80002a26 	beq	r16,zero,17180 <__subdf3+0x534>
   170d8:	0101ffc4 	movi	r4,2047
   170dc:	49006626 	beq	r9,r4,17278 <__subdf3+0x62c>
   170e0:	0085c83a 	sub	r2,zero,r2
   170e4:	18c02034 	orhi	r3,r3,128
   170e8:	01000e04 	movi	r4,56
   170ec:	20807e16 	blt	r4,r2,172e8 <__subdf3+0x69c>
   170f0:	010007c4 	movi	r4,31
   170f4:	2080e716 	blt	r4,r2,17494 <__subdf3+0x848>
   170f8:	01000804 	movi	r4,32
   170fc:	2089c83a 	sub	r4,r4,r2
   17100:	1914983a 	sll	r10,r3,r4
   17104:	8890d83a 	srl	r8,r17,r2
   17108:	8908983a 	sll	r4,r17,r4
   1710c:	1884d83a 	srl	r2,r3,r2
   17110:	5222b03a 	or	r17,r10,r8
   17114:	2006c03a 	cmpne	r3,r4,zero
   17118:	88e2b03a 	or	r17,r17,r3
   1711c:	3463c83a 	sub	r17,r6,r17
   17120:	2885c83a 	sub	r2,r5,r2
   17124:	344d803a 	cmpltu	r6,r6,r17
   17128:	1187c83a 	sub	r3,r2,r6
   1712c:	4821883a 	mov	r16,r9
   17130:	3825883a 	mov	r18,r7
   17134:	003f2306 	br	16dc4 <_gp+0xffff5858>
   17138:	24d0b03a 	or	r8,r4,r19
   1713c:	40001b1e 	bne	r8,zero,171ac <__subdf3+0x560>
   17140:	0005883a 	mov	r2,zero
   17144:	0009883a 	mov	r4,zero
   17148:	0021883a 	mov	r16,zero
   1714c:	003f4906 	br	16e74 <_gp+0xffff5908>
   17150:	010007c4 	movi	r4,31
   17154:	20803a16 	blt	r4,r2,17240 <__subdf3+0x5f4>
   17158:	01000804 	movi	r4,32
   1715c:	2089c83a 	sub	r4,r4,r2
   17160:	2912983a 	sll	r9,r5,r4
   17164:	3090d83a 	srl	r8,r6,r2
   17168:	3108983a 	sll	r4,r6,r4
   1716c:	2884d83a 	srl	r2,r5,r2
   17170:	4a12b03a 	or	r9,r9,r8
   17174:	2008c03a 	cmpne	r4,r4,zero
   17178:	4912b03a 	or	r9,r9,r4
   1717c:	003f4e06 	br	16eb8 <_gp+0xffff594c>
   17180:	1c48b03a 	or	r4,r3,r17
   17184:	20003c26 	beq	r4,zero,17278 <__subdf3+0x62c>
   17188:	0084303a 	nor	r2,zero,r2
   1718c:	1000381e 	bne	r2,zero,17270 <__subdf3+0x624>
   17190:	3463c83a 	sub	r17,r6,r17
   17194:	28c5c83a 	sub	r2,r5,r3
   17198:	344d803a 	cmpltu	r6,r6,r17
   1719c:	1187c83a 	sub	r3,r2,r6
   171a0:	4821883a 	mov	r16,r9
   171a4:	3825883a 	mov	r18,r7
   171a8:	003f0606 	br	16dc4 <_gp+0xffff5858>
   171ac:	2023883a 	mov	r17,r4
   171b0:	003f0906 	br	16dd8 <_gp+0xffff586c>
   171b4:	0101ffc4 	movi	r4,2047
   171b8:	813f3a1e 	bne	r16,r4,16ea4 <_gp+0xffff5938>
   171bc:	003ec406 	br	16cd0 <_gp+0xffff5764>
   171c0:	0005883a 	mov	r2,zero
   171c4:	003fb106 	br	1708c <_gp+0xffff5b20>
   171c8:	0005883a 	mov	r2,zero
   171cc:	003fbc06 	br	170c0 <_gp+0xffff5b54>
   171d0:	1c44b03a 	or	r2,r3,r17
   171d4:	80008e1e 	bne	r16,zero,17410 <__subdf3+0x7c4>
   171d8:	1000c826 	beq	r2,zero,174fc <__subdf3+0x8b0>
   171dc:	2984b03a 	or	r2,r5,r6
   171e0:	103ebb26 	beq	r2,zero,16cd0 <_gp+0xffff5764>
   171e4:	8989883a 	add	r4,r17,r6
   171e8:	1945883a 	add	r2,r3,r5
   171ec:	2447803a 	cmpltu	r3,r4,r17
   171f0:	1887883a 	add	r3,r3,r2
   171f4:	1880202c 	andhi	r2,r3,128
   171f8:	2023883a 	mov	r17,r4
   171fc:	103f1626 	beq	r2,zero,16e58 <_gp+0xffff58ec>
   17200:	00bfe034 	movhi	r2,65408
   17204:	10bfffc4 	addi	r2,r2,-1
   17208:	5021883a 	mov	r16,r10
   1720c:	1886703a 	and	r3,r3,r2
   17210:	003eaf06 	br	16cd0 <_gp+0xffff5764>
   17214:	3825883a 	mov	r18,r7
   17218:	003f0f06 	br	16e58 <_gp+0xffff58ec>
   1721c:	1c44b03a 	or	r2,r3,r17
   17220:	8000251e 	bne	r16,zero,172b8 <__subdf3+0x66c>
   17224:	1000661e 	bne	r2,zero,173c0 <__subdf3+0x774>
   17228:	2990b03a 	or	r8,r5,r6
   1722c:	40009626 	beq	r8,zero,17488 <__subdf3+0x83c>
   17230:	2807883a 	mov	r3,r5
   17234:	3023883a 	mov	r17,r6
   17238:	3825883a 	mov	r18,r7
   1723c:	003ea406 	br	16cd0 <_gp+0xffff5764>
   17240:	127ff804 	addi	r9,r2,-32
   17244:	01000804 	movi	r4,32
   17248:	2a52d83a 	srl	r9,r5,r9
   1724c:	11008c26 	beq	r2,r4,17480 <__subdf3+0x834>
   17250:	01001004 	movi	r4,64
   17254:	2085c83a 	sub	r2,r4,r2
   17258:	2884983a 	sll	r2,r5,r2
   1725c:	118cb03a 	or	r6,r2,r6
   17260:	300cc03a 	cmpne	r6,r6,zero
   17264:	4992b03a 	or	r9,r9,r6
   17268:	0005883a 	mov	r2,zero
   1726c:	003f1206 	br	16eb8 <_gp+0xffff594c>
   17270:	0101ffc4 	movi	r4,2047
   17274:	493f9c1e 	bne	r9,r4,170e8 <_gp+0xffff5b7c>
   17278:	2807883a 	mov	r3,r5
   1727c:	3023883a 	mov	r17,r6
   17280:	4821883a 	mov	r16,r9
   17284:	3825883a 	mov	r18,r7
   17288:	003e9106 	br	16cd0 <_gp+0xffff5764>
   1728c:	80001f1e 	bne	r16,zero,1730c <__subdf3+0x6c0>
   17290:	1c48b03a 	or	r4,r3,r17
   17294:	20005a26 	beq	r4,zero,17400 <__subdf3+0x7b4>
   17298:	0084303a 	nor	r2,zero,r2
   1729c:	1000561e 	bne	r2,zero,173f8 <__subdf3+0x7ac>
   172a0:	89a3883a 	add	r17,r17,r6
   172a4:	1945883a 	add	r2,r3,r5
   172a8:	898d803a 	cmpltu	r6,r17,r6
   172ac:	3087883a 	add	r3,r6,r2
   172b0:	4821883a 	mov	r16,r9
   172b4:	003f0506 	br	16ecc <_gp+0xffff5960>
   172b8:	10002b1e 	bne	r2,zero,17368 <__subdf3+0x71c>
   172bc:	2984b03a 	or	r2,r5,r6
   172c0:	10008026 	beq	r2,zero,174c4 <__subdf3+0x878>
   172c4:	2807883a 	mov	r3,r5
   172c8:	3023883a 	mov	r17,r6
   172cc:	3825883a 	mov	r18,r7
   172d0:	0401ffc4 	movi	r16,2047
   172d4:	003e7e06 	br	16cd0 <_gp+0xffff5764>
   172d8:	3809883a 	mov	r4,r7
   172dc:	0011883a 	mov	r8,zero
   172e0:	0005883a 	mov	r2,zero
   172e4:	003ee306 	br	16e74 <_gp+0xffff5908>
   172e8:	1c62b03a 	or	r17,r3,r17
   172ec:	8822c03a 	cmpne	r17,r17,zero
   172f0:	0005883a 	mov	r2,zero
   172f4:	003f8906 	br	1711c <_gp+0xffff5bb0>
   172f8:	3809883a 	mov	r4,r7
   172fc:	4821883a 	mov	r16,r9
   17300:	0011883a 	mov	r8,zero
   17304:	0005883a 	mov	r2,zero
   17308:	003eda06 	br	16e74 <_gp+0xffff5908>
   1730c:	0101ffc4 	movi	r4,2047
   17310:	49003b26 	beq	r9,r4,17400 <__subdf3+0x7b4>
   17314:	0085c83a 	sub	r2,zero,r2
   17318:	18c02034 	orhi	r3,r3,128
   1731c:	01000e04 	movi	r4,56
   17320:	20806e16 	blt	r4,r2,174dc <__subdf3+0x890>
   17324:	010007c4 	movi	r4,31
   17328:	20807716 	blt	r4,r2,17508 <__subdf3+0x8bc>
   1732c:	01000804 	movi	r4,32
   17330:	2089c83a 	sub	r4,r4,r2
   17334:	1914983a 	sll	r10,r3,r4
   17338:	8890d83a 	srl	r8,r17,r2
   1733c:	8908983a 	sll	r4,r17,r4
   17340:	1884d83a 	srl	r2,r3,r2
   17344:	5222b03a 	or	r17,r10,r8
   17348:	2006c03a 	cmpne	r3,r4,zero
   1734c:	88e2b03a 	or	r17,r17,r3
   17350:	89a3883a 	add	r17,r17,r6
   17354:	1145883a 	add	r2,r2,r5
   17358:	898d803a 	cmpltu	r6,r17,r6
   1735c:	3087883a 	add	r3,r6,r2
   17360:	4821883a 	mov	r16,r9
   17364:	003ed906 	br	16ecc <_gp+0xffff5960>
   17368:	2984b03a 	or	r2,r5,r6
   1736c:	10004226 	beq	r2,zero,17478 <__subdf3+0x82c>
   17370:	1808d0fa 	srli	r4,r3,3
   17374:	8822d0fa 	srli	r17,r17,3
   17378:	1806977a 	slli	r3,r3,29
   1737c:	2080022c 	andhi	r2,r4,8
   17380:	1c62b03a 	or	r17,r3,r17
   17384:	10000826 	beq	r2,zero,173a8 <__subdf3+0x75c>
   17388:	2812d0fa 	srli	r9,r5,3
   1738c:	4880022c 	andhi	r2,r9,8
   17390:	1000051e 	bne	r2,zero,173a8 <__subdf3+0x75c>
   17394:	300cd0fa 	srli	r6,r6,3
   17398:	2804977a 	slli	r2,r5,29
   1739c:	4809883a 	mov	r4,r9
   173a0:	3825883a 	mov	r18,r7
   173a4:	11a2b03a 	or	r17,r2,r6
   173a8:	8806d77a 	srli	r3,r17,29
   173ac:	200890fa 	slli	r4,r4,3
   173b0:	882290fa 	slli	r17,r17,3
   173b4:	0401ffc4 	movi	r16,2047
   173b8:	1906b03a 	or	r3,r3,r4
   173bc:	003e4406 	br	16cd0 <_gp+0xffff5764>
   173c0:	2984b03a 	or	r2,r5,r6
   173c4:	103e4226 	beq	r2,zero,16cd0 <_gp+0xffff5764>
   173c8:	8989c83a 	sub	r4,r17,r6
   173cc:	8911803a 	cmpltu	r8,r17,r4
   173d0:	1945c83a 	sub	r2,r3,r5
   173d4:	1205c83a 	sub	r2,r2,r8
   173d8:	1200202c 	andhi	r8,r2,128
   173dc:	403e9a26 	beq	r8,zero,16e48 <_gp+0xffff58dc>
   173e0:	3463c83a 	sub	r17,r6,r17
   173e4:	28c5c83a 	sub	r2,r5,r3
   173e8:	344d803a 	cmpltu	r6,r6,r17
   173ec:	1187c83a 	sub	r3,r2,r6
   173f0:	3825883a 	mov	r18,r7
   173f4:	003e3606 	br	16cd0 <_gp+0xffff5764>
   173f8:	0101ffc4 	movi	r4,2047
   173fc:	493fc71e 	bne	r9,r4,1731c <_gp+0xffff5db0>
   17400:	2807883a 	mov	r3,r5
   17404:	3023883a 	mov	r17,r6
   17408:	4821883a 	mov	r16,r9
   1740c:	003e3006 	br	16cd0 <_gp+0xffff5764>
   17410:	10003626 	beq	r2,zero,174ec <__subdf3+0x8a0>
   17414:	2984b03a 	or	r2,r5,r6
   17418:	10001726 	beq	r2,zero,17478 <__subdf3+0x82c>
   1741c:	1808d0fa 	srli	r4,r3,3
   17420:	8822d0fa 	srli	r17,r17,3
   17424:	1806977a 	slli	r3,r3,29
   17428:	2080022c 	andhi	r2,r4,8
   1742c:	1c62b03a 	or	r17,r3,r17
   17430:	10000726 	beq	r2,zero,17450 <__subdf3+0x804>
   17434:	2812d0fa 	srli	r9,r5,3
   17438:	4880022c 	andhi	r2,r9,8
   1743c:	1000041e 	bne	r2,zero,17450 <__subdf3+0x804>
   17440:	300cd0fa 	srli	r6,r6,3
   17444:	2804977a 	slli	r2,r5,29
   17448:	4809883a 	mov	r4,r9
   1744c:	11a2b03a 	or	r17,r2,r6
   17450:	8806d77a 	srli	r3,r17,29
   17454:	200890fa 	slli	r4,r4,3
   17458:	882290fa 	slli	r17,r17,3
   1745c:	3825883a 	mov	r18,r7
   17460:	1906b03a 	or	r3,r3,r4
   17464:	0401ffc4 	movi	r16,2047
   17468:	003e1906 	br	16cd0 <_gp+0xffff5764>
   1746c:	000b883a 	mov	r5,zero
   17470:	0005883a 	mov	r2,zero
   17474:	003e2e06 	br	16d30 <_gp+0xffff57c4>
   17478:	0401ffc4 	movi	r16,2047
   1747c:	003e1406 	br	16cd0 <_gp+0xffff5764>
   17480:	0005883a 	mov	r2,zero
   17484:	003f7506 	br	1725c <_gp+0xffff5cf0>
   17488:	0005883a 	mov	r2,zero
   1748c:	0009883a 	mov	r4,zero
   17490:	003e7806 	br	16e74 <_gp+0xffff5908>
   17494:	123ff804 	addi	r8,r2,-32
   17498:	01000804 	movi	r4,32
   1749c:	1a10d83a 	srl	r8,r3,r8
   174a0:	11002526 	beq	r2,r4,17538 <__subdf3+0x8ec>
   174a4:	01001004 	movi	r4,64
   174a8:	2085c83a 	sub	r2,r4,r2
   174ac:	1884983a 	sll	r2,r3,r2
   174b0:	1444b03a 	or	r2,r2,r17
   174b4:	1004c03a 	cmpne	r2,r2,zero
   174b8:	40a2b03a 	or	r17,r8,r2
   174bc:	0005883a 	mov	r2,zero
   174c0:	003f1606 	br	1711c <_gp+0xffff5bb0>
   174c4:	02000434 	movhi	r8,16
   174c8:	0009883a 	mov	r4,zero
   174cc:	423fffc4 	addi	r8,r8,-1
   174d0:	00bfffc4 	movi	r2,-1
   174d4:	0401ffc4 	movi	r16,2047
   174d8:	003e6606 	br	16e74 <_gp+0xffff5908>
   174dc:	1c62b03a 	or	r17,r3,r17
   174e0:	8822c03a 	cmpne	r17,r17,zero
   174e4:	0005883a 	mov	r2,zero
   174e8:	003f9906 	br	17350 <_gp+0xffff5de4>
   174ec:	2807883a 	mov	r3,r5
   174f0:	3023883a 	mov	r17,r6
   174f4:	0401ffc4 	movi	r16,2047
   174f8:	003df506 	br	16cd0 <_gp+0xffff5764>
   174fc:	2807883a 	mov	r3,r5
   17500:	3023883a 	mov	r17,r6
   17504:	003df206 	br	16cd0 <_gp+0xffff5764>
   17508:	123ff804 	addi	r8,r2,-32
   1750c:	01000804 	movi	r4,32
   17510:	1a10d83a 	srl	r8,r3,r8
   17514:	11000a26 	beq	r2,r4,17540 <__subdf3+0x8f4>
   17518:	01001004 	movi	r4,64
   1751c:	2085c83a 	sub	r2,r4,r2
   17520:	1884983a 	sll	r2,r3,r2
   17524:	1444b03a 	or	r2,r2,r17
   17528:	1004c03a 	cmpne	r2,r2,zero
   1752c:	40a2b03a 	or	r17,r8,r2
   17530:	0005883a 	mov	r2,zero
   17534:	003f8606 	br	17350 <_gp+0xffff5de4>
   17538:	0005883a 	mov	r2,zero
   1753c:	003fdc06 	br	174b0 <_gp+0xffff5f44>
   17540:	0005883a 	mov	r2,zero
   17544:	003ff706 	br	17524 <_gp+0xffff5fb8>

00017548 <__fixdfsi>:
   17548:	280cd53a 	srli	r6,r5,20
   1754c:	00c00434 	movhi	r3,16
   17550:	18ffffc4 	addi	r3,r3,-1
   17554:	3181ffcc 	andi	r6,r6,2047
   17558:	01c0ff84 	movi	r7,1022
   1755c:	28c6703a 	and	r3,r5,r3
   17560:	280ad7fa 	srli	r5,r5,31
   17564:	3980120e 	bge	r7,r6,175b0 <__fixdfsi+0x68>
   17568:	00810744 	movi	r2,1053
   1756c:	11800c16 	blt	r2,r6,175a0 <__fixdfsi+0x58>
   17570:	00810cc4 	movi	r2,1075
   17574:	1185c83a 	sub	r2,r2,r6
   17578:	01c007c4 	movi	r7,31
   1757c:	18c00434 	orhi	r3,r3,16
   17580:	38800d16 	blt	r7,r2,175b8 <__fixdfsi+0x70>
   17584:	31befb44 	addi	r6,r6,-1043
   17588:	2084d83a 	srl	r2,r4,r2
   1758c:	1986983a 	sll	r3,r3,r6
   17590:	1884b03a 	or	r2,r3,r2
   17594:	28000726 	beq	r5,zero,175b4 <__fixdfsi+0x6c>
   17598:	0085c83a 	sub	r2,zero,r2
   1759c:	f800283a 	ret
   175a0:	00a00034 	movhi	r2,32768
   175a4:	10bfffc4 	addi	r2,r2,-1
   175a8:	2885883a 	add	r2,r5,r2
   175ac:	f800283a 	ret
   175b0:	0005883a 	mov	r2,zero
   175b4:	f800283a 	ret
   175b8:	008104c4 	movi	r2,1043
   175bc:	1185c83a 	sub	r2,r2,r6
   175c0:	1884d83a 	srl	r2,r3,r2
   175c4:	003ff306 	br	17594 <_gp+0xffff6028>

000175c8 <__floatsidf>:
   175c8:	defffd04 	addi	sp,sp,-12
   175cc:	dfc00215 	stw	ra,8(sp)
   175d0:	dc400115 	stw	r17,4(sp)
   175d4:	dc000015 	stw	r16,0(sp)
   175d8:	20002b26 	beq	r4,zero,17688 <__floatsidf+0xc0>
   175dc:	2023883a 	mov	r17,r4
   175e0:	2020d7fa 	srli	r16,r4,31
   175e4:	20002d16 	blt	r4,zero,1769c <__floatsidf+0xd4>
   175e8:	8809883a 	mov	r4,r17
   175ec:	0010fd40 	call	10fd4 <__clzsi2>
   175f0:	01410784 	movi	r5,1054
   175f4:	288bc83a 	sub	r5,r5,r2
   175f8:	01010cc4 	movi	r4,1075
   175fc:	2149c83a 	sub	r4,r4,r5
   17600:	00c007c4 	movi	r3,31
   17604:	1900160e 	bge	r3,r4,17660 <__floatsidf+0x98>
   17608:	00c104c4 	movi	r3,1043
   1760c:	1947c83a 	sub	r3,r3,r5
   17610:	88c6983a 	sll	r3,r17,r3
   17614:	00800434 	movhi	r2,16
   17618:	10bfffc4 	addi	r2,r2,-1
   1761c:	1886703a 	and	r3,r3,r2
   17620:	2941ffcc 	andi	r5,r5,2047
   17624:	800d883a 	mov	r6,r16
   17628:	0005883a 	mov	r2,zero
   1762c:	280a953a 	slli	r5,r5,20
   17630:	31803fcc 	andi	r6,r6,255
   17634:	01000434 	movhi	r4,16
   17638:	300c97fa 	slli	r6,r6,31
   1763c:	213fffc4 	addi	r4,r4,-1
   17640:	1906703a 	and	r3,r3,r4
   17644:	1946b03a 	or	r3,r3,r5
   17648:	1986b03a 	or	r3,r3,r6
   1764c:	dfc00217 	ldw	ra,8(sp)
   17650:	dc400117 	ldw	r17,4(sp)
   17654:	dc000017 	ldw	r16,0(sp)
   17658:	dec00304 	addi	sp,sp,12
   1765c:	f800283a 	ret
   17660:	00c002c4 	movi	r3,11
   17664:	1887c83a 	sub	r3,r3,r2
   17668:	88c6d83a 	srl	r3,r17,r3
   1766c:	8904983a 	sll	r2,r17,r4
   17670:	01000434 	movhi	r4,16
   17674:	213fffc4 	addi	r4,r4,-1
   17678:	2941ffcc 	andi	r5,r5,2047
   1767c:	1906703a 	and	r3,r3,r4
   17680:	800d883a 	mov	r6,r16
   17684:	003fe906 	br	1762c <_gp+0xffff60c0>
   17688:	000d883a 	mov	r6,zero
   1768c:	000b883a 	mov	r5,zero
   17690:	0007883a 	mov	r3,zero
   17694:	0005883a 	mov	r2,zero
   17698:	003fe406 	br	1762c <_gp+0xffff60c0>
   1769c:	0123c83a 	sub	r17,zero,r4
   176a0:	003fd106 	br	175e8 <_gp+0xffff607c>

000176a4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   176a4:	defffc04 	addi	sp,sp,-16
   176a8:	df000315 	stw	fp,12(sp)
   176ac:	df000304 	addi	fp,sp,12
   176b0:	e13ffd15 	stw	r4,-12(fp)
   176b4:	e17ffe15 	stw	r5,-8(fp)
   176b8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   176bc:	e0fffe17 	ldw	r3,-8(fp)
   176c0:	e0bffd17 	ldw	r2,-12(fp)
   176c4:	18800c26 	beq	r3,r2,176f8 <alt_load_section+0x54>
  {
    while( to != end )
   176c8:	00000806 	br	176ec <alt_load_section+0x48>
    {
      *to++ = *from++;
   176cc:	e0bffe17 	ldw	r2,-8(fp)
   176d0:	10c00104 	addi	r3,r2,4
   176d4:	e0fffe15 	stw	r3,-8(fp)
   176d8:	e0fffd17 	ldw	r3,-12(fp)
   176dc:	19000104 	addi	r4,r3,4
   176e0:	e13ffd15 	stw	r4,-12(fp)
   176e4:	18c00017 	ldw	r3,0(r3)
   176e8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   176ec:	e0fffe17 	ldw	r3,-8(fp)
   176f0:	e0bfff17 	ldw	r2,-4(fp)
   176f4:	18bff51e 	bne	r3,r2,176cc <_gp+0xffff6160>
    {
      *to++ = *from++;
    }
  }
}
   176f8:	0001883a 	nop
   176fc:	e037883a 	mov	sp,fp
   17700:	df000017 	ldw	fp,0(sp)
   17704:	dec00104 	addi	sp,sp,4
   17708:	f800283a 	ret

0001770c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   1770c:	defffe04 	addi	sp,sp,-8
   17710:	dfc00115 	stw	ra,4(sp)
   17714:	df000015 	stw	fp,0(sp)
   17718:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   1771c:	018000b4 	movhi	r6,2
   17720:	31a56704 	addi	r6,r6,-27236
   17724:	014000b4 	movhi	r5,2
   17728:	2964ae04 	addi	r5,r5,-27976
   1772c:	010000b4 	movhi	r4,2
   17730:	21256704 	addi	r4,r4,-27236
   17734:	00176a40 	call	176a4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   17738:	01800074 	movhi	r6,1
   1773c:	31809104 	addi	r6,r6,580
   17740:	01400074 	movhi	r5,1
   17744:	29400804 	addi	r5,r5,32
   17748:	01000074 	movhi	r4,1
   1774c:	21000804 	addi	r4,r4,32
   17750:	00176a40 	call	176a4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   17754:	018000b4 	movhi	r6,2
   17758:	31a4ae04 	addi	r6,r6,-27976
   1775c:	014000b4 	movhi	r5,2
   17760:	29640a04 	addi	r5,r5,-28632
   17764:	010000b4 	movhi	r4,2
   17768:	21240a04 	addi	r4,r4,-28632
   1776c:	00176a40 	call	176a4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   17770:	0017fdc0 	call	17fdc <alt_dcache_flush_all>
  alt_icache_flush_all();
   17774:	00181300 	call	18130 <alt_icache_flush_all>
}
   17778:	0001883a 	nop
   1777c:	e037883a 	mov	sp,fp
   17780:	dfc00117 	ldw	ra,4(sp)
   17784:	df000017 	ldw	fp,0(sp)
   17788:	dec00204 	addi	sp,sp,8
   1778c:	f800283a 	ret

00017790 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   17790:	defffd04 	addi	sp,sp,-12
   17794:	dfc00215 	stw	ra,8(sp)
   17798:	df000115 	stw	fp,4(sp)
   1779c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   177a0:	0009883a 	mov	r4,zero
   177a4:	0017b0c0 	call	17b0c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   177a8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   177ac:	0017b440 	call	17b44 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   177b0:	018000b4 	movhi	r6,2
   177b4:	31a4a304 	addi	r6,r6,-28020
   177b8:	014000b4 	movhi	r5,2
   177bc:	2964a304 	addi	r5,r5,-28020
   177c0:	010000b4 	movhi	r4,2
   177c4:	2124a304 	addi	r4,r4,-28020
   177c8:	00184e80 	call	184e8 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   177cc:	d0a0c817 	ldw	r2,-31968(gp)
   177d0:	d0e0c917 	ldw	r3,-31964(gp)
   177d4:	d120ca17 	ldw	r4,-31960(gp)
   177d8:	200d883a 	mov	r6,r4
   177dc:	180b883a 	mov	r5,r3
   177e0:	1009883a 	mov	r4,r2
   177e4:	001043c0 	call	1043c <main>
   177e8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   177ec:	01000044 	movi	r4,1
   177f0:	0017f040 	call	17f04 <close>
  exit (result);
   177f4:	e13fff17 	ldw	r4,-4(fp)
   177f8:	0018dbc0 	call	18dbc <exit>

000177fc <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   177fc:	defffd04 	addi	sp,sp,-12
   17800:	dfc00215 	stw	ra,8(sp)
   17804:	df000115 	stw	fp,4(sp)
   17808:	df000104 	addi	fp,sp,4
   1780c:	e13fff15 	stw	r4,-4(fp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
   17810:	d0a00117 	ldw	r2,-32764(gp)
   17814:	10800217 	ldw	r2,8(r2)
   17818:	100b883a 	mov	r5,r2
   1781c:	e13fff17 	ldw	r4,-4(fp)
   17820:	0018ddc0 	call	18ddc <fputs>
#endif
#endif
}
   17824:	e037883a 	mov	sp,fp
   17828:	dfc00117 	ldw	ra,4(sp)
   1782c:	df000017 	ldw	fp,0(sp)
   17830:	dec00204 	addi	sp,sp,8
   17834:	f800283a 	ret

00017838 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   17838:	defff904 	addi	sp,sp,-28
   1783c:	df000615 	stw	fp,24(sp)
   17840:	df000604 	addi	fp,sp,24
   17844:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17848:	0005303a 	rdctl	r2,status
   1784c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17850:	e0fffe17 	ldw	r3,-8(fp)
   17854:	00bfff84 	movi	r2,-2
   17858:	1884703a 	and	r2,r3,r2
   1785c:	1001703a 	wrctl	status,r2
  
  return context;
   17860:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   17864:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   17868:	d0a00217 	ldw	r2,-32760(gp)
   1786c:	10c000c4 	addi	r3,r2,3
   17870:	00bfff04 	movi	r2,-4
   17874:	1884703a 	and	r2,r3,r2
   17878:	d0a00215 	stw	r2,-32760(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   1787c:	d0e00217 	ldw	r3,-32760(gp)
   17880:	e0bfff17 	ldw	r2,-4(fp)
   17884:	1887883a 	add	r3,r3,r2
   17888:	008000b4 	movhi	r2,2
   1788c:	10be8004 	addi	r2,r2,-1536
   17890:	10c0062e 	bgeu	r2,r3,178ac <sbrk+0x74>
   17894:	e0bffb17 	ldw	r2,-20(fp)
   17898:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1789c:	e0bffa17 	ldw	r2,-24(fp)
   178a0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   178a4:	00bfffc4 	movi	r2,-1
   178a8:	00000b06 	br	178d8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   178ac:	d0a00217 	ldw	r2,-32760(gp)
   178b0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   178b4:	d0e00217 	ldw	r3,-32760(gp)
   178b8:	e0bfff17 	ldw	r2,-4(fp)
   178bc:	1885883a 	add	r2,r3,r2
   178c0:	d0a00215 	stw	r2,-32760(gp)
   178c4:	e0bffb17 	ldw	r2,-20(fp)
   178c8:	e0bffc15 	stw	r2,-16(fp)
   178cc:	e0bffc17 	ldw	r2,-16(fp)
   178d0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   178d4:	e0bffd17 	ldw	r2,-12(fp)
} 
   178d8:	e037883a 	mov	sp,fp
   178dc:	df000017 	ldw	fp,0(sp)
   178e0:	dec00104 	addi	sp,sp,4
   178e4:	f800283a 	ret

000178e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   178e8:	defffe04 	addi	sp,sp,-8
   178ec:	dfc00115 	stw	ra,4(sp)
   178f0:	df000015 	stw	fp,0(sp)
   178f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   178f8:	d0a00817 	ldw	r2,-32736(gp)
   178fc:	10000326 	beq	r2,zero,1790c <alt_get_errno+0x24>
   17900:	d0a00817 	ldw	r2,-32736(gp)
   17904:	103ee83a 	callr	r2
   17908:	00000106 	br	17910 <alt_get_errno+0x28>
   1790c:	d0a0c704 	addi	r2,gp,-31972
}
   17910:	e037883a 	mov	sp,fp
   17914:	dfc00117 	ldw	ra,4(sp)
   17918:	df000017 	ldw	fp,0(sp)
   1791c:	dec00204 	addi	sp,sp,8
   17920:	f800283a 	ret

00017924 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
   17924:	defffc04 	addi	sp,sp,-16
   17928:	dfc00315 	stw	ra,12(sp)
   1792c:	df000215 	stw	fp,8(sp)
   17930:	df000204 	addi	fp,sp,8
   17934:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   17938:	d0a0cd17 	ldw	r2,-31948(gp)
  clock_t ticks = alt_nticks(); 
   1793c:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   17940:	d0a0cc17 	ldw	r2,-31952(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
   17944:	1000061e 	bne	r2,zero,17960 <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
   17948:	00178e80 	call	178e8 <alt_get_errno>
   1794c:	1007883a 	mov	r3,r2
   17950:	00801604 	movi	r2,88
   17954:	18800015 	stw	r2,0(r3)
    return 0;
   17958:	0005883a 	mov	r2,zero
   1795c:	00000a06 	br	17988 <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
   17960:	e0bfff17 	ldw	r2,-4(fp)
   17964:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
   17968:	e0bfff17 	ldw	r2,-4(fp)
   1796c:	e0fffe17 	ldw	r3,-8(fp)
   17970:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
   17974:	e0bfff17 	ldw	r2,-4(fp)
   17978:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
   1797c:	e0bfff17 	ldw	r2,-4(fp)
   17980:	10000315 	stw	zero,12(r2)

  return ticks;
   17984:	e0bffe17 	ldw	r2,-8(fp)
}
   17988:	e037883a 	mov	sp,fp
   1798c:	dfc00117 	ldw	ra,4(sp)
   17990:	df000017 	ldw	fp,0(sp)
   17994:	dec00204 	addi	sp,sp,8
   17998:	f800283a 	ret

0001799c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1799c:	defffe04 	addi	sp,sp,-8
   179a0:	dfc00115 	stw	ra,4(sp)
   179a4:	df000015 	stw	fp,0(sp)
   179a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   179ac:	d0a00817 	ldw	r2,-32736(gp)
   179b0:	10000326 	beq	r2,zero,179c0 <alt_get_errno+0x24>
   179b4:	d0a00817 	ldw	r2,-32736(gp)
   179b8:	103ee83a 	callr	r2
   179bc:	00000106 	br	179c4 <alt_get_errno+0x28>
   179c0:	d0a0c704 	addi	r2,gp,-31972
}
   179c4:	e037883a 	mov	sp,fp
   179c8:	dfc00117 	ldw	ra,4(sp)
   179cc:	df000017 	ldw	fp,0(sp)
   179d0:	dec00204 	addi	sp,sp,8
   179d4:	f800283a 	ret

000179d8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   179d8:	defff904 	addi	sp,sp,-28
   179dc:	dfc00615 	stw	ra,24(sp)
   179e0:	df000515 	stw	fp,20(sp)
   179e4:	df000504 	addi	fp,sp,20
   179e8:	e13ffd15 	stw	r4,-12(fp)
   179ec:	e17ffe15 	stw	r5,-8(fp)
   179f0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   179f4:	e0bffd17 	ldw	r2,-12(fp)
   179f8:	10000816 	blt	r2,zero,17a1c <write+0x44>
   179fc:	01400304 	movi	r5,12
   17a00:	e13ffd17 	ldw	r4,-12(fp)
   17a04:	00110380 	call	11038 <__mulsi3>
   17a08:	1007883a 	mov	r3,r2
   17a0c:	008000b4 	movhi	r2,2
   17a10:	10a4fb04 	addi	r2,r2,-27668
   17a14:	1885883a 	add	r2,r3,r2
   17a18:	00000106 	br	17a20 <write+0x48>
   17a1c:	0005883a 	mov	r2,zero
   17a20:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   17a24:	e0bffb17 	ldw	r2,-20(fp)
   17a28:	10002126 	beq	r2,zero,17ab0 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   17a2c:	e0bffb17 	ldw	r2,-20(fp)
   17a30:	10800217 	ldw	r2,8(r2)
   17a34:	108000cc 	andi	r2,r2,3
   17a38:	10001826 	beq	r2,zero,17a9c <write+0xc4>
   17a3c:	e0bffb17 	ldw	r2,-20(fp)
   17a40:	10800017 	ldw	r2,0(r2)
   17a44:	10800617 	ldw	r2,24(r2)
   17a48:	10001426 	beq	r2,zero,17a9c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   17a4c:	e0bffb17 	ldw	r2,-20(fp)
   17a50:	10800017 	ldw	r2,0(r2)
   17a54:	10800617 	ldw	r2,24(r2)
   17a58:	e0ffff17 	ldw	r3,-4(fp)
   17a5c:	180d883a 	mov	r6,r3
   17a60:	e17ffe17 	ldw	r5,-8(fp)
   17a64:	e13ffb17 	ldw	r4,-20(fp)
   17a68:	103ee83a 	callr	r2
   17a6c:	e0bffc15 	stw	r2,-16(fp)
   17a70:	e0bffc17 	ldw	r2,-16(fp)
   17a74:	1000070e 	bge	r2,zero,17a94 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   17a78:	001799c0 	call	1799c <alt_get_errno>
   17a7c:	1007883a 	mov	r3,r2
   17a80:	e0bffc17 	ldw	r2,-16(fp)
   17a84:	0085c83a 	sub	r2,zero,r2
   17a88:	18800015 	stw	r2,0(r3)
        return -1;
   17a8c:	00bfffc4 	movi	r2,-1
   17a90:	00000c06 	br	17ac4 <write+0xec>
      }
      return rval;
   17a94:	e0bffc17 	ldw	r2,-16(fp)
   17a98:	00000a06 	br	17ac4 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   17a9c:	001799c0 	call	1799c <alt_get_errno>
   17aa0:	1007883a 	mov	r3,r2
   17aa4:	00800344 	movi	r2,13
   17aa8:	18800015 	stw	r2,0(r3)
   17aac:	00000406 	br	17ac0 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   17ab0:	001799c0 	call	1799c <alt_get_errno>
   17ab4:	1007883a 	mov	r3,r2
   17ab8:	00801444 	movi	r2,81
   17abc:	18800015 	stw	r2,0(r3)
  }
  return -1;
   17ac0:	00bfffc4 	movi	r2,-1
}
   17ac4:	e037883a 	mov	sp,fp
   17ac8:	dfc00117 	ldw	ra,4(sp)
   17acc:	df000017 	ldw	fp,0(sp)
   17ad0:	dec00204 	addi	sp,sp,8
   17ad4:	f800283a 	ret

00017ad8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   17ad8:	defffd04 	addi	sp,sp,-12
   17adc:	dfc00215 	stw	ra,8(sp)
   17ae0:	df000115 	stw	fp,4(sp)
   17ae4:	df000104 	addi	fp,sp,4
   17ae8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   17aec:	d1600504 	addi	r5,gp,-32748
   17af0:	e13fff17 	ldw	r4,-4(fp)
   17af4:	001808c0 	call	1808c <alt_dev_llist_insert>
}
   17af8:	e037883a 	mov	sp,fp
   17afc:	dfc00117 	ldw	ra,4(sp)
   17b00:	df000017 	ldw	fp,0(sp)
   17b04:	dec00204 	addi	sp,sp,8
   17b08:	f800283a 	ret

00017b0c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   17b0c:	defffd04 	addi	sp,sp,-12
   17b10:	dfc00215 	stw	ra,8(sp)
   17b14:	df000115 	stw	fp,4(sp)
   17b18:	df000104 	addi	fp,sp,4
   17b1c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   17b20:	0018a100 	call	18a10 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   17b24:	00800044 	movi	r2,1
   17b28:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   17b2c:	0001883a 	nop
   17b30:	e037883a 	mov	sp,fp
   17b34:	dfc00117 	ldw	ra,4(sp)
   17b38:	df000017 	ldw	fp,0(sp)
   17b3c:	dec00204 	addi	sp,sp,8
   17b40:	f800283a 	ret

00017b44 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   17b44:	defffe04 	addi	sp,sp,-8
   17b48:	dfc00115 	stw	ra,4(sp)
   17b4c:	df000015 	stw	fp,0(sp)
   17b50:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
   17b54:	01c0fa04 	movi	r7,1000
   17b58:	01800044 	movi	r6,1
   17b5c:	000b883a 	mov	r5,zero
   17b60:	010000b4 	movhi	r4,2
   17b64:	21040004 	addi	r4,r4,4096
   17b68:	0017e4c0 	call	17e4c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   17b6c:	010000b4 	movhi	r4,2
   17b70:	2124e604 	addi	r4,r4,-27752
   17b74:	0017ad80 	call	17ad8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   17b78:	0001883a 	nop
}
   17b7c:	0001883a 	nop
   17b80:	e037883a 	mov	sp,fp
   17b84:	dfc00117 	ldw	ra,4(sp)
   17b88:	df000017 	ldw	fp,0(sp)
   17b8c:	dec00204 	addi	sp,sp,8
   17b90:	f800283a 	ret

00017b94 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   17b94:	defffa04 	addi	sp,sp,-24
   17b98:	dfc00515 	stw	ra,20(sp)
   17b9c:	df000415 	stw	fp,16(sp)
   17ba0:	df000404 	addi	fp,sp,16
   17ba4:	e13ffd15 	stw	r4,-12(fp)
   17ba8:	e17ffe15 	stw	r5,-8(fp)
   17bac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   17bb0:	e0bffd17 	ldw	r2,-12(fp)
   17bb4:	10800017 	ldw	r2,0(r2)
   17bb8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   17bbc:	e0bffc17 	ldw	r2,-16(fp)
   17bc0:	10c00a04 	addi	r3,r2,40
   17bc4:	e0bffd17 	ldw	r2,-12(fp)
   17bc8:	10800217 	ldw	r2,8(r2)
   17bcc:	100f883a 	mov	r7,r2
   17bd0:	e1bfff17 	ldw	r6,-4(fp)
   17bd4:	e17ffe17 	ldw	r5,-8(fp)
   17bd8:	1809883a 	mov	r4,r3
   17bdc:	0017c540 	call	17c54 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   17be0:	e037883a 	mov	sp,fp
   17be4:	dfc00117 	ldw	ra,4(sp)
   17be8:	df000017 	ldw	fp,0(sp)
   17bec:	dec00204 	addi	sp,sp,8
   17bf0:	f800283a 	ret

00017bf4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   17bf4:	defffa04 	addi	sp,sp,-24
   17bf8:	dfc00515 	stw	ra,20(sp)
   17bfc:	df000415 	stw	fp,16(sp)
   17c00:	df000404 	addi	fp,sp,16
   17c04:	e13ffd15 	stw	r4,-12(fp)
   17c08:	e17ffe15 	stw	r5,-8(fp)
   17c0c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   17c10:	e0bffd17 	ldw	r2,-12(fp)
   17c14:	10800017 	ldw	r2,0(r2)
   17c18:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   17c1c:	e0bffc17 	ldw	r2,-16(fp)
   17c20:	10c00a04 	addi	r3,r2,40
   17c24:	e0bffd17 	ldw	r2,-12(fp)
   17c28:	10800217 	ldw	r2,8(r2)
   17c2c:	100f883a 	mov	r7,r2
   17c30:	e1bfff17 	ldw	r6,-4(fp)
   17c34:	e17ffe17 	ldw	r5,-8(fp)
   17c38:	1809883a 	mov	r4,r3
   17c3c:	0017d400 	call	17d40 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   17c40:	e037883a 	mov	sp,fp
   17c44:	dfc00117 	ldw	ra,4(sp)
   17c48:	df000017 	ldw	fp,0(sp)
   17c4c:	dec00204 	addi	sp,sp,8
   17c50:	f800283a 	ret

00017c54 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   17c54:	defff704 	addi	sp,sp,-36
   17c58:	df000815 	stw	fp,32(sp)
   17c5c:	df000804 	addi	fp,sp,32
   17c60:	e13ffc15 	stw	r4,-16(fp)
   17c64:	e17ffd15 	stw	r5,-12(fp)
   17c68:	e1bffe15 	stw	r6,-8(fp)
   17c6c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   17c70:	e0bffc17 	ldw	r2,-16(fp)
   17c74:	10800017 	ldw	r2,0(r2)
   17c78:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   17c7c:	e0bffd17 	ldw	r2,-12(fp)
   17c80:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   17c84:	e0bffe17 	ldw	r2,-8(fp)
   17c88:	e0fffd17 	ldw	r3,-12(fp)
   17c8c:	1885883a 	add	r2,r3,r2
   17c90:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   17c94:	00001206 	br	17ce0 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   17c98:	e0bff917 	ldw	r2,-28(fp)
   17c9c:	10800037 	ldwio	r2,0(r2)
   17ca0:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   17ca4:	e0bffb17 	ldw	r2,-20(fp)
   17ca8:	10a0000c 	andi	r2,r2,32768
   17cac:	10000626 	beq	r2,zero,17cc8 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   17cb0:	e0bff817 	ldw	r2,-32(fp)
   17cb4:	10c00044 	addi	r3,r2,1
   17cb8:	e0fff815 	stw	r3,-32(fp)
   17cbc:	e0fffb17 	ldw	r3,-20(fp)
   17cc0:	10c00005 	stb	r3,0(r2)
   17cc4:	00000606 	br	17ce0 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   17cc8:	e0fff817 	ldw	r3,-32(fp)
   17ccc:	e0bffd17 	ldw	r2,-12(fp)
   17cd0:	1880071e 	bne	r3,r2,17cf0 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   17cd4:	e0bfff17 	ldw	r2,-4(fp)
   17cd8:	1090000c 	andi	r2,r2,16384
   17cdc:	1000061e 	bne	r2,zero,17cf8 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   17ce0:	e0fff817 	ldw	r3,-32(fp)
   17ce4:	e0bffa17 	ldw	r2,-24(fp)
   17ce8:	18bfeb36 	bltu	r3,r2,17c98 <_gp+0xffff672c>
   17cec:	00000306 	br	17cfc <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
   17cf0:	0001883a 	nop
   17cf4:	00000106 	br	17cfc <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
   17cf8:	0001883a 	nop
    
  }

  if (ptr != buffer)
   17cfc:	e0fff817 	ldw	r3,-32(fp)
   17d00:	e0bffd17 	ldw	r2,-12(fp)
   17d04:	18800426 	beq	r3,r2,17d18 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   17d08:	e0fff817 	ldw	r3,-32(fp)
   17d0c:	e0bffd17 	ldw	r2,-12(fp)
   17d10:	1885c83a 	sub	r2,r3,r2
   17d14:	00000606 	br	17d30 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   17d18:	e0bfff17 	ldw	r2,-4(fp)
   17d1c:	1090000c 	andi	r2,r2,16384
   17d20:	10000226 	beq	r2,zero,17d2c <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   17d24:	00bffd44 	movi	r2,-11
   17d28:	00000106 	br	17d30 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   17d2c:	00bffec4 	movi	r2,-5
}
   17d30:	e037883a 	mov	sp,fp
   17d34:	df000017 	ldw	fp,0(sp)
   17d38:	dec00104 	addi	sp,sp,4
   17d3c:	f800283a 	ret

00017d40 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   17d40:	defff904 	addi	sp,sp,-28
   17d44:	df000615 	stw	fp,24(sp)
   17d48:	df000604 	addi	fp,sp,24
   17d4c:	e13ffc15 	stw	r4,-16(fp)
   17d50:	e17ffd15 	stw	r5,-12(fp)
   17d54:	e1bffe15 	stw	r6,-8(fp)
   17d58:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   17d5c:	e0bffc17 	ldw	r2,-16(fp)
   17d60:	10800017 	ldw	r2,0(r2)
   17d64:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   17d68:	e0bffe17 	ldw	r2,-8(fp)
   17d6c:	e0fffd17 	ldw	r3,-12(fp)
   17d70:	1885883a 	add	r2,r3,r2
   17d74:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   17d78:	00000e06 	br	17db4 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   17d7c:	e0bffa17 	ldw	r2,-24(fp)
   17d80:	10800104 	addi	r2,r2,4
   17d84:	10800037 	ldwio	r2,0(r2)
   17d88:	10bfffec 	andhi	r2,r2,65535
   17d8c:	10000926 	beq	r2,zero,17db4 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   17d90:	e0fffa17 	ldw	r3,-24(fp)
   17d94:	e0bffd17 	ldw	r2,-12(fp)
   17d98:	11000044 	addi	r4,r2,1
   17d9c:	e13ffd15 	stw	r4,-12(fp)
   17da0:	10800003 	ldbu	r2,0(r2)
   17da4:	10803fcc 	andi	r2,r2,255
   17da8:	1080201c 	xori	r2,r2,128
   17dac:	10bfe004 	addi	r2,r2,-128
   17db0:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   17db4:	e0fffd17 	ldw	r3,-12(fp)
   17db8:	e0bffb17 	ldw	r2,-20(fp)
   17dbc:	18bfef36 	bltu	r3,r2,17d7c <_gp+0xffff6810>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   17dc0:	e0bffe17 	ldw	r2,-8(fp)
}
   17dc4:	e037883a 	mov	sp,fp
   17dc8:	df000017 	ldw	fp,0(sp)
   17dcc:	dec00104 	addi	sp,sp,4
   17dd0:	f800283a 	ret

00017dd4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   17dd4:	defffa04 	addi	sp,sp,-24
   17dd8:	dfc00515 	stw	ra,20(sp)
   17ddc:	df000415 	stw	fp,16(sp)
   17de0:	df000404 	addi	fp,sp,16
   17de4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   17de8:	0007883a 	mov	r3,zero
   17dec:	e0bfff17 	ldw	r2,-4(fp)
   17df0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   17df4:	e0bfff17 	ldw	r2,-4(fp)
   17df8:	10800104 	addi	r2,r2,4
   17dfc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17e00:	0005303a 	rdctl	r2,status
   17e04:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17e08:	e0fffd17 	ldw	r3,-12(fp)
   17e0c:	00bfff84 	movi	r2,-2
   17e10:	1884703a 	and	r2,r3,r2
   17e14:	1001703a 	wrctl	status,r2
  
  return context;
   17e18:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   17e1c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   17e20:	00189080 	call	18908 <alt_tick>
   17e24:	e0bffc17 	ldw	r2,-16(fp)
   17e28:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17e2c:	e0bffe17 	ldw	r2,-8(fp)
   17e30:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   17e34:	0001883a 	nop
   17e38:	e037883a 	mov	sp,fp
   17e3c:	dfc00117 	ldw	ra,4(sp)
   17e40:	df000017 	ldw	fp,0(sp)
   17e44:	dec00204 	addi	sp,sp,8
   17e48:	f800283a 	ret

00017e4c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   17e4c:	defff804 	addi	sp,sp,-32
   17e50:	dfc00715 	stw	ra,28(sp)
   17e54:	df000615 	stw	fp,24(sp)
   17e58:	df000604 	addi	fp,sp,24
   17e5c:	e13ffc15 	stw	r4,-16(fp)
   17e60:	e17ffd15 	stw	r5,-12(fp)
   17e64:	e1bffe15 	stw	r6,-8(fp)
   17e68:	e1ffff15 	stw	r7,-4(fp)
   17e6c:	e0bfff17 	ldw	r2,-4(fp)
   17e70:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   17e74:	d0a0cc17 	ldw	r2,-31952(gp)
   17e78:	1000021e 	bne	r2,zero,17e84 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   17e7c:	e0bffb17 	ldw	r2,-20(fp)
   17e80:	d0a0cc15 	stw	r2,-31952(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   17e84:	e0bffc17 	ldw	r2,-16(fp)
   17e88:	10800104 	addi	r2,r2,4
   17e8c:	00c001c4 	movi	r3,7
   17e90:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   17e94:	d8000015 	stw	zero,0(sp)
   17e98:	e1fffc17 	ldw	r7,-16(fp)
   17e9c:	01800074 	movhi	r6,1
   17ea0:	319f7504 	addi	r6,r6,32212
   17ea4:	e17ffe17 	ldw	r5,-8(fp)
   17ea8:	e13ffd17 	ldw	r4,-12(fp)
   17eac:	00181640 	call	18164 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   17eb0:	0001883a 	nop
   17eb4:	e037883a 	mov	sp,fp
   17eb8:	dfc00117 	ldw	ra,4(sp)
   17ebc:	df000017 	ldw	fp,0(sp)
   17ec0:	dec00204 	addi	sp,sp,8
   17ec4:	f800283a 	ret

00017ec8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   17ec8:	defffe04 	addi	sp,sp,-8
   17ecc:	dfc00115 	stw	ra,4(sp)
   17ed0:	df000015 	stw	fp,0(sp)
   17ed4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   17ed8:	d0a00817 	ldw	r2,-32736(gp)
   17edc:	10000326 	beq	r2,zero,17eec <alt_get_errno+0x24>
   17ee0:	d0a00817 	ldw	r2,-32736(gp)
   17ee4:	103ee83a 	callr	r2
   17ee8:	00000106 	br	17ef0 <alt_get_errno+0x28>
   17eec:	d0a0c704 	addi	r2,gp,-31972
}
   17ef0:	e037883a 	mov	sp,fp
   17ef4:	dfc00117 	ldw	ra,4(sp)
   17ef8:	df000017 	ldw	fp,0(sp)
   17efc:	dec00204 	addi	sp,sp,8
   17f00:	f800283a 	ret

00017f04 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   17f04:	defffb04 	addi	sp,sp,-20
   17f08:	dfc00415 	stw	ra,16(sp)
   17f0c:	df000315 	stw	fp,12(sp)
   17f10:	df000304 	addi	fp,sp,12
   17f14:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   17f18:	e0bfff17 	ldw	r2,-4(fp)
   17f1c:	10000816 	blt	r2,zero,17f40 <close+0x3c>
   17f20:	01400304 	movi	r5,12
   17f24:	e13fff17 	ldw	r4,-4(fp)
   17f28:	00110380 	call	11038 <__mulsi3>
   17f2c:	1007883a 	mov	r3,r2
   17f30:	008000b4 	movhi	r2,2
   17f34:	10a4fb04 	addi	r2,r2,-27668
   17f38:	1885883a 	add	r2,r3,r2
   17f3c:	00000106 	br	17f44 <close+0x40>
   17f40:	0005883a 	mov	r2,zero
   17f44:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   17f48:	e0bffd17 	ldw	r2,-12(fp)
   17f4c:	10001926 	beq	r2,zero,17fb4 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   17f50:	e0bffd17 	ldw	r2,-12(fp)
   17f54:	10800017 	ldw	r2,0(r2)
   17f58:	10800417 	ldw	r2,16(r2)
   17f5c:	10000626 	beq	r2,zero,17f78 <close+0x74>
   17f60:	e0bffd17 	ldw	r2,-12(fp)
   17f64:	10800017 	ldw	r2,0(r2)
   17f68:	10800417 	ldw	r2,16(r2)
   17f6c:	e13ffd17 	ldw	r4,-12(fp)
   17f70:	103ee83a 	callr	r2
   17f74:	00000106 	br	17f7c <close+0x78>
   17f78:	0005883a 	mov	r2,zero
   17f7c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   17f80:	e13fff17 	ldw	r4,-4(fp)
   17f84:	00187e80 	call	187e8 <alt_release_fd>
    if (rval < 0)
   17f88:	e0bffe17 	ldw	r2,-8(fp)
   17f8c:	1000070e 	bge	r2,zero,17fac <close+0xa8>
    {
      ALT_ERRNO = -rval;
   17f90:	0017ec80 	call	17ec8 <alt_get_errno>
   17f94:	1007883a 	mov	r3,r2
   17f98:	e0bffe17 	ldw	r2,-8(fp)
   17f9c:	0085c83a 	sub	r2,zero,r2
   17fa0:	18800015 	stw	r2,0(r3)
      return -1;
   17fa4:	00bfffc4 	movi	r2,-1
   17fa8:	00000706 	br	17fc8 <close+0xc4>
    }
    return 0;
   17fac:	0005883a 	mov	r2,zero
   17fb0:	00000506 	br	17fc8 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   17fb4:	0017ec80 	call	17ec8 <alt_get_errno>
   17fb8:	1007883a 	mov	r3,r2
   17fbc:	00801444 	movi	r2,81
   17fc0:	18800015 	stw	r2,0(r3)
    return -1;
   17fc4:	00bfffc4 	movi	r2,-1
  }
}
   17fc8:	e037883a 	mov	sp,fp
   17fcc:	dfc00117 	ldw	ra,4(sp)
   17fd0:	df000017 	ldw	fp,0(sp)
   17fd4:	dec00204 	addi	sp,sp,8
   17fd8:	f800283a 	ret

00017fdc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   17fdc:	defffe04 	addi	sp,sp,-8
   17fe0:	df000115 	stw	fp,4(sp)
   17fe4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   17fe8:	e03fff15 	stw	zero,-4(fp)
   17fec:	00000506 	br	18004 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   17ff0:	e0bfff17 	ldw	r2,-4(fp)
   17ff4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   17ff8:	e0bfff17 	ldw	r2,-4(fp)
   17ffc:	10800804 	addi	r2,r2,32
   18000:	e0bfff15 	stw	r2,-4(fp)
   18004:	e0bfff17 	ldw	r2,-4(fp)
   18008:	10820030 	cmpltui	r2,r2,2048
   1800c:	103ff81e 	bne	r2,zero,17ff0 <_gp+0xffff6a84>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   18010:	0001883a 	nop
   18014:	e037883a 	mov	sp,fp
   18018:	df000017 	ldw	fp,0(sp)
   1801c:	dec00104 	addi	sp,sp,4
   18020:	f800283a 	ret

00018024 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   18024:	defffc04 	addi	sp,sp,-16
   18028:	df000315 	stw	fp,12(sp)
   1802c:	df000304 	addi	fp,sp,12
   18030:	e13ffd15 	stw	r4,-12(fp)
   18034:	e17ffe15 	stw	r5,-8(fp)
   18038:	e1bfff15 	stw	r6,-4(fp)
  return len;
   1803c:	e0bfff17 	ldw	r2,-4(fp)
}
   18040:	e037883a 	mov	sp,fp
   18044:	df000017 	ldw	fp,0(sp)
   18048:	dec00104 	addi	sp,sp,4
   1804c:	f800283a 	ret

00018050 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   18050:	defffe04 	addi	sp,sp,-8
   18054:	dfc00115 	stw	ra,4(sp)
   18058:	df000015 	stw	fp,0(sp)
   1805c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   18060:	d0a00817 	ldw	r2,-32736(gp)
   18064:	10000326 	beq	r2,zero,18074 <alt_get_errno+0x24>
   18068:	d0a00817 	ldw	r2,-32736(gp)
   1806c:	103ee83a 	callr	r2
   18070:	00000106 	br	18078 <alt_get_errno+0x28>
   18074:	d0a0c704 	addi	r2,gp,-31972
}
   18078:	e037883a 	mov	sp,fp
   1807c:	dfc00117 	ldw	ra,4(sp)
   18080:	df000017 	ldw	fp,0(sp)
   18084:	dec00204 	addi	sp,sp,8
   18088:	f800283a 	ret

0001808c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1808c:	defffa04 	addi	sp,sp,-24
   18090:	dfc00515 	stw	ra,20(sp)
   18094:	df000415 	stw	fp,16(sp)
   18098:	df000404 	addi	fp,sp,16
   1809c:	e13ffe15 	stw	r4,-8(fp)
   180a0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   180a4:	e0bffe17 	ldw	r2,-8(fp)
   180a8:	10000326 	beq	r2,zero,180b8 <alt_dev_llist_insert+0x2c>
   180ac:	e0bffe17 	ldw	r2,-8(fp)
   180b0:	10800217 	ldw	r2,8(r2)
   180b4:	1000061e 	bne	r2,zero,180d0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   180b8:	00180500 	call	18050 <alt_get_errno>
   180bc:	1007883a 	mov	r3,r2
   180c0:	00800584 	movi	r2,22
   180c4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   180c8:	00bffa84 	movi	r2,-22
   180cc:	00001306 	br	1811c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   180d0:	e0bffe17 	ldw	r2,-8(fp)
   180d4:	e0ffff17 	ldw	r3,-4(fp)
   180d8:	e0fffc15 	stw	r3,-16(fp)
   180dc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   180e0:	e0bffd17 	ldw	r2,-12(fp)
   180e4:	e0fffc17 	ldw	r3,-16(fp)
   180e8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   180ec:	e0bffc17 	ldw	r2,-16(fp)
   180f0:	10c00017 	ldw	r3,0(r2)
   180f4:	e0bffd17 	ldw	r2,-12(fp)
   180f8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   180fc:	e0bffc17 	ldw	r2,-16(fp)
   18100:	10800017 	ldw	r2,0(r2)
   18104:	e0fffd17 	ldw	r3,-12(fp)
   18108:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1810c:	e0bffc17 	ldw	r2,-16(fp)
   18110:	e0fffd17 	ldw	r3,-12(fp)
   18114:	10c00015 	stw	r3,0(r2)

  return 0;  
   18118:	0005883a 	mov	r2,zero
}
   1811c:	e037883a 	mov	sp,fp
   18120:	dfc00117 	ldw	ra,4(sp)
   18124:	df000017 	ldw	fp,0(sp)
   18128:	dec00204 	addi	sp,sp,8
   1812c:	f800283a 	ret

00018130 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   18130:	defffe04 	addi	sp,sp,-8
   18134:	dfc00115 	stw	ra,4(sp)
   18138:	df000015 	stw	fp,0(sp)
   1813c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   18140:	01420004 	movi	r5,2048
   18144:	0009883a 	mov	r4,zero
   18148:	0018c900 	call	18c90 <alt_icache_flush>
#endif
}
   1814c:	0001883a 	nop
   18150:	e037883a 	mov	sp,fp
   18154:	dfc00117 	ldw	ra,4(sp)
   18158:	df000017 	ldw	fp,0(sp)
   1815c:	dec00204 	addi	sp,sp,8
   18160:	f800283a 	ret

00018164 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   18164:	defff904 	addi	sp,sp,-28
   18168:	dfc00615 	stw	ra,24(sp)
   1816c:	df000515 	stw	fp,20(sp)
   18170:	df000504 	addi	fp,sp,20
   18174:	e13ffc15 	stw	r4,-16(fp)
   18178:	e17ffd15 	stw	r5,-12(fp)
   1817c:	e1bffe15 	stw	r6,-8(fp)
   18180:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   18184:	e0800217 	ldw	r2,8(fp)
   18188:	d8800015 	stw	r2,0(sp)
   1818c:	e1ffff17 	ldw	r7,-4(fp)
   18190:	e1bffe17 	ldw	r6,-8(fp)
   18194:	e17ffd17 	ldw	r5,-12(fp)
   18198:	e13ffc17 	ldw	r4,-16(fp)
   1819c:	00183140 	call	18314 <alt_iic_isr_register>
}  
   181a0:	e037883a 	mov	sp,fp
   181a4:	dfc00117 	ldw	ra,4(sp)
   181a8:	df000017 	ldw	fp,0(sp)
   181ac:	dec00204 	addi	sp,sp,8
   181b0:	f800283a 	ret

000181b4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   181b4:	defff904 	addi	sp,sp,-28
   181b8:	df000615 	stw	fp,24(sp)
   181bc:	df000604 	addi	fp,sp,24
   181c0:	e13ffe15 	stw	r4,-8(fp)
   181c4:	e17fff15 	stw	r5,-4(fp)
   181c8:	e0bfff17 	ldw	r2,-4(fp)
   181cc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   181d0:	0005303a 	rdctl	r2,status
   181d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   181d8:	e0fffb17 	ldw	r3,-20(fp)
   181dc:	00bfff84 	movi	r2,-2
   181e0:	1884703a 	and	r2,r3,r2
   181e4:	1001703a 	wrctl	status,r2
  
  return context;
   181e8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   181ec:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   181f0:	00c00044 	movi	r3,1
   181f4:	e0bffa17 	ldw	r2,-24(fp)
   181f8:	1884983a 	sll	r2,r3,r2
   181fc:	1007883a 	mov	r3,r2
   18200:	d0a0cb17 	ldw	r2,-31956(gp)
   18204:	1884b03a 	or	r2,r3,r2
   18208:	d0a0cb15 	stw	r2,-31956(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1820c:	d0a0cb17 	ldw	r2,-31956(gp)
   18210:	100170fa 	wrctl	ienable,r2
   18214:	e0bffc17 	ldw	r2,-16(fp)
   18218:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1821c:	e0bffd17 	ldw	r2,-12(fp)
   18220:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   18224:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   18228:	0001883a 	nop
}
   1822c:	e037883a 	mov	sp,fp
   18230:	df000017 	ldw	fp,0(sp)
   18234:	dec00104 	addi	sp,sp,4
   18238:	f800283a 	ret

0001823c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   1823c:	defff904 	addi	sp,sp,-28
   18240:	df000615 	stw	fp,24(sp)
   18244:	df000604 	addi	fp,sp,24
   18248:	e13ffe15 	stw	r4,-8(fp)
   1824c:	e17fff15 	stw	r5,-4(fp)
   18250:	e0bfff17 	ldw	r2,-4(fp)
   18254:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18258:	0005303a 	rdctl	r2,status
   1825c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18260:	e0fffb17 	ldw	r3,-20(fp)
   18264:	00bfff84 	movi	r2,-2
   18268:	1884703a 	and	r2,r3,r2
   1826c:	1001703a 	wrctl	status,r2
  
  return context;
   18270:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   18274:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   18278:	00c00044 	movi	r3,1
   1827c:	e0bffa17 	ldw	r2,-24(fp)
   18280:	1884983a 	sll	r2,r3,r2
   18284:	0084303a 	nor	r2,zero,r2
   18288:	1007883a 	mov	r3,r2
   1828c:	d0a0cb17 	ldw	r2,-31956(gp)
   18290:	1884703a 	and	r2,r3,r2
   18294:	d0a0cb15 	stw	r2,-31956(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   18298:	d0a0cb17 	ldw	r2,-31956(gp)
   1829c:	100170fa 	wrctl	ienable,r2
   182a0:	e0bffc17 	ldw	r2,-16(fp)
   182a4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   182a8:	e0bffd17 	ldw	r2,-12(fp)
   182ac:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   182b0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   182b4:	0001883a 	nop
}
   182b8:	e037883a 	mov	sp,fp
   182bc:	df000017 	ldw	fp,0(sp)
   182c0:	dec00104 	addi	sp,sp,4
   182c4:	f800283a 	ret

000182c8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   182c8:	defffc04 	addi	sp,sp,-16
   182cc:	df000315 	stw	fp,12(sp)
   182d0:	df000304 	addi	fp,sp,12
   182d4:	e13ffe15 	stw	r4,-8(fp)
   182d8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   182dc:	000530fa 	rdctl	r2,ienable
   182e0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   182e4:	00c00044 	movi	r3,1
   182e8:	e0bfff17 	ldw	r2,-4(fp)
   182ec:	1884983a 	sll	r2,r3,r2
   182f0:	1007883a 	mov	r3,r2
   182f4:	e0bffd17 	ldw	r2,-12(fp)
   182f8:	1884703a 	and	r2,r3,r2
   182fc:	1004c03a 	cmpne	r2,r2,zero
   18300:	10803fcc 	andi	r2,r2,255
}
   18304:	e037883a 	mov	sp,fp
   18308:	df000017 	ldw	fp,0(sp)
   1830c:	dec00104 	addi	sp,sp,4
   18310:	f800283a 	ret

00018314 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   18314:	defff504 	addi	sp,sp,-44
   18318:	dfc00a15 	stw	ra,40(sp)
   1831c:	df000915 	stw	fp,36(sp)
   18320:	df000904 	addi	fp,sp,36
   18324:	e13ffc15 	stw	r4,-16(fp)
   18328:	e17ffd15 	stw	r5,-12(fp)
   1832c:	e1bffe15 	stw	r6,-8(fp)
   18330:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   18334:	00bffa84 	movi	r2,-22
   18338:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   1833c:	e0bffd17 	ldw	r2,-12(fp)
   18340:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   18344:	e0bff817 	ldw	r2,-32(fp)
   18348:	10800808 	cmpgei	r2,r2,32
   1834c:	1000271e 	bne	r2,zero,183ec <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18350:	0005303a 	rdctl	r2,status
   18354:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18358:	e0fffb17 	ldw	r3,-20(fp)
   1835c:	00bfff84 	movi	r2,-2
   18360:	1884703a 	and	r2,r3,r2
   18364:	1001703a 	wrctl	status,r2
  
  return context;
   18368:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   1836c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   18370:	008000b4 	movhi	r2,2
   18374:	10a62a04 	addi	r2,r2,-26456
   18378:	e0fff817 	ldw	r3,-32(fp)
   1837c:	180690fa 	slli	r3,r3,3
   18380:	10c5883a 	add	r2,r2,r3
   18384:	e0fffe17 	ldw	r3,-8(fp)
   18388:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   1838c:	008000b4 	movhi	r2,2
   18390:	10a62a04 	addi	r2,r2,-26456
   18394:	e0fff817 	ldw	r3,-32(fp)
   18398:	180690fa 	slli	r3,r3,3
   1839c:	10c5883a 	add	r2,r2,r3
   183a0:	10800104 	addi	r2,r2,4
   183a4:	e0ffff17 	ldw	r3,-4(fp)
   183a8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   183ac:	e0bffe17 	ldw	r2,-8(fp)
   183b0:	10000526 	beq	r2,zero,183c8 <alt_iic_isr_register+0xb4>
   183b4:	e0bff817 	ldw	r2,-32(fp)
   183b8:	100b883a 	mov	r5,r2
   183bc:	e13ffc17 	ldw	r4,-16(fp)
   183c0:	00181b40 	call	181b4 <alt_ic_irq_enable>
   183c4:	00000406 	br	183d8 <alt_iic_isr_register+0xc4>
   183c8:	e0bff817 	ldw	r2,-32(fp)
   183cc:	100b883a 	mov	r5,r2
   183d0:	e13ffc17 	ldw	r4,-16(fp)
   183d4:	001823c0 	call	1823c <alt_ic_irq_disable>
   183d8:	e0bff715 	stw	r2,-36(fp)
   183dc:	e0bffa17 	ldw	r2,-24(fp)
   183e0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   183e4:	e0bff917 	ldw	r2,-28(fp)
   183e8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   183ec:	e0bff717 	ldw	r2,-36(fp)
}
   183f0:	e037883a 	mov	sp,fp
   183f4:	dfc00117 	ldw	ra,4(sp)
   183f8:	df000017 	ldw	fp,0(sp)
   183fc:	dec00204 	addi	sp,sp,8
   18400:	f800283a 	ret

00018404 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   18404:	defff804 	addi	sp,sp,-32
   18408:	dfc00715 	stw	ra,28(sp)
   1840c:	df000615 	stw	fp,24(sp)
   18410:	dc000515 	stw	r16,20(sp)
   18414:	df000604 	addi	fp,sp,24
   18418:	e13ffb15 	stw	r4,-20(fp)
   1841c:	e17ffc15 	stw	r5,-16(fp)
   18420:	e1bffd15 	stw	r6,-12(fp)
   18424:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   18428:	e1bffe17 	ldw	r6,-8(fp)
   1842c:	e17ffd17 	ldw	r5,-12(fp)
   18430:	e13ffc17 	ldw	r4,-16(fp)
   18434:	001868c0 	call	1868c <open>
   18438:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   1843c:	e0bffa17 	ldw	r2,-24(fp)
   18440:	10002216 	blt	r2,zero,184cc <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   18444:	040000b4 	movhi	r16,2
   18448:	8424fb04 	addi	r16,r16,-27668
   1844c:	e0bffa17 	ldw	r2,-24(fp)
   18450:	01400304 	movi	r5,12
   18454:	1009883a 	mov	r4,r2
   18458:	00110380 	call	11038 <__mulsi3>
   1845c:	8085883a 	add	r2,r16,r2
   18460:	10c00017 	ldw	r3,0(r2)
   18464:	e0bffb17 	ldw	r2,-20(fp)
   18468:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1846c:	040000b4 	movhi	r16,2
   18470:	8424fb04 	addi	r16,r16,-27668
   18474:	e0bffa17 	ldw	r2,-24(fp)
   18478:	01400304 	movi	r5,12
   1847c:	1009883a 	mov	r4,r2
   18480:	00110380 	call	11038 <__mulsi3>
   18484:	8085883a 	add	r2,r16,r2
   18488:	10800104 	addi	r2,r2,4
   1848c:	10c00017 	ldw	r3,0(r2)
   18490:	e0bffb17 	ldw	r2,-20(fp)
   18494:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   18498:	040000b4 	movhi	r16,2
   1849c:	8424fb04 	addi	r16,r16,-27668
   184a0:	e0bffa17 	ldw	r2,-24(fp)
   184a4:	01400304 	movi	r5,12
   184a8:	1009883a 	mov	r4,r2
   184ac:	00110380 	call	11038 <__mulsi3>
   184b0:	8085883a 	add	r2,r16,r2
   184b4:	10800204 	addi	r2,r2,8
   184b8:	10c00017 	ldw	r3,0(r2)
   184bc:	e0bffb17 	ldw	r2,-20(fp)
   184c0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   184c4:	e13ffa17 	ldw	r4,-24(fp)
   184c8:	00187e80 	call	187e8 <alt_release_fd>
  }
} 
   184cc:	0001883a 	nop
   184d0:	e6ffff04 	addi	sp,fp,-4
   184d4:	dfc00217 	ldw	ra,8(sp)
   184d8:	df000117 	ldw	fp,4(sp)
   184dc:	dc000017 	ldw	r16,0(sp)
   184e0:	dec00304 	addi	sp,sp,12
   184e4:	f800283a 	ret

000184e8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   184e8:	defffb04 	addi	sp,sp,-20
   184ec:	dfc00415 	stw	ra,16(sp)
   184f0:	df000315 	stw	fp,12(sp)
   184f4:	df000304 	addi	fp,sp,12
   184f8:	e13ffd15 	stw	r4,-12(fp)
   184fc:	e17ffe15 	stw	r5,-8(fp)
   18500:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   18504:	01c07fc4 	movi	r7,511
   18508:	01800044 	movi	r6,1
   1850c:	e17ffd17 	ldw	r5,-12(fp)
   18510:	010000b4 	movhi	r4,2
   18514:	2124fe04 	addi	r4,r4,-27656
   18518:	00184040 	call	18404 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1851c:	01c07fc4 	movi	r7,511
   18520:	000d883a 	mov	r6,zero
   18524:	e17ffe17 	ldw	r5,-8(fp)
   18528:	010000b4 	movhi	r4,2
   1852c:	2124fb04 	addi	r4,r4,-27668
   18530:	00184040 	call	18404 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   18534:	01c07fc4 	movi	r7,511
   18538:	01800044 	movi	r6,1
   1853c:	e17fff17 	ldw	r5,-4(fp)
   18540:	010000b4 	movhi	r4,2
   18544:	21250104 	addi	r4,r4,-27644
   18548:	00184040 	call	18404 <alt_open_fd>
}  
   1854c:	0001883a 	nop
   18550:	e037883a 	mov	sp,fp
   18554:	dfc00117 	ldw	ra,4(sp)
   18558:	df000017 	ldw	fp,0(sp)
   1855c:	dec00204 	addi	sp,sp,8
   18560:	f800283a 	ret

00018564 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   18564:	defffe04 	addi	sp,sp,-8
   18568:	dfc00115 	stw	ra,4(sp)
   1856c:	df000015 	stw	fp,0(sp)
   18570:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   18574:	d0a00817 	ldw	r2,-32736(gp)
   18578:	10000326 	beq	r2,zero,18588 <alt_get_errno+0x24>
   1857c:	d0a00817 	ldw	r2,-32736(gp)
   18580:	103ee83a 	callr	r2
   18584:	00000106 	br	1858c <alt_get_errno+0x28>
   18588:	d0a0c704 	addi	r2,gp,-31972
}
   1858c:	e037883a 	mov	sp,fp
   18590:	dfc00117 	ldw	ra,4(sp)
   18594:	df000017 	ldw	fp,0(sp)
   18598:	dec00204 	addi	sp,sp,8
   1859c:	f800283a 	ret

000185a0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   185a0:	defffb04 	addi	sp,sp,-20
   185a4:	dfc00415 	stw	ra,16(sp)
   185a8:	df000315 	stw	fp,12(sp)
   185ac:	dc000215 	stw	r16,8(sp)
   185b0:	df000304 	addi	fp,sp,12
   185b4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   185b8:	e0bffe17 	ldw	r2,-8(fp)
   185bc:	10800217 	ldw	r2,8(r2)
   185c0:	10d00034 	orhi	r3,r2,16384
   185c4:	e0bffe17 	ldw	r2,-8(fp)
   185c8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   185cc:	e03ffd15 	stw	zero,-12(fp)
   185d0:	00002306 	br	18660 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   185d4:	040000b4 	movhi	r16,2
   185d8:	8424fb04 	addi	r16,r16,-27668
   185dc:	e0bffd17 	ldw	r2,-12(fp)
   185e0:	01400304 	movi	r5,12
   185e4:	1009883a 	mov	r4,r2
   185e8:	00110380 	call	11038 <__mulsi3>
   185ec:	8085883a 	add	r2,r16,r2
   185f0:	10c00017 	ldw	r3,0(r2)
   185f4:	e0bffe17 	ldw	r2,-8(fp)
   185f8:	10800017 	ldw	r2,0(r2)
   185fc:	1880151e 	bne	r3,r2,18654 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   18600:	040000b4 	movhi	r16,2
   18604:	8424fb04 	addi	r16,r16,-27668
   18608:	e0bffd17 	ldw	r2,-12(fp)
   1860c:	01400304 	movi	r5,12
   18610:	1009883a 	mov	r4,r2
   18614:	00110380 	call	11038 <__mulsi3>
   18618:	8085883a 	add	r2,r16,r2
   1861c:	10800204 	addi	r2,r2,8
   18620:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   18624:	10000b0e 	bge	r2,zero,18654 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   18628:	01400304 	movi	r5,12
   1862c:	e13ffd17 	ldw	r4,-12(fp)
   18630:	00110380 	call	11038 <__mulsi3>
   18634:	1007883a 	mov	r3,r2
   18638:	008000b4 	movhi	r2,2
   1863c:	10a4fb04 	addi	r2,r2,-27668
   18640:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   18644:	e0bffe17 	ldw	r2,-8(fp)
   18648:	18800226 	beq	r3,r2,18654 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1864c:	00bffcc4 	movi	r2,-13
   18650:	00000806 	br	18674 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   18654:	e0bffd17 	ldw	r2,-12(fp)
   18658:	10800044 	addi	r2,r2,1
   1865c:	e0bffd15 	stw	r2,-12(fp)
   18660:	d0a00717 	ldw	r2,-32740(gp)
   18664:	1007883a 	mov	r3,r2
   18668:	e0bffd17 	ldw	r2,-12(fp)
   1866c:	18bfd92e 	bgeu	r3,r2,185d4 <_gp+0xffff7068>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   18670:	0005883a 	mov	r2,zero
}
   18674:	e6ffff04 	addi	sp,fp,-4
   18678:	dfc00217 	ldw	ra,8(sp)
   1867c:	df000117 	ldw	fp,4(sp)
   18680:	dc000017 	ldw	r16,0(sp)
   18684:	dec00304 	addi	sp,sp,12
   18688:	f800283a 	ret

0001868c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1868c:	defff604 	addi	sp,sp,-40
   18690:	dfc00915 	stw	ra,36(sp)
   18694:	df000815 	stw	fp,32(sp)
   18698:	df000804 	addi	fp,sp,32
   1869c:	e13ffd15 	stw	r4,-12(fp)
   186a0:	e17ffe15 	stw	r5,-8(fp)
   186a4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   186a8:	00bfffc4 	movi	r2,-1
   186ac:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   186b0:	00bffb44 	movi	r2,-19
   186b4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   186b8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   186bc:	d1600504 	addi	r5,gp,-32748
   186c0:	e13ffd17 	ldw	r4,-12(fp)
   186c4:	0018a340 	call	18a34 <alt_find_dev>
   186c8:	e0bff815 	stw	r2,-32(fp)
   186cc:	e0bff817 	ldw	r2,-32(fp)
   186d0:	1000051e 	bne	r2,zero,186e8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   186d4:	e13ffd17 	ldw	r4,-12(fp)
   186d8:	0018ac40 	call	18ac4 <alt_find_file>
   186dc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   186e0:	00800044 	movi	r2,1
   186e4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   186e8:	e0bff817 	ldw	r2,-32(fp)
   186ec:	10002b26 	beq	r2,zero,1879c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   186f0:	e13ff817 	ldw	r4,-32(fp)
   186f4:	0018bcc0 	call	18bcc <alt_get_fd>
   186f8:	e0bff915 	stw	r2,-28(fp)
   186fc:	e0bff917 	ldw	r2,-28(fp)
   18700:	1000030e 	bge	r2,zero,18710 <open+0x84>
    {
      status = index;
   18704:	e0bff917 	ldw	r2,-28(fp)
   18708:	e0bffa15 	stw	r2,-24(fp)
   1870c:	00002506 	br	187a4 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   18710:	01400304 	movi	r5,12
   18714:	e13ff917 	ldw	r4,-28(fp)
   18718:	00110380 	call	11038 <__mulsi3>
   1871c:	1007883a 	mov	r3,r2
   18720:	008000b4 	movhi	r2,2
   18724:	10a4fb04 	addi	r2,r2,-27668
   18728:	1885883a 	add	r2,r3,r2
   1872c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   18730:	e0fffe17 	ldw	r3,-8(fp)
   18734:	00900034 	movhi	r2,16384
   18738:	10bfffc4 	addi	r2,r2,-1
   1873c:	1886703a 	and	r3,r3,r2
   18740:	e0bffc17 	ldw	r2,-16(fp)
   18744:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   18748:	e0bffb17 	ldw	r2,-20(fp)
   1874c:	1000051e 	bne	r2,zero,18764 <open+0xd8>
   18750:	e13ffc17 	ldw	r4,-16(fp)
   18754:	00185a00 	call	185a0 <alt_file_locked>
   18758:	e0bffa15 	stw	r2,-24(fp)
   1875c:	e0bffa17 	ldw	r2,-24(fp)
   18760:	10001016 	blt	r2,zero,187a4 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   18764:	e0bff817 	ldw	r2,-32(fp)
   18768:	10800317 	ldw	r2,12(r2)
   1876c:	10000826 	beq	r2,zero,18790 <open+0x104>
   18770:	e0bff817 	ldw	r2,-32(fp)
   18774:	10800317 	ldw	r2,12(r2)
   18778:	e1ffff17 	ldw	r7,-4(fp)
   1877c:	e1bffe17 	ldw	r6,-8(fp)
   18780:	e17ffd17 	ldw	r5,-12(fp)
   18784:	e13ffc17 	ldw	r4,-16(fp)
   18788:	103ee83a 	callr	r2
   1878c:	00000106 	br	18794 <open+0x108>
   18790:	0005883a 	mov	r2,zero
   18794:	e0bffa15 	stw	r2,-24(fp)
   18798:	00000206 	br	187a4 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1879c:	00bffb44 	movi	r2,-19
   187a0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   187a4:	e0bffa17 	ldw	r2,-24(fp)
   187a8:	1000090e 	bge	r2,zero,187d0 <open+0x144>
  {
    alt_release_fd (index);  
   187ac:	e13ff917 	ldw	r4,-28(fp)
   187b0:	00187e80 	call	187e8 <alt_release_fd>
    ALT_ERRNO = -status;
   187b4:	00185640 	call	18564 <alt_get_errno>
   187b8:	1007883a 	mov	r3,r2
   187bc:	e0bffa17 	ldw	r2,-24(fp)
   187c0:	0085c83a 	sub	r2,zero,r2
   187c4:	18800015 	stw	r2,0(r3)
    return -1;
   187c8:	00bfffc4 	movi	r2,-1
   187cc:	00000106 	br	187d4 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   187d0:	e0bff917 	ldw	r2,-28(fp)
}
   187d4:	e037883a 	mov	sp,fp
   187d8:	dfc00117 	ldw	ra,4(sp)
   187dc:	df000017 	ldw	fp,0(sp)
   187e0:	dec00204 	addi	sp,sp,8
   187e4:	f800283a 	ret

000187e8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   187e8:	defffc04 	addi	sp,sp,-16
   187ec:	dfc00315 	stw	ra,12(sp)
   187f0:	df000215 	stw	fp,8(sp)
   187f4:	dc000115 	stw	r16,4(sp)
   187f8:	df000204 	addi	fp,sp,8
   187fc:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   18800:	e0bffe17 	ldw	r2,-8(fp)
   18804:	108000d0 	cmplti	r2,r2,3
   18808:	1000111e 	bne	r2,zero,18850 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   1880c:	040000b4 	movhi	r16,2
   18810:	8424fb04 	addi	r16,r16,-27668
   18814:	e0bffe17 	ldw	r2,-8(fp)
   18818:	01400304 	movi	r5,12
   1881c:	1009883a 	mov	r4,r2
   18820:	00110380 	call	11038 <__mulsi3>
   18824:	8085883a 	add	r2,r16,r2
   18828:	10800204 	addi	r2,r2,8
   1882c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   18830:	040000b4 	movhi	r16,2
   18834:	8424fb04 	addi	r16,r16,-27668
   18838:	e0bffe17 	ldw	r2,-8(fp)
   1883c:	01400304 	movi	r5,12
   18840:	1009883a 	mov	r4,r2
   18844:	00110380 	call	11038 <__mulsi3>
   18848:	8085883a 	add	r2,r16,r2
   1884c:	10000015 	stw	zero,0(r2)
  }
}
   18850:	0001883a 	nop
   18854:	e6ffff04 	addi	sp,fp,-4
   18858:	dfc00217 	ldw	ra,8(sp)
   1885c:	df000117 	ldw	fp,4(sp)
   18860:	dc000017 	ldw	r16,0(sp)
   18864:	dec00304 	addi	sp,sp,12
   18868:	f800283a 	ret

0001886c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1886c:	defffa04 	addi	sp,sp,-24
   18870:	df000515 	stw	fp,20(sp)
   18874:	df000504 	addi	fp,sp,20
   18878:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1887c:	0005303a 	rdctl	r2,status
   18880:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18884:	e0fffc17 	ldw	r3,-16(fp)
   18888:	00bfff84 	movi	r2,-2
   1888c:	1884703a 	and	r2,r3,r2
   18890:	1001703a 	wrctl	status,r2
  
  return context;
   18894:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   18898:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   1889c:	e0bfff17 	ldw	r2,-4(fp)
   188a0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   188a4:	e0bffd17 	ldw	r2,-12(fp)
   188a8:	10800017 	ldw	r2,0(r2)
   188ac:	e0fffd17 	ldw	r3,-12(fp)
   188b0:	18c00117 	ldw	r3,4(r3)
   188b4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   188b8:	e0bffd17 	ldw	r2,-12(fp)
   188bc:	10800117 	ldw	r2,4(r2)
   188c0:	e0fffd17 	ldw	r3,-12(fp)
   188c4:	18c00017 	ldw	r3,0(r3)
   188c8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   188cc:	e0bffd17 	ldw	r2,-12(fp)
   188d0:	e0fffd17 	ldw	r3,-12(fp)
   188d4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   188d8:	e0bffd17 	ldw	r2,-12(fp)
   188dc:	e0fffd17 	ldw	r3,-12(fp)
   188e0:	10c00015 	stw	r3,0(r2)
   188e4:	e0bffb17 	ldw	r2,-20(fp)
   188e8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   188ec:	e0bffe17 	ldw	r2,-8(fp)
   188f0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   188f4:	0001883a 	nop
   188f8:	e037883a 	mov	sp,fp
   188fc:	df000017 	ldw	fp,0(sp)
   18900:	dec00104 	addi	sp,sp,4
   18904:	f800283a 	ret

00018908 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   18908:	defffb04 	addi	sp,sp,-20
   1890c:	dfc00415 	stw	ra,16(sp)
   18910:	df000315 	stw	fp,12(sp)
   18914:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   18918:	d0a00a17 	ldw	r2,-32728(gp)
   1891c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   18920:	d0a0cd17 	ldw	r2,-31948(gp)
   18924:	10800044 	addi	r2,r2,1
   18928:	d0a0cd15 	stw	r2,-31948(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1892c:	00002e06 	br	189e8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   18930:	e0bffd17 	ldw	r2,-12(fp)
   18934:	10800017 	ldw	r2,0(r2)
   18938:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1893c:	e0bffd17 	ldw	r2,-12(fp)
   18940:	10800403 	ldbu	r2,16(r2)
   18944:	10803fcc 	andi	r2,r2,255
   18948:	10000426 	beq	r2,zero,1895c <alt_tick+0x54>
   1894c:	d0a0cd17 	ldw	r2,-31948(gp)
   18950:	1000021e 	bne	r2,zero,1895c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   18954:	e0bffd17 	ldw	r2,-12(fp)
   18958:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1895c:	e0bffd17 	ldw	r2,-12(fp)
   18960:	10800217 	ldw	r2,8(r2)
   18964:	d0e0cd17 	ldw	r3,-31948(gp)
   18968:	18801d36 	bltu	r3,r2,189e0 <alt_tick+0xd8>
   1896c:	e0bffd17 	ldw	r2,-12(fp)
   18970:	10800403 	ldbu	r2,16(r2)
   18974:	10803fcc 	andi	r2,r2,255
   18978:	1000191e 	bne	r2,zero,189e0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   1897c:	e0bffd17 	ldw	r2,-12(fp)
   18980:	10800317 	ldw	r2,12(r2)
   18984:	e0fffd17 	ldw	r3,-12(fp)
   18988:	18c00517 	ldw	r3,20(r3)
   1898c:	1809883a 	mov	r4,r3
   18990:	103ee83a 	callr	r2
   18994:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   18998:	e0bfff17 	ldw	r2,-4(fp)
   1899c:	1000031e 	bne	r2,zero,189ac <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   189a0:	e13ffd17 	ldw	r4,-12(fp)
   189a4:	001886c0 	call	1886c <alt_alarm_stop>
   189a8:	00000d06 	br	189e0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   189ac:	e0bffd17 	ldw	r2,-12(fp)
   189b0:	10c00217 	ldw	r3,8(r2)
   189b4:	e0bfff17 	ldw	r2,-4(fp)
   189b8:	1887883a 	add	r3,r3,r2
   189bc:	e0bffd17 	ldw	r2,-12(fp)
   189c0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   189c4:	e0bffd17 	ldw	r2,-12(fp)
   189c8:	10c00217 	ldw	r3,8(r2)
   189cc:	d0a0cd17 	ldw	r2,-31948(gp)
   189d0:	1880032e 	bgeu	r3,r2,189e0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   189d4:	e0bffd17 	ldw	r2,-12(fp)
   189d8:	00c00044 	movi	r3,1
   189dc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   189e0:	e0bffe17 	ldw	r2,-8(fp)
   189e4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   189e8:	e0fffd17 	ldw	r3,-12(fp)
   189ec:	d0a00a04 	addi	r2,gp,-32728
   189f0:	18bfcf1e 	bne	r3,r2,18930 <_gp+0xffff73c4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   189f4:	0001883a 	nop
}
   189f8:	0001883a 	nop
   189fc:	e037883a 	mov	sp,fp
   18a00:	dfc00117 	ldw	ra,4(sp)
   18a04:	df000017 	ldw	fp,0(sp)
   18a08:	dec00204 	addi	sp,sp,8
   18a0c:	f800283a 	ret

00018a10 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   18a10:	deffff04 	addi	sp,sp,-4
   18a14:	df000015 	stw	fp,0(sp)
   18a18:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   18a1c:	000170fa 	wrctl	ienable,zero
}
   18a20:	0001883a 	nop
   18a24:	e037883a 	mov	sp,fp
   18a28:	df000017 	ldw	fp,0(sp)
   18a2c:	dec00104 	addi	sp,sp,4
   18a30:	f800283a 	ret

00018a34 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   18a34:	defffa04 	addi	sp,sp,-24
   18a38:	dfc00515 	stw	ra,20(sp)
   18a3c:	df000415 	stw	fp,16(sp)
   18a40:	df000404 	addi	fp,sp,16
   18a44:	e13ffe15 	stw	r4,-8(fp)
   18a48:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   18a4c:	e0bfff17 	ldw	r2,-4(fp)
   18a50:	10800017 	ldw	r2,0(r2)
   18a54:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   18a58:	e13ffe17 	ldw	r4,-8(fp)
   18a5c:	001134c0 	call	1134c <strlen>
   18a60:	10800044 	addi	r2,r2,1
   18a64:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   18a68:	00000d06 	br	18aa0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   18a6c:	e0bffc17 	ldw	r2,-16(fp)
   18a70:	10800217 	ldw	r2,8(r2)
   18a74:	e0fffd17 	ldw	r3,-12(fp)
   18a78:	180d883a 	mov	r6,r3
   18a7c:	e17ffe17 	ldw	r5,-8(fp)
   18a80:	1009883a 	mov	r4,r2
   18a84:	0018e340 	call	18e34 <memcmp>
   18a88:	1000021e 	bne	r2,zero,18a94 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   18a8c:	e0bffc17 	ldw	r2,-16(fp)
   18a90:	00000706 	br	18ab0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   18a94:	e0bffc17 	ldw	r2,-16(fp)
   18a98:	10800017 	ldw	r2,0(r2)
   18a9c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   18aa0:	e0fffc17 	ldw	r3,-16(fp)
   18aa4:	e0bfff17 	ldw	r2,-4(fp)
   18aa8:	18bff01e 	bne	r3,r2,18a6c <_gp+0xffff7500>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   18aac:	0005883a 	mov	r2,zero
}
   18ab0:	e037883a 	mov	sp,fp
   18ab4:	dfc00117 	ldw	ra,4(sp)
   18ab8:	df000017 	ldw	fp,0(sp)
   18abc:	dec00204 	addi	sp,sp,8
   18ac0:	f800283a 	ret

00018ac4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   18ac4:	defffb04 	addi	sp,sp,-20
   18ac8:	dfc00415 	stw	ra,16(sp)
   18acc:	df000315 	stw	fp,12(sp)
   18ad0:	df000304 	addi	fp,sp,12
   18ad4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   18ad8:	d0a00317 	ldw	r2,-32756(gp)
   18adc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   18ae0:	00003106 	br	18ba8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   18ae4:	e0bffd17 	ldw	r2,-12(fp)
   18ae8:	10800217 	ldw	r2,8(r2)
   18aec:	1009883a 	mov	r4,r2
   18af0:	001134c0 	call	1134c <strlen>
   18af4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   18af8:	e0bffd17 	ldw	r2,-12(fp)
   18afc:	10c00217 	ldw	r3,8(r2)
   18b00:	e0bffe17 	ldw	r2,-8(fp)
   18b04:	10bfffc4 	addi	r2,r2,-1
   18b08:	1885883a 	add	r2,r3,r2
   18b0c:	10800003 	ldbu	r2,0(r2)
   18b10:	10803fcc 	andi	r2,r2,255
   18b14:	1080201c 	xori	r2,r2,128
   18b18:	10bfe004 	addi	r2,r2,-128
   18b1c:	10800bd8 	cmpnei	r2,r2,47
   18b20:	1000031e 	bne	r2,zero,18b30 <alt_find_file+0x6c>
    {
      len -= 1;
   18b24:	e0bffe17 	ldw	r2,-8(fp)
   18b28:	10bfffc4 	addi	r2,r2,-1
   18b2c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   18b30:	e0bffe17 	ldw	r2,-8(fp)
   18b34:	e0ffff17 	ldw	r3,-4(fp)
   18b38:	1885883a 	add	r2,r3,r2
   18b3c:	10800003 	ldbu	r2,0(r2)
   18b40:	10803fcc 	andi	r2,r2,255
   18b44:	1080201c 	xori	r2,r2,128
   18b48:	10bfe004 	addi	r2,r2,-128
   18b4c:	10800be0 	cmpeqi	r2,r2,47
   18b50:	1000081e 	bne	r2,zero,18b74 <alt_find_file+0xb0>
   18b54:	e0bffe17 	ldw	r2,-8(fp)
   18b58:	e0ffff17 	ldw	r3,-4(fp)
   18b5c:	1885883a 	add	r2,r3,r2
   18b60:	10800003 	ldbu	r2,0(r2)
   18b64:	10803fcc 	andi	r2,r2,255
   18b68:	1080201c 	xori	r2,r2,128
   18b6c:	10bfe004 	addi	r2,r2,-128
   18b70:	10000a1e 	bne	r2,zero,18b9c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   18b74:	e0bffd17 	ldw	r2,-12(fp)
   18b78:	10800217 	ldw	r2,8(r2)
   18b7c:	e0fffe17 	ldw	r3,-8(fp)
   18b80:	180d883a 	mov	r6,r3
   18b84:	e17fff17 	ldw	r5,-4(fp)
   18b88:	1009883a 	mov	r4,r2
   18b8c:	0018e340 	call	18e34 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   18b90:	1000021e 	bne	r2,zero,18b9c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   18b94:	e0bffd17 	ldw	r2,-12(fp)
   18b98:	00000706 	br	18bb8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   18b9c:	e0bffd17 	ldw	r2,-12(fp)
   18ba0:	10800017 	ldw	r2,0(r2)
   18ba4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   18ba8:	e0fffd17 	ldw	r3,-12(fp)
   18bac:	d0a00304 	addi	r2,gp,-32756
   18bb0:	18bfcc1e 	bne	r3,r2,18ae4 <_gp+0xffff7578>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   18bb4:	0005883a 	mov	r2,zero
}
   18bb8:	e037883a 	mov	sp,fp
   18bbc:	dfc00117 	ldw	ra,4(sp)
   18bc0:	df000017 	ldw	fp,0(sp)
   18bc4:	dec00204 	addi	sp,sp,8
   18bc8:	f800283a 	ret

00018bcc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   18bcc:	defffa04 	addi	sp,sp,-24
   18bd0:	dfc00515 	stw	ra,20(sp)
   18bd4:	df000415 	stw	fp,16(sp)
   18bd8:	dc000315 	stw	r16,12(sp)
   18bdc:	df000404 	addi	fp,sp,16
   18be0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   18be4:	00bffa04 	movi	r2,-24
   18be8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   18bec:	e03ffc15 	stw	zero,-16(fp)
   18bf0:	00001d06 	br	18c68 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   18bf4:	040000b4 	movhi	r16,2
   18bf8:	8424fb04 	addi	r16,r16,-27668
   18bfc:	e0bffc17 	ldw	r2,-16(fp)
   18c00:	01400304 	movi	r5,12
   18c04:	1009883a 	mov	r4,r2
   18c08:	00110380 	call	11038 <__mulsi3>
   18c0c:	8085883a 	add	r2,r16,r2
   18c10:	10800017 	ldw	r2,0(r2)
   18c14:	1000111e 	bne	r2,zero,18c5c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   18c18:	040000b4 	movhi	r16,2
   18c1c:	8424fb04 	addi	r16,r16,-27668
   18c20:	e0bffc17 	ldw	r2,-16(fp)
   18c24:	01400304 	movi	r5,12
   18c28:	1009883a 	mov	r4,r2
   18c2c:	00110380 	call	11038 <__mulsi3>
   18c30:	8085883a 	add	r2,r16,r2
   18c34:	e0fffe17 	ldw	r3,-8(fp)
   18c38:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   18c3c:	d0e00717 	ldw	r3,-32740(gp)
   18c40:	e0bffc17 	ldw	r2,-16(fp)
   18c44:	1880020e 	bge	r3,r2,18c50 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   18c48:	e0bffc17 	ldw	r2,-16(fp)
   18c4c:	d0a00715 	stw	r2,-32740(gp)
      }
      rc = i;
   18c50:	e0bffc17 	ldw	r2,-16(fp)
   18c54:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   18c58:	00000606 	br	18c74 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   18c5c:	e0bffc17 	ldw	r2,-16(fp)
   18c60:	10800044 	addi	r2,r2,1
   18c64:	e0bffc15 	stw	r2,-16(fp)
   18c68:	e0bffc17 	ldw	r2,-16(fp)
   18c6c:	10800810 	cmplti	r2,r2,32
   18c70:	103fe01e 	bne	r2,zero,18bf4 <_gp+0xffff7688>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   18c74:	e0bffd17 	ldw	r2,-12(fp)
}
   18c78:	e6ffff04 	addi	sp,fp,-4
   18c7c:	dfc00217 	ldw	ra,8(sp)
   18c80:	df000117 	ldw	fp,4(sp)
   18c84:	dc000017 	ldw	r16,0(sp)
   18c88:	dec00304 	addi	sp,sp,12
   18c8c:	f800283a 	ret

00018c90 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   18c90:	defffb04 	addi	sp,sp,-20
   18c94:	df000415 	stw	fp,16(sp)
   18c98:	df000404 	addi	fp,sp,16
   18c9c:	e13ffe15 	stw	r4,-8(fp)
   18ca0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   18ca4:	e0bfff17 	ldw	r2,-4(fp)
   18ca8:	10820070 	cmpltui	r2,r2,2049
   18cac:	1000021e 	bne	r2,zero,18cb8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   18cb0:	00820004 	movi	r2,2048
   18cb4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   18cb8:	e0fffe17 	ldw	r3,-8(fp)
   18cbc:	e0bfff17 	ldw	r2,-4(fp)
   18cc0:	1885883a 	add	r2,r3,r2
   18cc4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   18cc8:	e0bffe17 	ldw	r2,-8(fp)
   18ccc:	e0bffc15 	stw	r2,-16(fp)
   18cd0:	00000506 	br	18ce8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   18cd4:	e0bffc17 	ldw	r2,-16(fp)
   18cd8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   18cdc:	e0bffc17 	ldw	r2,-16(fp)
   18ce0:	10800804 	addi	r2,r2,32
   18ce4:	e0bffc15 	stw	r2,-16(fp)
   18ce8:	e0fffc17 	ldw	r3,-16(fp)
   18cec:	e0bffd17 	ldw	r2,-12(fp)
   18cf0:	18bff836 	bltu	r3,r2,18cd4 <_gp+0xffff7768>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   18cf4:	e0bffe17 	ldw	r2,-8(fp)
   18cf8:	108007cc 	andi	r2,r2,31
   18cfc:	10000226 	beq	r2,zero,18d08 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   18d00:	e0bffc17 	ldw	r2,-16(fp)
   18d04:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   18d08:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   18d0c:	0001883a 	nop
   18d10:	e037883a 	mov	sp,fp
   18d14:	df000017 	ldw	fp,0(sp)
   18d18:	dec00104 	addi	sp,sp,4
   18d1c:	f800283a 	ret

00018d20 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   18d20:	defffe04 	addi	sp,sp,-8
   18d24:	df000115 	stw	fp,4(sp)
   18d28:	df000104 	addi	fp,sp,4
   18d2c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   18d30:	e0bfff17 	ldw	r2,-4(fp)
   18d34:	10bffe84 	addi	r2,r2,-6
   18d38:	10c00428 	cmpgeui	r3,r2,16
   18d3c:	18001a1e 	bne	r3,zero,18da8 <alt_exception_cause_generated_bad_addr+0x88>
   18d40:	100690ba 	slli	r3,r2,2
   18d44:	008000b4 	movhi	r2,2
   18d48:	10a35604 	addi	r2,r2,-29352
   18d4c:	1885883a 	add	r2,r3,r2
   18d50:	10800017 	ldw	r2,0(r2)
   18d54:	1000683a 	jmp	r2
   18d58:	00018d98 	cmpnei	zero,zero,1590
   18d5c:	00018d98 	cmpnei	zero,zero,1590
   18d60:	00018da8 	cmpgeui	zero,zero,1590
   18d64:	00018da8 	cmpgeui	zero,zero,1590
   18d68:	00018da8 	cmpgeui	zero,zero,1590
   18d6c:	00018d98 	cmpnei	zero,zero,1590
   18d70:	00018da0 	cmpeqi	zero,zero,1590
   18d74:	00018da8 	cmpgeui	zero,zero,1590
   18d78:	00018d98 	cmpnei	zero,zero,1590
   18d7c:	00018d98 	cmpnei	zero,zero,1590
   18d80:	00018da8 	cmpgeui	zero,zero,1590
   18d84:	00018d98 	cmpnei	zero,zero,1590
   18d88:	00018da0 	cmpeqi	zero,zero,1590
   18d8c:	00018da8 	cmpgeui	zero,zero,1590
   18d90:	00018da8 	cmpgeui	zero,zero,1590
   18d94:	00018d98 	cmpnei	zero,zero,1590
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   18d98:	00800044 	movi	r2,1
   18d9c:	00000306 	br	18dac <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   18da0:	0005883a 	mov	r2,zero
   18da4:	00000106 	br	18dac <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   18da8:	0005883a 	mov	r2,zero
  }
}
   18dac:	e037883a 	mov	sp,fp
   18db0:	df000017 	ldw	fp,0(sp)
   18db4:	dec00104 	addi	sp,sp,4
   18db8:	f800283a 	ret

00018dbc <exit>:
   18dbc:	defffe04 	addi	sp,sp,-8
   18dc0:	000b883a 	mov	r5,zero
   18dc4:	dc000015 	stw	r16,0(sp)
   18dc8:	dfc00115 	stw	ra,4(sp)
   18dcc:	2021883a 	mov	r16,r4
   18dd0:	0018e640 	call	18e64 <__call_exitprocs>
   18dd4:	8009883a 	mov	r4,r16
   18dd8:	0018ff40 	call	18ff4 <_exit>

00018ddc <fputs>:
   18ddc:	defffd04 	addi	sp,sp,-12
   18de0:	dfc00215 	stw	ra,8(sp)
   18de4:	dc000115 	stw	r16,4(sp)
   18de8:	d9400015 	stw	r5,0(sp)
   18dec:	2021883a 	mov	r16,r4
   18df0:	001134c0 	call	1134c <strlen>
   18df4:	100f883a 	mov	r7,r2
   18df8:	008000b4 	movhi	r2,2
   18dfc:	d9400017 	ldw	r5,0(sp)
   18e00:	10a55c04 	addi	r2,r2,-27280
   18e04:	11000017 	ldw	r4,0(r2)
   18e08:	00c00074 	movhi	r3,1
   18e0c:	18c8b604 	addi	r3,r3,8920
   18e10:	28c00115 	stw	r3,4(r5)
   18e14:	800d883a 	mov	r6,r16
   18e18:	00122d80 	call	122d8 <__sfvwrite_small_dev>
   18e1c:	10bfffe0 	cmpeqi	r2,r2,-1
   18e20:	0085c83a 	sub	r2,zero,r2
   18e24:	dfc00217 	ldw	ra,8(sp)
   18e28:	dc000117 	ldw	r16,4(sp)
   18e2c:	dec00304 	addi	sp,sp,12
   18e30:	f800283a 	ret

00018e34 <memcmp>:
   18e34:	218d883a 	add	r6,r4,r6
   18e38:	21800826 	beq	r4,r6,18e5c <memcmp+0x28>
   18e3c:	20800003 	ldbu	r2,0(r4)
   18e40:	28c00003 	ldbu	r3,0(r5)
   18e44:	10c00226 	beq	r2,r3,18e50 <memcmp+0x1c>
   18e48:	10c5c83a 	sub	r2,r2,r3
   18e4c:	f800283a 	ret
   18e50:	21000044 	addi	r4,r4,1
   18e54:	29400044 	addi	r5,r5,1
   18e58:	003ff706 	br	18e38 <_gp+0xffff78cc>
   18e5c:	0005883a 	mov	r2,zero
   18e60:	f800283a 	ret

00018e64 <__call_exitprocs>:
   18e64:	defff504 	addi	sp,sp,-44
   18e68:	dd000515 	stw	r20,20(sp)
   18e6c:	050000b4 	movhi	r20,2
   18e70:	dc800315 	stw	r18,12(sp)
   18e74:	dfc00a15 	stw	ra,40(sp)
   18e78:	df000915 	stw	fp,36(sp)
   18e7c:	ddc00815 	stw	r23,32(sp)
   18e80:	dd800715 	stw	r22,28(sp)
   18e84:	dd400615 	stw	r21,24(sp)
   18e88:	dcc00415 	stw	r19,16(sp)
   18e8c:	dc400215 	stw	r17,8(sp)
   18e90:	dc000115 	stw	r16,4(sp)
   18e94:	d9000015 	stw	r4,0(sp)
   18e98:	2825883a 	mov	r18,r5
   18e9c:	a5255b04 	addi	r20,r20,-27284
   18ea0:	a4400017 	ldw	r17,0(r20)
   18ea4:	8cc00c17 	ldw	r19,48(r17)
   18ea8:	8c400c04 	addi	r17,r17,48
   18eac:	98004526 	beq	r19,zero,18fc4 <__call_exitprocs+0x160>
   18eb0:	9c000117 	ldw	r16,4(r19)
   18eb4:	00900034 	movhi	r2,16384
   18eb8:	10bfffc4 	addi	r2,r2,-1
   18ebc:	9d402217 	ldw	r21,136(r19)
   18ec0:	85bfffc4 	addi	r22,r16,-1
   18ec4:	80a1883a 	add	r16,r16,r2
   18ec8:	8421883a 	add	r16,r16,r16
   18ecc:	8421883a 	add	r16,r16,r16
   18ed0:	ac2f883a 	add	r23,r21,r16
   18ed4:	84000204 	addi	r16,r16,8
   18ed8:	9c21883a 	add	r16,r19,r16
   18edc:	b0002716 	blt	r22,zero,18f7c <__call_exitprocs+0x118>
   18ee0:	90000726 	beq	r18,zero,18f00 <__call_exitprocs+0x9c>
   18ee4:	a800041e 	bne	r21,zero,18ef8 <__call_exitprocs+0x94>
   18ee8:	b5bfffc4 	addi	r22,r22,-1
   18eec:	bdffff04 	addi	r23,r23,-4
   18ef0:	843fff04 	addi	r16,r16,-4
   18ef4:	003ff906 	br	18edc <_gp+0xffff7970>
   18ef8:	b9002017 	ldw	r4,128(r23)
   18efc:	913ffa1e 	bne	r18,r4,18ee8 <_gp+0xffff797c>
   18f00:	99000117 	ldw	r4,4(r19)
   18f04:	82000017 	ldw	r8,0(r16)
   18f08:	213fffc4 	addi	r4,r4,-1
   18f0c:	b100021e 	bne	r22,r4,18f18 <__call_exitprocs+0xb4>
   18f10:	9d800115 	stw	r22,4(r19)
   18f14:	00000106 	br	18f1c <__call_exitprocs+0xb8>
   18f18:	80000015 	stw	zero,0(r16)
   18f1c:	403ff226 	beq	r8,zero,18ee8 <_gp+0xffff797c>
   18f20:	9f000117 	ldw	fp,4(r19)
   18f24:	a8000526 	beq	r21,zero,18f3c <__call_exitprocs+0xd8>
   18f28:	00800044 	movi	r2,1
   18f2c:	1592983a 	sll	r9,r2,r22
   18f30:	a9404017 	ldw	r5,256(r21)
   18f34:	494a703a 	and	r5,r9,r5
   18f38:	2800021e 	bne	r5,zero,18f44 <__call_exitprocs+0xe0>
   18f3c:	403ee83a 	callr	r8
   18f40:	00000906 	br	18f68 <__call_exitprocs+0x104>
   18f44:	a9004117 	ldw	r4,260(r21)
   18f48:	4908703a 	and	r4,r9,r4
   18f4c:	2000041e 	bne	r4,zero,18f60 <__call_exitprocs+0xfc>
   18f50:	b9400017 	ldw	r5,0(r23)
   18f54:	d9000017 	ldw	r4,0(sp)
   18f58:	403ee83a 	callr	r8
   18f5c:	00000206 	br	18f68 <__call_exitprocs+0x104>
   18f60:	b9000017 	ldw	r4,0(r23)
   18f64:	403ee83a 	callr	r8
   18f68:	99000117 	ldw	r4,4(r19)
   18f6c:	e13fcc1e 	bne	fp,r4,18ea0 <_gp+0xffff7934>
   18f70:	89000017 	ldw	r4,0(r17)
   18f74:	993fdc26 	beq	r19,r4,18ee8 <_gp+0xffff797c>
   18f78:	003fc906 	br	18ea0 <_gp+0xffff7934>
   18f7c:	00800074 	movhi	r2,1
   18f80:	1092ff04 	addi	r2,r2,19452
   18f84:	10000f26 	beq	r2,zero,18fc4 <__call_exitprocs+0x160>
   18f88:	99400117 	ldw	r5,4(r19)
   18f8c:	99000017 	ldw	r4,0(r19)
   18f90:	2800091e 	bne	r5,zero,18fb8 <__call_exitprocs+0x154>
   18f94:	20000826 	beq	r4,zero,18fb8 <__call_exitprocs+0x154>
   18f98:	89000015 	stw	r4,0(r17)
   18f9c:	a8000226 	beq	r21,zero,18fa8 <__call_exitprocs+0x144>
   18fa0:	a809883a 	mov	r4,r21
   18fa4:	0014bfc0 	call	14bfc <free>
   18fa8:	9809883a 	mov	r4,r19
   18fac:	0014bfc0 	call	14bfc <free>
   18fb0:	8cc00017 	ldw	r19,0(r17)
   18fb4:	003fbd06 	br	18eac <_gp+0xffff7940>
   18fb8:	9823883a 	mov	r17,r19
   18fbc:	2027883a 	mov	r19,r4
   18fc0:	003fba06 	br	18eac <_gp+0xffff7940>
   18fc4:	dfc00a17 	ldw	ra,40(sp)
   18fc8:	df000917 	ldw	fp,36(sp)
   18fcc:	ddc00817 	ldw	r23,32(sp)
   18fd0:	dd800717 	ldw	r22,28(sp)
   18fd4:	dd400617 	ldw	r21,24(sp)
   18fd8:	dd000517 	ldw	r20,20(sp)
   18fdc:	dcc00417 	ldw	r19,16(sp)
   18fe0:	dc800317 	ldw	r18,12(sp)
   18fe4:	dc400217 	ldw	r17,8(sp)
   18fe8:	dc000117 	ldw	r16,4(sp)
   18fec:	dec00b04 	addi	sp,sp,44
   18ff0:	f800283a 	ret

00018ff4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   18ff4:	defffd04 	addi	sp,sp,-12
   18ff8:	df000215 	stw	fp,8(sp)
   18ffc:	df000204 	addi	fp,sp,8
   19000:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   19004:	0001883a 	nop
   19008:	e0bfff17 	ldw	r2,-4(fp)
   1900c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   19010:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   19014:	10000226 	beq	r2,zero,19020 <_exit+0x2c>
    ALT_SIM_FAIL();
   19018:	002af070 	cmpltui	zero,zero,43969
   1901c:	00000106 	br	19024 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   19020:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   19024:	003fff06 	br	19024 <_gp+0xffff7ab8>
